window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = {"version": "0.9.5", "fields": ["qualname", "fullname", "annotation", "default_value", "signature", "bases", "doc"], "ref": "fullname", "documentStore": {"docs": {"src": {"fullname": "src", "modulename": "src", "kind": "module", "doc": "<p>Project [C]haron consists in a translation validation framework of programs\nwritten in a subset of the C language.</p>\n"}, "src.abstract_syntax_tree": {"fullname": "src.abstract_syntax_tree", "modulename": "src.abstract_syntax_tree", "kind": "module", "doc": "<p>Implement the Abstract Syntax Tree (AST).</p>\n"}, "src.abstract_syntax_tree.AbstractSyntaxTree": {"fullname": "src.abstract_syntax_tree.AbstractSyntaxTree", "modulename": "src.abstract_syntax_tree", "qualname": "AbstractSyntaxTree", "kind": "class", "doc": "<p>Abstract Syntax Tree that contains Nodes generated from a source code.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>source_code : dict[str, dict]\n    A list of tuples created by the <code>Lexer</code> that contains the\n    representation of the source code in (<code>symbol</code>, <code>value</code>) format.</p>\n"}, "src.abstract_syntax_tree.AbstractSyntaxTree.__init__": {"fullname": "src.abstract_syntax_tree.AbstractSyntaxTree.__init__", "modulename": "src.abstract_syntax_tree", "qualname": "AbstractSyntaxTree.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">source_code</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">]</span></span>)</span>"}, "src.abstract_syntax_tree.AbstractSyntaxTree.source_code": {"fullname": "src.abstract_syntax_tree.AbstractSyntaxTree.source_code", "modulename": "src.abstract_syntax_tree", "qualname": "AbstractSyntaxTree.source_code", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, dict]"}, "src.abstract_syntax_tree.AbstractSyntaxTree.root": {"fullname": "src.abstract_syntax_tree.AbstractSyntaxTree.root", "modulename": "src.abstract_syntax_tree", "qualname": "AbstractSyntaxTree.root", "kind": "variable", "doc": "<p></p>\n", "annotation": ": src.ast_nodes.basic.PROG.PROG"}, "src.abstract_syntax_tree.AbstractSyntaxTree.current_symbol": {"fullname": "src.abstract_syntax_tree.AbstractSyntaxTree.current_symbol", "modulename": "src.abstract_syntax_tree", "qualname": "AbstractSyntaxTree.current_symbol", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "src.abstract_syntax_tree.AbstractSyntaxTree.current_value": {"fullname": "src.abstract_syntax_tree.AbstractSyntaxTree.current_value", "modulename": "src.abstract_syntax_tree", "qualname": "AbstractSyntaxTree.current_value", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict"}, "src.abstract_syntax_tree.AbstractSyntaxTree.current_statement_list": {"fullname": "src.abstract_syntax_tree.AbstractSyntaxTree.current_statement_list", "modulename": "src.abstract_syntax_tree", "qualname": "AbstractSyntaxTree.current_statement_list", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[tuple[str, dict]]"}, "src.abstract_syntax_tree.AbstractSyntaxTree.current_function_type": {"fullname": "src.abstract_syntax_tree.AbstractSyntaxTree.current_function_type", "modulename": "src.abstract_syntax_tree", "qualname": "AbstractSyntaxTree.current_function_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "src.abstract_syntax_tree.AbstractSyntaxTree.build": {"fullname": "src.abstract_syntax_tree.AbstractSyntaxTree.build", "modulename": "src.abstract_syntax_tree", "qualname": "AbstractSyntaxTree.build", "kind": "function", "doc": "<p>Build the Abstract Syntax Tree (AST) from the source code.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>root : PROG\n    The root of the built AST.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">basic</span><span class=\"o\">.</span><span class=\"n\">PROG</span><span class=\"o\">.</span><span class=\"n\">PROG</span>:</span></span>", "funcdef": "def"}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_struct_definitions": {"fullname": "src.abstract_syntax_tree.AbstractSyntaxTree.parse_struct_definitions", "modulename": "src.abstract_syntax_tree", "qualname": "AbstractSyntaxTree.parse_struct_definitions", "kind": "function", "doc": "<p>Parse struct definitions and add it to the Abstract Syntax Tree.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_global_variables": {"fullname": "src.abstract_syntax_tree.AbstractSyntaxTree.parse_global_variables", "modulename": "src.abstract_syntax_tree", "qualname": "AbstractSyntaxTree.parse_global_variables", "kind": "function", "doc": "<p>Parse global variables and add it to the Abstract Syntax Tree.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_functions": {"fullname": "src.abstract_syntax_tree.AbstractSyntaxTree.parse_functions", "modulename": "src.abstract_syntax_tree", "qualname": "AbstractSyntaxTree.parse_functions", "kind": "function", "doc": "<p>Parse functions and add it to the Abstract Syntax Tree.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.abstract_syntax_tree.AbstractSyntaxTree.print_tree": {"fullname": "src.abstract_syntax_tree.AbstractSyntaxTree.print_tree", "modulename": "src.abstract_syntax_tree", "qualname": "AbstractSyntaxTree.print_tree", "kind": "function", "doc": "<p>Recursively print the AST starting from the <code>root</code>.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>indent : int (optional, default = 0)\n    The indentation level for pretty printing. Defaults to 0 for the\n    root (and is incremented by 1 for each level).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">indent</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.abstract_syntax_tree.AbstractSyntaxTree.get_root": {"fullname": "src.abstract_syntax_tree.AbstractSyntaxTree.get_root", "modulename": "src.abstract_syntax_tree", "qualname": "AbstractSyntaxTree.get_root", "kind": "function", "doc": "<p>Get the root of this Abstract Syntax Tree.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>root : PROG\n    The root of the tree.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">basic</span><span class=\"o\">.</span><span class=\"n\">PROG</span><span class=\"o\">.</span><span class=\"n\">PROG</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes": {"fullname": "src.ast_nodes", "modulename": "src.ast_nodes", "kind": "module", "doc": "<p>Export classes to allow <code>from src.nodes import *</code>.</p>\n"}, "src.ast_nodes.node": {"fullname": "src.ast_nodes.node", "modulename": "src.ast_nodes.node", "kind": "module", "doc": "<p>Base class for AST Nodes classes (e.g., VAR, CST etc.).</p>\n"}, "src.ast_nodes.node.Node": {"fullname": "src.ast_nodes.node.Node", "modulename": "src.ast_nodes.node", "qualname": "Node", "kind": "class", "doc": "<p>Implement a Node for the AST.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>value : str, int, float, or None, optional (default = None)\n    The value the Node holds, if any. Defaults to None.\ntype : str or None (optional, default = None)\n    The type of the Node, if any. Defaults to None.\nuses_register : bool (optional, default = False)\n    Whether the code generated by this Node will use a register (i.e.,\n    whether the exported code should have the <code>register</code> field).</p>\n"}, "src.ast_nodes.node.Node.__init__": {"fullname": "src.ast_nodes.node.Node.__init__", "modulename": "src.ast_nodes.node", "qualname": "Node.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"nb\">type</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">uses_register</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, "src.ast_nodes.node.Node.value": {"fullname": "src.ast_nodes.node.Node.value", "modulename": "src.ast_nodes.node", "qualname": "Node.value", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[int, str, float, NoneType]"}, "src.ast_nodes.node.Node.type": {"fullname": "src.ast_nodes.node.Node.type", "modulename": "src.ast_nodes.node", "qualname": "Node.type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, "src.ast_nodes.node.Node.certificate_label": {"fullname": "src.ast_nodes.node.Node.certificate_label", "modulename": "src.ast_nodes.node", "qualname": "Node.certificate_label", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "src.ast_nodes.node.Node.uses_register": {"fullname": "src.ast_nodes.node.Node.uses_register", "modulename": "src.ast_nodes.node", "qualname": "Node.uses_register", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, "src.ast_nodes.node.Node.instruction": {"fullname": "src.ast_nodes.node.Node.instruction", "modulename": "src.ast_nodes.node", "qualname": "Node.instruction", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "src.ast_nodes.node.Node.symbol": {"fullname": "src.ast_nodes.node.Node.symbol", "modulename": "src.ast_nodes.node", "qualname": "Node.symbol", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "src.ast_nodes.node.Node.get_value": {"fullname": "src.ast_nodes.node.Node.get_value", "modulename": "src.ast_nodes.node", "qualname": "Node.get_value", "kind": "function", "doc": "<p>Get the value of this Node.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>: Union[int, str, float, None]\n    The value of this Node.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.node.Node.get_type": {"fullname": "src.ast_nodes.node.Node.get_type", "modulename": "src.ast_nodes.node", "qualname": "Node.get_type", "kind": "function", "doc": "<p>Get the type of this Node.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>: Union[str, None]\n    The type of the Node.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.node.Node.get_certificate_label": {"fullname": "src.ast_nodes.node.Node.get_certificate_label", "modulename": "src.ast_nodes.node", "qualname": "Node.get_certificate_label", "kind": "function", "doc": "<p>Get the contents of <code>certificate_label</code>.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>: list of str\n    A list containing the certificate label of the <code>Node</code>.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This method returns a list, rather than the string itself, in order to\nallow returning multiple labels when nodes have children. Thus,\nsubclasses should return a composition of lists.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.node.Node.print": {"fullname": "src.ast_nodes.node.Node.print", "modulename": "src.ast_nodes.node", "qualname": "Node.print", "kind": "function", "doc": "<p>Print the string representation of <code>self</code>.</p>\n\n<p>The printed text is indented according with the optional <code>indent</code>\nparemeter.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>indent : int (optional, default = 0)\n    The number of left padding spaces to indent.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">indent</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.node.Node.generate_code": {"fullname": "src.ast_nodes.node.Node.generate_code", "modulename": "src.ast_nodes.node", "qualname": "Node.generate_code", "kind": "function", "doc": "<p>Generate the code associated with this <code>Node</code>.</p>\n\n<p>The generated code consists of a dictionary containing the relevant\n<code>Node</code> data for the code to run -- namely, the <code>instruction</code>, and the\n<code>value</code>.</p>\n\n<p>Notice that some <code>Nodes</code> may rewrite this method in order to deal\nwith special attributes -- such as the <code>Operation</code> nodes, that must\nhandle its children nodes.</p>\n\n<p>This method takes an integer as its parameter in order to allocate a\nregister to support the generated code. It also returns an integer --\nusually <code>register + 1</code> -- for it to be passed to the next Node.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>register : int\n    The number of the register to be used by the code generated by this\n    Node.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>register : int\n    The number of the next register available.\ncode_metadata : list of dict\n    Return a list of dictionaries containing code metadata: the register\n    to be used, the related <code>instruction</code> and its metadata.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This method returns a <code>list</code> rather than only the <code>code_metadata</code> in\norder to standardize the return type as some subclasses might have to\ngenerate code using not only the node itself, but its children, too.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">register</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]]]</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.node.Node.certificate": {"fullname": "src.ast_nodes.node.Node.certificate", "modulename": "src.ast_nodes.node", "qualname": "Node.certificate", "kind": "function", "doc": "<p>Compute the certificate of the current <code>Node</code>, and set this attribute.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>positional_prime : int\n    A prime number that denotes the relative position of this node in\n    the source code.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>: int\n    The prime that comes immediately after <code>positional_prime</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">positional_prime</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.basic": {"fullname": "src.ast_nodes.basic", "modulename": "src.ast_nodes.basic", "kind": "module", "doc": "<p></p>\n"}, "src.ast_nodes.basic.CST": {"fullname": "src.ast_nodes.basic.CST", "modulename": "src.ast_nodes.basic.CST", "kind": "module", "doc": "<p>Representation of CST nodes for the Abstract Syntax Tree.</p>\n"}, "src.ast_nodes.basic.CST.CST": {"fullname": "src.ast_nodes.basic.CST.CST", "modulename": "src.ast_nodes.basic.CST", "qualname": "CST", "kind": "class", "doc": "<p>Implement the representation of a constant for the AST.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>constant_metadata : dict[str, str]\n    A dictionary containing metadata (type and value) about this constant.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>TypeError\n    Raised if the <code>type</code> parameter is not valid. <code>CONSTANT_TYPES</code>\n    contains the currently supported types.</p>\n", "bases": "src.ast_nodes.node.Node"}, "src.ast_nodes.basic.CST.CST.__init__": {"fullname": "src.ast_nodes.basic.CST.CST.__init__", "modulename": "src.ast_nodes.basic.CST", "qualname": "CST.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">constant_metadata</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span>)</span>"}, "src.ast_nodes.basic.CST.CST.type": {"fullname": "src.ast_nodes.basic.CST.CST.type", "modulename": "src.ast_nodes.basic.CST", "qualname": "CST.type", "kind": "variable", "doc": "<p></p>\n"}, "src.ast_nodes.basic.CST.CST.instruction": {"fullname": "src.ast_nodes.basic.CST.CST.instruction", "modulename": "src.ast_nodes.basic.CST", "qualname": "CST.instruction", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "src.ast_nodes.basic.CST.CST.symbol": {"fullname": "src.ast_nodes.basic.CST.CST.symbol", "modulename": "src.ast_nodes.basic.CST", "qualname": "CST.symbol", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "src.ast_nodes.basic.PROG": {"fullname": "src.ast_nodes.basic.PROG", "modulename": "src.ast_nodes.basic.PROG", "kind": "module", "doc": "<p>Representation of PROG nodes for the Abstract Syntax Tree.</p>\n"}, "src.ast_nodes.basic.PROG.PROG": {"fullname": "src.ast_nodes.basic.PROG.PROG", "modulename": "src.ast_nodes.basic.PROG", "qualname": "PROG", "kind": "class", "doc": "<p>Implement the representation of the beginning of a program for the AST.</p>\n", "bases": "src.ast_nodes.node.Node"}, "src.ast_nodes.basic.PROG.PROG.instruction": {"fullname": "src.ast_nodes.basic.PROG.PROG.instruction", "modulename": "src.ast_nodes.basic.PROG", "qualname": "PROG.instruction", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "src.ast_nodes.basic.PROG.PROG.children": {"fullname": "src.ast_nodes.basic.PROG.PROG.children", "modulename": "src.ast_nodes.basic.PROG", "qualname": "PROG.children", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[src.ast_nodes.node.Node]"}, "src.ast_nodes.basic.PROG.PROG.add_child": {"fullname": "src.ast_nodes.basic.PROG.PROG.add_child", "modulename": "src.ast_nodes.basic.PROG", "qualname": "PROG.add_child", "kind": "function", "doc": "<p>Add a child Node to the <code>self.children</code> list.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>child : Node\n    The child to be added to the list.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">child</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.basic.PROG.PROG.get_certificate_label": {"fullname": "src.ast_nodes.basic.PROG.PROG.get_certificate_label", "modulename": "src.ast_nodes.basic.PROG", "qualname": "PROG.get_certificate_label", "kind": "function", "doc": "<p>Get the contents of <code>certificate_label</code>.</p>\n\n<p>For <code>PROG</code> nodes, first obtain the certificate from each <code>child</code>\nsubtree, recursively, and then from the <code>PROG</code> node itself.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>: list of str\n    A list containing the certificate label of the <code>Node</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.basic.PROG.PROG.print": {"fullname": "src.ast_nodes.basic.PROG.PROG.print", "modulename": "src.ast_nodes.basic.PROG", "qualname": "PROG.print", "kind": "function", "doc": "<p>Print the string representation of this <code>PROG</code>.</p>\n\n<p>The node itself is aligned with <code>indent</code>, and its children are padded\nwith an additional left space.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>indent : int (optional, default = 0)\n    The number of left padding spaces to indent.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">indent</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"fullname": "src.ast_nodes.basic.PROG.PROG.generate_code", "modulename": "src.ast_nodes.basic.PROG", "qualname": "PROG.generate_code", "kind": "function", "doc": "<p>Generate the code associated with this <code>PROG</code>.</p>\n\n<p>For this node specialization, generate code from the <code>first_statement</code>\n(i.e., the program itself) and then add an ending instruction (<code>HALT</code>)\nto the code.</p>\n\n<p>Notice that the register may only be incremented by the parameter nodes'\n<code>generate_code</code> method. This Node does not increment the <code>register</code>,\nas it only adds a <code>HALT</code> to the instructions list.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>register : int\n    The number of the register to be used by the code generated by this\n    Node.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>register : int\n    The number of the next register available.\ncode_metadata : list of dict\n    Return a list of dictionaries containing code metadata: the related\n    <code>instruction</code> and <code>value</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">register</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]]]]</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.basic.PROG.PROG.certificate": {"fullname": "src.ast_nodes.basic.PROG.PROG.certificate", "modulename": "src.ast_nodes.basic.PROG", "qualname": "PROG.certificate", "kind": "function", "doc": "<p>Compute the certificate of <code>PROG</code>, and set this attribute.</p>\n\n<p>For <code>PROG</code> nodes, certificate the <code>first_statement</code>, recursively, and\nthen the <code>PROG</code> node itself.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>positional_prime : int\n    A prime number that denotes the relative position of this node in\n    the source code.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>: int\n    The prime that comes immediately after <code>positional_prime</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">positional_prime</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.basic.SEQ": {"fullname": "src.ast_nodes.basic.SEQ", "modulename": "src.ast_nodes.basic.SEQ", "kind": "module", "doc": "<p>Representation of SEQ nodes for the Abstract Syntax Tree.</p>\n"}, "src.ast_nodes.basic.SEQ.SEQ": {"fullname": "src.ast_nodes.basic.SEQ.SEQ", "modulename": "src.ast_nodes.basic.SEQ", "qualname": "SEQ", "kind": "class", "doc": "<p>Implement the representation of a sequence of statements for the AST.</p>\n\n<p>The node doesn't have any semantics itself, <code>instruction</code>, or has a\ncertificate. Its only purpose is to help structuring the AST.</p>\n", "bases": "src.ast_nodes.node.Node"}, "src.ast_nodes.basic.SEQ.SEQ.__init__": {"fullname": "src.ast_nodes.basic.SEQ.SEQ.__init__", "modulename": "src.ast_nodes.basic.SEQ", "qualname": "SEQ.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "src.ast_nodes.basic.SEQ.SEQ.children": {"fullname": "src.ast_nodes.basic.SEQ.SEQ.children", "modulename": "src.ast_nodes.basic.SEQ", "qualname": "SEQ.children", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[src.ast_nodes.node.Node]"}, "src.ast_nodes.basic.SEQ.SEQ.add_child": {"fullname": "src.ast_nodes.basic.SEQ.SEQ.add_child", "modulename": "src.ast_nodes.basic.SEQ", "qualname": "SEQ.add_child", "kind": "function", "doc": "<p>Add a child Node to the <code>self.children</code> list.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>child : Node\n    The child to be added to the list.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">child</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.basic.SEQ.SEQ.get_certificate_label": {"fullname": "src.ast_nodes.basic.SEQ.SEQ.get_certificate_label", "modulename": "src.ast_nodes.basic.SEQ", "qualname": "SEQ.get_certificate_label", "kind": "function", "doc": "<p>Get the contents of <code>certificate_label</code>.</p>\n\n<p>For <code>SEQ</code> nodes, obtain the certificate from the <code>children</code> subtrees,\nrecursively. The <code>SEQ</code> node itself does not have a certificate.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>: list of str\n    A list containing the certificate label of the <code>Node</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.basic.SEQ.SEQ.print": {"fullname": "src.ast_nodes.basic.SEQ.SEQ.print", "modulename": "src.ast_nodes.basic.SEQ", "qualname": "SEQ.print", "kind": "function", "doc": "<p>Print the string representation of this <code>Conditional</code>.</p>\n\n<p>The node itself is aligned with <code>indent</code>, and its children are padded\nwith an additional left space.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>indent : int (optional, default = 0)\n    The number of left padding spaces to indent.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">indent</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"fullname": "src.ast_nodes.basic.SEQ.SEQ.generate_code", "modulename": "src.ast_nodes.basic.SEQ", "qualname": "SEQ.generate_code", "kind": "function", "doc": "<p>Generate the code associated with this <code>SEQ</code>.</p>\n\n<p>For this node specialization, return a list with the children's code,\ngenerated in the same order as they appear in the <code>children</code> attribute.\nThe <code>SEQ</code> node itself does not generate code, for it has no associated\n<code>instruction</code>.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>code_metadata : list of dict\n    Return a list of dictionaries containing code metadata: the related\n    <code>instruction</code> and <code>value</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">register</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]]]]</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"fullname": "src.ast_nodes.basic.SEQ.SEQ.certificate", "modulename": "src.ast_nodes.basic.SEQ", "qualname": "SEQ.certificate", "kind": "function", "doc": "<p>Compute the certificate of the current <code>SEQ</code>, and set this attribute.</p>\n\n<p>For <code>SEQ</code> nodes, certificate the child nodes in the same order as they\nappear in the <code>children</code> list. The <code>SEQ</code> node itself is not certified.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>positional_prime : int\n    A prime number that denotes the relative position of this node in\n    the source code.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>: int\n    The prime that comes immediately after <code>positional_prime</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">positional_prime</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.conditionals": {"fullname": "src.ast_nodes.conditionals", "modulename": "src.ast_nodes.conditionals", "kind": "module", "doc": "<p></p>\n"}, "src.ast_nodes.conditionals.DO": {"fullname": "src.ast_nodes.conditionals.DO", "modulename": "src.ast_nodes.conditionals.DO", "kind": "module", "doc": "<p>Representation of DO nodes for the Abstract Syntax Tree.</p>\n"}, "src.ast_nodes.conditionals.DO.DO": {"fullname": "src.ast_nodes.conditionals.DO.DO", "modulename": "src.ast_nodes.conditionals.DO", "qualname": "DO", "kind": "class", "doc": "<p>Implement the representation of a <code>DO</code> loop for the AST.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>parenthesis_expression : Node\n    The node representation of the expression to be evaluated.\nloop : Node\n    The node representation of code to run while the\n    <code>parenthesis_expression</code> evaluates to <code>True</code>.</p>\n", "bases": "src.ast_nodes.conditionals.conditional.Conditional"}, "src.ast_nodes.conditionals.DO.DO.__init__": {"fullname": "src.ast_nodes.conditionals.DO.DO.__init__", "modulename": "src.ast_nodes.conditionals.DO", "qualname": "DO.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">parenthesis_expression</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span>,</span><span class=\"param\">\t<span class=\"n\">loop</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span></span>)</span>"}, "src.ast_nodes.conditionals.DO.DO.get_certificate_label": {"fullname": "src.ast_nodes.conditionals.DO.DO.get_certificate_label", "modulename": "src.ast_nodes.conditionals.DO", "qualname": "DO.get_certificate_label", "kind": "function", "doc": "<p>Get the contents of <code>certificate_label</code>.</p>\n\n<p>For <code>WHILE</code> nodes, first obtain the <code>certificate_label</code> from the\n<code>parenthesis_expression</code> and loop (<code>statement_if_true</code>) subtrees,\nrecursively, and then from the <code>WHILE</code> node itself.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>: list of str\n    A list containing the certificate label of the <code>Node</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"fullname": "src.ast_nodes.conditionals.DO.DO.generate_code", "modulename": "src.ast_nodes.conditionals.DO", "qualname": "DO.generate_code", "kind": "function", "doc": "<p>Generate the code associated with this <code>DO</code>.</p>\n\n<p>For this node specialization, generate code from the <code>loop</code> first,\nthen from the <code>parenthesis_expression</code>, and add a conditional jump\nto the beginning of the loop for it to run again, if the\n<code>parenthesis_expression</code> evaluates to <code>True</code>.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>register : int\n    The number of the register to be used by the code generated by this\n    Node.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>register : int\n    The number of the next register available.\ndo_code : list of dict\n    Return a list of dictionaries containing code metadata: the related\n    <code>instruction</code> and <code>value</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">register</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]]]</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.conditionals.DO.DO.certificate": {"fullname": "src.ast_nodes.conditionals.DO.DO.certificate", "modulename": "src.ast_nodes.conditionals.DO", "qualname": "DO.certificate", "kind": "function", "doc": "<p>Compute the certificate of the current <code>DO</code>, and set this attribute.</p>\n\n<p>For <code>DO</code> nodes, certificate the <code>parenthesis_expression</code> and <code>loop</code>\nsubtrees first, recursively, and then the <code>DO</code> node itself.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>positional_prime : int\n    A prime number that denotes the relative position of this node in\n    the source code.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>: int\n    The prime that comes immediately after <code>positional_prime</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">positional_prime</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.conditionals.IF": {"fullname": "src.ast_nodes.conditionals.IF", "modulename": "src.ast_nodes.conditionals.IF", "kind": "module", "doc": "<p>Representation of IF nodes for the Abstract Syntax Tree.</p>\n"}, "src.ast_nodes.conditionals.IF.IF": {"fullname": "src.ast_nodes.conditionals.IF.IF", "modulename": "src.ast_nodes.conditionals.IF", "qualname": "IF", "kind": "class", "doc": "<p>Implement the representation of a conditional for the AST.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>parenthesis_expression : Node\n    The node representation of the expression to be evaluated.\nstatement_if_true : Node\n    The node representation of code to run if the <code>parenthesis_expression</code>\n    evaluates to <code>True</code>.</p>\n", "bases": "src.ast_nodes.conditionals.conditional.Conditional"}, "src.ast_nodes.conditionals.IF.IF.__init__": {"fullname": "src.ast_nodes.conditionals.IF.IF.__init__", "modulename": "src.ast_nodes.conditionals.IF", "qualname": "IF.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">parenthesis_expression</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span>,</span><span class=\"param\">\t<span class=\"n\">statement_if_true</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span></span>)</span>"}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"fullname": "src.ast_nodes.conditionals.IF.IF.generate_code", "modulename": "src.ast_nodes.conditionals.IF", "qualname": "IF.generate_code", "kind": "function", "doc": "<p>Generate the code associated with this <code>IF</code>.</p>\n\n<p>For this node specialization, generate code from the\n<code>parenthesis_expression</code> first, add a conditional jump to the last\ninstruction of the <code>statement_if_true</code> subtree -- i.e., to jump to if\nthe <code>parenthesis_expression</code> evaluates to <code>False</code>; in other words, to\nskip the conditional code -- and then from the <code>statement_if_true</code>.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>register : int\n    The number of the register to be used by the code generated by this\n    Node.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>register : int\n    The number of the next register available.\nif_code : list of dict\n    Return a list of dictionaries containing code metadata: the related\n    <code>instruction</code>and <code>value</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">register</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]]]</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.conditionals.IFELSE": {"fullname": "src.ast_nodes.conditionals.IFELSE", "modulename": "src.ast_nodes.conditionals.IFELSE", "kind": "module", "doc": "<p>Representation of IFELSE nodes for the Abstract Syntax Tree.</p>\n"}, "src.ast_nodes.conditionals.IFELSE.IFELSE": {"fullname": "src.ast_nodes.conditionals.IFELSE.IFELSE", "modulename": "src.ast_nodes.conditionals.IFELSE", "qualname": "IFELSE", "kind": "class", "doc": "<p>Implement the representation of a conditional for the AST.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>parenthesis_expression : Node\n    The node representation of the expression to be evaluated.\nstatement_if_true : Node\n    The node representation of code to run if the <code>parenthesis_expression</code>\n    evaluates to <code>True</code>.\nstatement_if_false : Node\n    The node representation of code to run if the <code>parenthesis_expression</code>\n    evaluates to <code>False</code>.</p>\n", "bases": "src.ast_nodes.conditionals.conditional.Conditional"}, "src.ast_nodes.conditionals.IFELSE.IFELSE.__init__": {"fullname": "src.ast_nodes.conditionals.IFELSE.IFELSE.__init__", "modulename": "src.ast_nodes.conditionals.IFELSE", "qualname": "IFELSE.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">parenthesis_expression</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span>,</span><span class=\"param\">\t<span class=\"n\">statement_if_true</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span>,</span><span class=\"param\">\t<span class=\"n\">statement_if_false</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span></span>)</span>"}, "src.ast_nodes.conditionals.IFELSE.IFELSE.statement_if_false": {"fullname": "src.ast_nodes.conditionals.IFELSE.IFELSE.statement_if_false", "modulename": "src.ast_nodes.conditionals.IFELSE", "qualname": "IFELSE.statement_if_false", "kind": "variable", "doc": "<p></p>\n", "annotation": ": src.ast_nodes.node.Node"}, "src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label": {"fullname": "src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label", "modulename": "src.ast_nodes.conditionals.IFELSE", "qualname": "IFELSE.get_certificate_label", "kind": "function", "doc": "<p>Get the contents of <code>certificate_label</code>.</p>\n\n<p>For <code>IFELSE</code> nodes, first call the <code>Conditional.get_certificate_label</code>\nmethod, and compose it with the <code>certificate_label</code> obtained recursively\nfrom the <code>statement_if_false</code> subtree.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>: list of str\n    A list containing the certificate label of the <code>Node</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.conditionals.IFELSE.IFELSE.print": {"fullname": "src.ast_nodes.conditionals.IFELSE.IFELSE.print", "modulename": "src.ast_nodes.conditionals.IFELSE", "qualname": "IFELSE.print", "kind": "function", "doc": "<p>Print the string representation of this <code>Conditional</code>.</p>\n\n<p>The node itself is aligned with <code>indent</code>, and its children are padded\nwith an additional left space.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>indent : int (optional, default = 0)\n    The number of left padding spaces to indent.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">indent</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"fullname": "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code", "modulename": "src.ast_nodes.conditionals.IFELSE", "qualname": "IFELSE.generate_code", "kind": "function", "doc": "<p>Generate the code associated with this <code>IFELSE</code>.</p>\n\n<p>For this node specialization, generate code from the\n<code>parenthesis_expression</code> first, add a conditional jump to the first\ninstruction of the <code>statement_if_false</code> subtree -- i.e., to jump to if\nthe <code>parenthesis_expression</code> evaluates to <code>False</code> --, then generate\ncode from the <code>statement_if_true</code>, add an unconditional jump to the\nlast instruction of teh <code>statement_if_false</code> subtree, and then finally\ngenerate code from <code>statement_if_false</code>.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>register : int\n    The number of the register to be used by the code generated by this\n    Node.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>register : int\n    The number of the next register available.\nifelse_code : list of dict\n    Return a list of dictionaries containing code metadata: the related\n    <code>instruction</code>and <code>value</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">register</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]]]</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"fullname": "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate", "modulename": "src.ast_nodes.conditionals.IFELSE", "qualname": "IFELSE.certificate", "kind": "function", "doc": "<p>Compute the certificate of the current <code>IFELSE</code>, and set this attribute.</p>\n\n<p>For <code>IFELSE</code> nodes, certificate the <code>parenthesis_expression</code>,\nrecursively, and the <code>IFELSE</code> itself, and then the children\n<code>statement</code> nodes -- also recursively -- in order (i.e., the\n<code>statement_if_true</code> and then the <code>statement_if_false</code> subtrees).</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>positional_prime : int\n    A prime number that denotes the relative position of this node in\n    the source code.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>: int\n    The prime that comes immediately after <code>positional_prime</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">positional_prime</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.conditionals.WHILE": {"fullname": "src.ast_nodes.conditionals.WHILE", "modulename": "src.ast_nodes.conditionals.WHILE", "kind": "module", "doc": "<p>Representation of WHILE nodes for the Abstract Syntax Tree.</p>\n"}, "src.ast_nodes.conditionals.WHILE.WHILE": {"fullname": "src.ast_nodes.conditionals.WHILE.WHILE", "modulename": "src.ast_nodes.conditionals.WHILE", "qualname": "WHILE", "kind": "class", "doc": "<p>Implement the representation of a <code>WHILE</code> loop for the AST.</p>\n\n<p>This class simply is an interface for the <code>Conditional</code> class, renaming\nthe <code>statement_if_true</code> to <code>loop</code>.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>parenthesis_expression : Node\n    The node representation of the expression to be evaluated.\nloop : Node\n    The node representation of code to run while the\n    <code>parenthesis_expression</code> evaluates to <code>True</code>.</p>\n", "bases": "src.ast_nodes.conditionals.conditional.Conditional"}, "src.ast_nodes.conditionals.WHILE.WHILE.__init__": {"fullname": "src.ast_nodes.conditionals.WHILE.WHILE.__init__", "modulename": "src.ast_nodes.conditionals.WHILE", "qualname": "WHILE.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">parenthesis_expression</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span>,</span><span class=\"param\">\t<span class=\"n\">loop</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span></span>)</span>"}, "src.ast_nodes.conditionals.WHILE.WHILE.get_certificate_label": {"fullname": "src.ast_nodes.conditionals.WHILE.WHILE.get_certificate_label", "modulename": "src.ast_nodes.conditionals.WHILE", "qualname": "WHILE.get_certificate_label", "kind": "function", "doc": "<p>Get the contents of <code>certificate_label</code>.</p>\n\n<p>For <code>WHILE</code> nodes, first obtain the <code>certificate_label</code> from the\n<code>parenthesis_expression</code> and loop (<code>statement_if_true</code>) subtrees,\nrecursively, and then from the <code>WHILE</code> node itself.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>: list of str\n    A list containing the certificate label of the <code>Node</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"fullname": "src.ast_nodes.conditionals.WHILE.WHILE.generate_code", "modulename": "src.ast_nodes.conditionals.WHILE", "qualname": "WHILE.generate_code", "kind": "function", "doc": "<p>Generate the code associated with this <code>WHILE</code>.</p>\n\n<p>For this node specialization, generate code from the\n<code>parenthesis_expression</code> first, add a conditional jump to the last\ninstruction of the <code>loop</code> subtree -- i.e., to jump to if the\n<code>parenthesis_expression</code> evaluates to <code>False</code>; in other words, to\nskip the conditional code -- and then from the <code>loop</code>. After the <code>loop</code>\ninstructions, add an unconditional jump to the <code>parenthesis_expression</code>\nfor it to be reevaluated.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>register : int\n    The number of the register to be used by the code generated by this\n    Node.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>register : int\n    The number of the next register available.\nwhile_code : list of dict\n    Return a list of dictionaries containing code metadata: the related\n    <code>instruction</code>and <code>value</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">register</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]]]</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.conditionals.conditional": {"fullname": "src.ast_nodes.conditionals.conditional", "modulename": "src.ast_nodes.conditionals.conditional", "kind": "module", "doc": "<p>Representation of conditionals for the Abstract Syntax Tree.</p>\n"}, "src.ast_nodes.conditionals.conditional.Conditional": {"fullname": "src.ast_nodes.conditionals.conditional.Conditional", "modulename": "src.ast_nodes.conditionals.conditional", "qualname": "Conditional", "kind": "class", "doc": "<p>Implement the representation of conditionals for the AST.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>parenthesis_expression : Node\n    The node representation of the expression to be evaluated.\nstatement_if_true : Node\n    The node representation of code to run if the <code>parenthesis_expression</code>\n    evaluates to <code>True</code>.</p>\n", "bases": "src.ast_nodes.node.Node"}, "src.ast_nodes.conditionals.conditional.Conditional.__init__": {"fullname": "src.ast_nodes.conditionals.conditional.Conditional.__init__", "modulename": "src.ast_nodes.conditionals.conditional", "qualname": "Conditional.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">parenthesis_expression</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span>,</span><span class=\"param\">\t<span class=\"n\">statement_if_true</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span></span>)</span>"}, "src.ast_nodes.conditionals.conditional.Conditional.parenthesis_expression": {"fullname": "src.ast_nodes.conditionals.conditional.Conditional.parenthesis_expression", "modulename": "src.ast_nodes.conditionals.conditional", "qualname": "Conditional.parenthesis_expression", "kind": "variable", "doc": "<p></p>\n", "annotation": ": src.ast_nodes.node.Node"}, "src.ast_nodes.conditionals.conditional.Conditional.statement_if_true": {"fullname": "src.ast_nodes.conditionals.conditional.Conditional.statement_if_true", "modulename": "src.ast_nodes.conditionals.conditional", "qualname": "Conditional.statement_if_true", "kind": "variable", "doc": "<p></p>\n", "annotation": ": src.ast_nodes.node.Node"}, "src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label": {"fullname": "src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label", "modulename": "src.ast_nodes.conditionals.conditional", "qualname": "Conditional.get_certificate_label", "kind": "function", "doc": "<p>Get the contents of <code>certificate_label</code>.</p>\n\n<p>For <code>Conditional</code> nodes, obtain the certificates, recursively, from the\n<code>parenthesis_expression</code> subtree first, then from the <code>Conditional</code>\nnode itself, and, finally, from the <code>statement_if_true</code> subtree.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>: list of str\n    A list containing the certificate label of the <code>Node</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.conditionals.conditional.Conditional.print": {"fullname": "src.ast_nodes.conditionals.conditional.Conditional.print", "modulename": "src.ast_nodes.conditionals.conditional", "qualname": "Conditional.print", "kind": "function", "doc": "<p>Print the string representation of this <code>Conditional</code>.</p>\n\n<p>The node itself is aligned with <code>indent</code>, and its children are padded\nwith an additional left space.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>indent : int (optional, default = 0)\n    The number of left padding spaces to indent.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">indent</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"fullname": "src.ast_nodes.conditionals.conditional.Conditional.certificate", "modulename": "src.ast_nodes.conditionals.conditional", "qualname": "Conditional.certificate", "kind": "function", "doc": "<p>Compute the certificate of the current <code>Conditional</code>, and set this attribute.</p>\n\n<p>For <code>Conditional</code> nodes, certificate the <code>parenthesis_expression</code>,\nrecursively, and the <code>Conditional</code> itself, and then the children\n<code>statement</code> nodes -- also recursively.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>positional_prime : int\n    A prime number that denotes the relative position of this node in\n    the source code.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>: int\n    The prime that comes immediately after <code>positional_prime</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">positional_prime</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.functions": {"fullname": "src.ast_nodes.functions", "modulename": "src.ast_nodes.functions", "kind": "module", "doc": "<p></p>\n"}, "src.ast_nodes.functions.ARG": {"fullname": "src.ast_nodes.functions.ARG", "modulename": "src.ast_nodes.functions.ARG", "kind": "module", "doc": "<p>Representation of ARG nodes for the Abstract Syntax Tree.</p>\n"}, "src.ast_nodes.functions.ARG.ARG": {"fullname": "src.ast_nodes.functions.ARG.ARG", "modulename": "src.ast_nodes.functions.ARG", "qualname": "ARG", "kind": "class", "doc": "<p>Implement the representation of a function argument for the AST.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>argument_value : Union[CST, VAR]\n    The node representation of this argument.\nparameter_type : str\n    The type the parameter expects from the argument.</p>\n", "bases": "src.ast_nodes.node.Node"}, "src.ast_nodes.functions.ARG.ARG.__init__": {"fullname": "src.ast_nodes.functions.ARG.ARG.__init__", "modulename": "src.ast_nodes.functions.ARG", "qualname": "ARG.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">argument_value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">basic</span><span class=\"o\">.</span><span class=\"n\">CST</span><span class=\"o\">.</span><span class=\"n\">CST</span><span class=\"p\">,</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">variables</span><span class=\"o\">.</span><span class=\"n\">VAR</span><span class=\"o\">.</span><span class=\"n\">VAR</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">parameter_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, "src.ast_nodes.functions.ARG.ARG.argument_value": {"fullname": "src.ast_nodes.functions.ARG.ARG.argument_value", "modulename": "src.ast_nodes.functions.ARG", "qualname": "ARG.argument_value", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[src.ast_nodes.basic.CST.CST, src.ast_nodes.variables.VAR.VAR]"}, "src.ast_nodes.functions.ARG.ARG.parameter_type": {"fullname": "src.ast_nodes.functions.ARG.ARG.parameter_type", "modulename": "src.ast_nodes.functions.ARG", "qualname": "ARG.parameter_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "src.ast_nodes.functions.ARG.ARG.get_certificate_label": {"fullname": "src.ast_nodes.functions.ARG.ARG.get_certificate_label", "modulename": "src.ast_nodes.functions.ARG", "qualname": "ARG.get_certificate_label", "kind": "function", "doc": "<p>Get the contents of <code>certificate_label</code>.</p>\n\n<p>For <code>ARG</code> nodes, obtain the certificates, from the <code>argument_value</code> node\nfirst, and then from the <code>ARG</code> node itself.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>: list of str\n    A list containing the certificate label of the <code>Node</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.functions.ARG.ARG.print": {"fullname": "src.ast_nodes.functions.ARG.ARG.print", "modulename": "src.ast_nodes.functions.ARG", "qualname": "ARG.print", "kind": "function", "doc": "<p>Print the string representation of this <code>ARG</code>.</p>\n\n<p>The node itself is aligned with <code>indent</code>, and <code>argument_value</code> is padded\nwith an additional left space.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>indent : int (optional, default = 0)\n    The number of left padding spaces to indent.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">indent</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"fullname": "src.ast_nodes.functions.ARG.ARG.generate_code", "modulename": "src.ast_nodes.functions.ARG", "qualname": "ARG.generate_code", "kind": "function", "doc": "<p>Generate the code associated with this <code>ARG</code>.</p>\n\n<p>For this node specialization, generate code from the <code>argument_value</code>\nnode first, and then generate a <code>MOV</code> instruction to save the\n<code>argument_value</code> in the <code>arg</code> register.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>register : int\n    The number of the register to be used by the code generated by this\n    Node.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>register : int\n    The number of the next register available.\ncode_metadata : list of dict\n    Return a list of dictionaries containing code metadata: the related\n    <code>instruction</code>and <code>value</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">register</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]]]]</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.functions.ARG.ARG.certificate": {"fullname": "src.ast_nodes.functions.ARG.ARG.certificate", "modulename": "src.ast_nodes.functions.ARG", "qualname": "ARG.certificate", "kind": "function", "doc": "<p>Compute the certificate of the this <code>ARG</code>, and set this attribute.</p>\n\n<p>For <code>ARG</code> nodes, certificate the <code>argument_value</code> node first, and then\nthe <code>ARG</code> itself.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>positional_prime : int\n    A prime number that denotes the relative position of this node in\n    the source code.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>: int\n    The prime that comes immediately after <code>positional_prime</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">positional_prime</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.functions.FUNC_CALL": {"fullname": "src.ast_nodes.functions.FUNC_CALL", "modulename": "src.ast_nodes.functions.FUNC_CALL", "kind": "module", "doc": "<p>Representation of FUNC_CALL nodes for the Abstract Syntax Tree.</p>\n"}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL": {"fullname": "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL", "modulename": "src.ast_nodes.functions.FUNC_CALL", "qualname": "FUNC_CALL", "kind": "class", "doc": "<p>Implement the representation of a function call for the AST.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>function_call_metadata : dict\n    Dictionary of function call metadata exported by the Lexer.</p>\n", "bases": "src.ast_nodes.node.Node"}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.__init__": {"fullname": "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.__init__", "modulename": "src.ast_nodes.functions.FUNC_CALL", "qualname": "FUNC_CALL.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">function_call_metadata</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span>)</span>"}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.function_call_metadata": {"fullname": "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.function_call_metadata", "modulename": "src.ast_nodes.functions.FUNC_CALL", "qualname": "FUNC_CALL.function_call_metadata", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict"}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.arguments": {"fullname": "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.arguments", "modulename": "src.ast_nodes.functions.FUNC_CALL", "qualname": "FUNC_CALL.arguments", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[src.ast_nodes.functions.ARG.ARG]"}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.type": {"fullname": "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.type", "modulename": "src.ast_nodes.functions.FUNC_CALL", "qualname": "FUNC_CALL.type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.symbol": {"fullname": "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.symbol", "modulename": "src.ast_nodes.functions.FUNC_CALL", "qualname": "FUNC_CALL.symbol", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.get_certificate_label": {"fullname": "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.get_certificate_label", "modulename": "src.ast_nodes.functions.FUNC_CALL", "qualname": "FUNC_CALL.get_certificate_label", "kind": "function", "doc": "<p>Get the contents of <code>certificate_label</code>.</p>\n\n<p>For <code>FUNC_CALL</code> nodes, obtain the certificates, recursively, from each\n<code>argument</code> subtree first, and then from the <code>FUNC_CALL</code> node itself.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>: list of str\n    A list containing the certificate label of the <code>Node</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"fullname": "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print", "modulename": "src.ast_nodes.functions.FUNC_CALL", "qualname": "FUNC_CALL.print", "kind": "function", "doc": "<p>Print the string representation of this <code>FUNC_CALL</code>.</p>\n\n<p>The node itself is aligned with <code>indent</code>, and its children are padded\nwith an additional left space.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>indent : int (optional, default = 0)\n    The number of left padding spaces to indent.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">indent</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"fullname": "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code", "modulename": "src.ast_nodes.functions.FUNC_CALL", "qualname": "FUNC_CALL.generate_code", "kind": "function", "doc": "<p>Generate the code associated with this <code>FUNC_CALL</code>.</p>\n\n<p>For this node specialization, generate code from <code>argument</code> children\nnodes first, and then from the <code>FUNC_CALL</code> itself.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>register : int\n    The number of the register to be used by the code generated by this\n    Node.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>register : int\n    The number of the next register available.\ncode_metadata : list of dict\n    Return a list of dictionaries containing code metadata: the related\n    <code>instruction</code>and <code>value</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">register</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]]]]</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"fullname": "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate", "modulename": "src.ast_nodes.functions.FUNC_CALL", "qualname": "FUNC_CALL.certificate", "kind": "function", "doc": "<p>Compute the certificate of the current <code>FUNC_CALL</code>, and set this attribute.</p>\n\n<p>For <code>FUNC_CALL</code> nodes, certificate each <code>argument</code> child first, and\nthen the <code>FUNC_CALL</code> itself.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>positional_prime : int\n    A prime number that denotes the relative position of this node in\n    the source code.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>: int\n    The prime that comes immediately after <code>positional_prime</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">positional_prime</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.functions.FUNC_DEF": {"fullname": "src.ast_nodes.functions.FUNC_DEF", "modulename": "src.ast_nodes.functions.FUNC_DEF", "kind": "module", "doc": "<p>Representation of FUNC_DEF nodes for the Abstract Syntax Tree.</p>\n"}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"fullname": "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF", "modulename": "src.ast_nodes.functions.FUNC_DEF", "qualname": "FUNC_DEF", "kind": "class", "doc": "<p>Implement the representation of a <code>FUNC_DEF</code> node for the AST.</p>\n\n<p>A <code>FUNC_DEF</code> is an abstraction of a function definition: it tracks its\nreturn type, parameters (and its types), and statements.</p>\n\n<p>The node itself only has children to help structuring the function\ndefinition, but doesn't have any semantics itself, <code>instruction</code>, or has a\ncertificate.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>function_name : str\n    The name of the function.\nvariable_metadata : dict\n    Dictionary of variable metadata exported by the Lexer.</p>\n", "bases": "src.ast_nodes.node.Node"}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.__init__": {"fullname": "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.__init__", "modulename": "src.ast_nodes.functions.FUNC_DEF", "qualname": "FUNC_DEF.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">function_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">function_metadata</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">]]</span></span>)</span>"}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.parameters": {"fullname": "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.parameters", "modulename": "src.ast_nodes.functions.FUNC_DEF", "qualname": "FUNC_DEF.parameters", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[src.ast_nodes.functions.PARAM.PARAM]"}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.statements": {"fullname": "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.statements", "modulename": "src.ast_nodes.functions.FUNC_DEF", "qualname": "FUNC_DEF.statements", "kind": "variable", "doc": "<p></p>\n", "annotation": ": src.ast_nodes.basic.SEQ.SEQ"}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.set_statements": {"fullname": "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.set_statements", "modulename": "src.ast_nodes.functions.FUNC_DEF", "qualname": "FUNC_DEF.set_statements", "kind": "function", "doc": "<p>Set the <code>statements</code> attribute.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>statements : SEQ\n    The statements to be added to object. Must be a <code>SEQ</code> -- i.e., the\n    root of a subtree with the statements of this function.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">statements</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">basic</span><span class=\"o\">.</span><span class=\"n\">SEQ</span><span class=\"o\">.</span><span class=\"n\">SEQ</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"fullname": "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label", "modulename": "src.ast_nodes.functions.FUNC_DEF", "qualname": "FUNC_DEF.get_certificate_label", "kind": "function", "doc": "<p>Get the contents of <code>certificate_label</code>.</p>\n\n<p>For <code>FUNC_DEF</code> nodes, obtain the certificates, recursively, starting\nfrom the <code>statements</code> attribute (i.e., a <code>SEQ</code> node). The\n<code>FUNC_DEF</code> node itself does not have a certificate.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>certificate : list of str\n    A list containing the certificate label of this <code>FUNC_DEF</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"fullname": "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print", "modulename": "src.ast_nodes.functions.FUNC_DEF", "qualname": "FUNC_DEF.print", "kind": "function", "doc": "<p>Print the string representation of this <code>FUNC_DEF</code>.</p>\n\n<p>The node itself is aligned with <code>indent</code>, and its children are padded\nwith an additional left space.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>indent : int (optional, default = 0)\n    The number of left padding spaces to indent.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">indent</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"fullname": "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code", "modulename": "src.ast_nodes.functions.FUNC_DEF", "qualname": "FUNC_DEF.generate_code", "kind": "function", "doc": "<p>Generate the code for this <code>FUNC_DEF</code>.</p>\n\n<p>For this node specialization, generate the code from its <code>parameters</code>\nand <code>statements</code>, recursively. The <code>FUNC_DEF</code> node itself does not have\nan associated instruction, nor uses registers.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>register : int\n    The number of the register to be used by the code generated by this\n    Node.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>register : int\n    The number of the next register available.\ncode_metadata : list of dict\n    Return a list of dictionaries containing code metadata: the related\n    <code>instruction</code>and <code>value</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">register</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]]]</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"fullname": "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate", "modulename": "src.ast_nodes.functions.FUNC_DEF", "qualname": "FUNC_DEF.certificate", "kind": "function", "doc": "<p>Compute the certificate of this <code>FUNC_DEF</code>.</p>\n\n<p>To achieve this, certificate its <code>parameters</code> and <code>statements</code>,\nrecursively and in order. The <code>FUNC_DEF</code> node itself does not have a\ncertificate.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>positional_prime : int\n    A prime number that denotes the relative position of this node in\n    the source code.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>: int\n    The prime that comes immediately after <code>positional_prime</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">positional_prime</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_function_name": {"fullname": "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_function_name", "modulename": "src.ast_nodes.functions.FUNC_DEF", "qualname": "FUNC_DEF.get_function_name", "kind": "function", "doc": "<p>Get the name of this function.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>function_name : str\n    The name of the function.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.functions.PARAM": {"fullname": "src.ast_nodes.functions.PARAM", "modulename": "src.ast_nodes.functions.PARAM", "kind": "module", "doc": "<p>Representation of PARAM nodes for the Abstract Syntax Tree.</p>\n"}, "src.ast_nodes.functions.PARAM.PARAM": {"fullname": "src.ast_nodes.functions.PARAM.PARAM", "modulename": "src.ast_nodes.functions.PARAM", "qualname": "PARAM", "kind": "class", "doc": "<p>Implement the representation of a function parameter for the AST.</p>\n\n<p>This is pretty much the same as a VAR_DEF. It just has a different name to\nmake the AST easier to read, and generates a <code>STORE</code> instruction in order to\nsave received argument into the parameter's memory location.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>variable_metadata : dict\n    Dictionary of parameter metadata exported by the Lexer.</p>\n", "bases": "src.ast_nodes.variables.VAR_DEF.VAR_DEF"}, "src.ast_nodes.functions.PARAM.PARAM.__init__": {"fullname": "src.ast_nodes.functions.PARAM.PARAM.__init__", "modulename": "src.ast_nodes.functions.PARAM", "qualname": "PARAM.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">variable_metadata</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span>)</span>"}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"fullname": "src.ast_nodes.functions.PARAM.PARAM.generate_code", "modulename": "src.ast_nodes.functions.PARAM", "qualname": "PARAM.generate_code", "kind": "function", "doc": "<p>Generate the code associated with this <code>PARAM</code>.</p>\n\n<p>For this node specialization, generate an instruction to allocate memory\n(<code>ALLOC</code>) for this parameter, and an instruction <code>STORE</code> to save the\nreceived argument value into the parameter.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>register : int\n    The number of the register to be used by the code generated by this\n    Node.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>register : int\n    The number of the next register available.\ncode_metadata : list of dict\n    Return a list of dictionaries containing code metadata: the related\n    <code>instruction</code>and <code>value</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">register</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]]]</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.functions.RET_SYM": {"fullname": "src.ast_nodes.functions.RET_SYM", "modulename": "src.ast_nodes.functions.RET_SYM", "kind": "module", "doc": "<p>Representation of RET_SYM nodes for the Abstract Syntax Tree.</p>\n"}, "src.ast_nodes.functions.RET_SYM.RET_SYM": {"fullname": "src.ast_nodes.functions.RET_SYM.RET_SYM", "modulename": "src.ast_nodes.functions.RET_SYM", "qualname": "RET_SYM", "kind": "class", "doc": "<p>Implement the representation of a function return for the AST.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>function_call_metadata : dict\n    Dictionary of function call metadata exported by the Lexer.\ntype : str\n    The type of the function this <code>RET_SYM</code> belongs to.</p>\n", "bases": "src.ast_nodes.node.Node"}, "src.ast_nodes.functions.RET_SYM.RET_SYM.__init__": {"fullname": "src.ast_nodes.functions.RET_SYM.RET_SYM.__init__", "modulename": "src.ast_nodes.functions.RET_SYM", "qualname": "RET_SYM.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">returned_value</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span>, </span><span class=\"param\"><span class=\"nb\">type</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, "src.ast_nodes.functions.RET_SYM.RET_SYM.returned_value": {"fullname": "src.ast_nodes.functions.RET_SYM.RET_SYM.returned_value", "modulename": "src.ast_nodes.functions.RET_SYM", "qualname": "RET_SYM.returned_value", "kind": "variable", "doc": "<p></p>\n", "annotation": ": src.ast_nodes.node.Node"}, "src.ast_nodes.functions.RET_SYM.RET_SYM.type": {"fullname": "src.ast_nodes.functions.RET_SYM.RET_SYM.type", "modulename": "src.ast_nodes.functions.RET_SYM", "qualname": "RET_SYM.type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "src.ast_nodes.functions.RET_SYM.RET_SYM.get_certificate_label": {"fullname": "src.ast_nodes.functions.RET_SYM.RET_SYM.get_certificate_label", "modulename": "src.ast_nodes.functions.RET_SYM", "qualname": "RET_SYM.get_certificate_label", "kind": "function", "doc": "<p>Get the contents of <code>certificate_label</code>.</p>\n\n<p>For <code>RET_SYM</code> nodes, obtain the certificates, recursively, from the\n<code>returned_value</code> subtree first, and then from the <code>RET_SYM</code> node itself.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>: list of str\n    A list containing the certificate label of the <code>Node</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"fullname": "src.ast_nodes.functions.RET_SYM.RET_SYM.print", "modulename": "src.ast_nodes.functions.RET_SYM", "qualname": "RET_SYM.print", "kind": "function", "doc": "<p>Print the string representation of this <code>RET_SYM</code>.</p>\n\n<p>The node itself is aligned with <code>indent</code>, and the <code>returned_value</code> child\nis padded with an additional left space.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>indent : int (optional, default = 0)\n    The number of left padding spaces to indent.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">indent</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"fullname": "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code", "modulename": "src.ast_nodes.functions.RET_SYM", "qualname": "RET_SYM.generate_code", "kind": "function", "doc": "<p>Generate the code associated with this <code>RET_SYM</code>.</p>\n\n<p>For this node specialization, generate code from the <code>returned_value</code>\nchild node first, and then from the <code>RET_SYM</code> itself.</p>\n\n<p>Notice that, if <code>RET_SYM.type</code> is different from <code>returned_value.type</code>,\ntype cast instructions will be added to the generated code.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>register : int\n    The number of the register to be used by the code generated by this\n    Node.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>register : int\n    The number of the next register available.\ncode_metadata : list of dict\n    Return a list of dictionaries containing code metadata: the related\n    <code>instruction</code>and <code>value</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">register</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]]]]</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"fullname": "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate", "modulename": "src.ast_nodes.functions.RET_SYM", "qualname": "RET_SYM.certificate", "kind": "function", "doc": "<p>Compute the certificate of the current <code>RET_SYM</code>, and set this attribute.</p>\n\n<p>For <code>RET_SYM</code> nodes, certificate the child <code>returned_value</code> first, and\nthen the <code>RET_SYM</code> itself.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>positional_prime : int\n    A prime number that denotes the relative position of this node in\n    the source code.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>: int\n    The prime that comes immediately after <code>positional_prime</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">positional_prime</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.operations": {"fullname": "src.ast_nodes.operations", "modulename": "src.ast_nodes.operations", "kind": "module", "doc": "<p></p>\n"}, "src.ast_nodes.operations.ADD": {"fullname": "src.ast_nodes.operations.ADD", "modulename": "src.ast_nodes.operations.ADD", "kind": "module", "doc": "<p>Representation of ADD nodes for the Abstract Syntax Tree.</p>\n"}, "src.ast_nodes.operations.ADD.ADD": {"fullname": "src.ast_nodes.operations.ADD.ADD", "modulename": "src.ast_nodes.operations.ADD", "qualname": "ADD", "kind": "class", "doc": "<p>Implement the representation of an addition for the AST.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>lhs : Node\n    The Node representation of the left hand side of the addition.\nrhs : Node\n    The Node representation of the right hand side of the addition.</p>\n", "bases": "src.ast_nodes.operations.operation.Operation"}, "src.ast_nodes.operations.ADD.ADD.__init__": {"fullname": "src.ast_nodes.operations.ADD.ADD.__init__", "modulename": "src.ast_nodes.operations.ADD", "qualname": "ADD.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lhs</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span>, </span><span class=\"param\"><span class=\"n\">rhs</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "src.ast_nodes.operations.ADD.ADD.instruction": {"fullname": "src.ast_nodes.operations.ADD.ADD.instruction", "modulename": "src.ast_nodes.operations.ADD", "qualname": "ADD.instruction", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "src.ast_nodes.operations.AND": {"fullname": "src.ast_nodes.operations.AND", "modulename": "src.ast_nodes.operations.AND", "kind": "module", "doc": "<p>Representation of AND nodes for the Abstract Syntax Tree.</p>\n"}, "src.ast_nodes.operations.AND.AND": {"fullname": "src.ast_nodes.operations.AND.AND", "modulename": "src.ast_nodes.operations.AND", "qualname": "AND", "kind": "class", "doc": "<p>Implement the representation of a conjunction (logical and) for the AST.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>lhs : Node\n    The Node representation of the left hand side of the operation.\nrhs : Node\n    The Node representation of the right hand side of the operation.</p>\n", "bases": "src.ast_nodes.operations.operation.Operation"}, "src.ast_nodes.operations.AND.AND.__init__": {"fullname": "src.ast_nodes.operations.AND.AND.__init__", "modulename": "src.ast_nodes.operations.AND", "qualname": "AND.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lhs</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span>, </span><span class=\"param\"><span class=\"n\">rhs</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "src.ast_nodes.operations.AND.AND.instruction": {"fullname": "src.ast_nodes.operations.AND.AND.instruction", "modulename": "src.ast_nodes.operations.AND", "qualname": "AND.instruction", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "src.ast_nodes.operations.ASSIGN": {"fullname": "src.ast_nodes.operations.ASSIGN", "modulename": "src.ast_nodes.operations.ASSIGN", "kind": "module", "doc": "<p>Representation of ASSIGN nodes for the Abstract Syntax Tree.</p>\n"}, "src.ast_nodes.operations.ASSIGN.ASSIGN": {"fullname": "src.ast_nodes.operations.ASSIGN.ASSIGN", "modulename": "src.ast_nodes.operations.ASSIGN", "qualname": "ASSIGN", "kind": "class", "doc": "<p>Implement the representation of a attribution operation for the AST.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>lhs : Node\n    The node representation of the variable to attribute to.\nrhs : Node\n    The node representation of the expression to be attributed to <code>lhs</code>.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>TypeError\n    Raised if the <code>lhs</code> parameter is not a <code>VAR</code> or <code>ELEMENT_ACCESS</code> nodes.</p>\n", "bases": "src.ast_nodes.operations.operation.Operation"}, "src.ast_nodes.operations.ASSIGN.ASSIGN.__init__": {"fullname": "src.ast_nodes.operations.ASSIGN.ASSIGN.__init__", "modulename": "src.ast_nodes.operations.ASSIGN", "qualname": "ASSIGN.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lhs</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span>, </span><span class=\"param\"><span class=\"n\">rhs</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span></span>)</span>"}, "src.ast_nodes.operations.ASSIGN.ASSIGN.instruction": {"fullname": "src.ast_nodes.operations.ASSIGN.ASSIGN.instruction", "modulename": "src.ast_nodes.operations.ASSIGN", "qualname": "ASSIGN.instruction", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"fullname": "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code", "modulename": "src.ast_nodes.operations.ASSIGN", "qualname": "ASSIGN.generate_code", "kind": "function", "doc": "<p>Generate the code associated with this <code>ASSIGN</code> operation.</p>\n\n<p>For this node specialization, generate code from the left and right\nhand sides nodes first, and then from the node itself.</p>\n\n<p>The <code>ASSIGN</code> operation does not need a register for itself. Thus, after\ngenerating the code, we \"undo\" the \"register allocation\" and decrement\nthe <code>register</code> value to be returned.</p>\n\n<p>Not pretty. But works.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>register : int\n    The number of the register to be used by the code generated by this\n    Node.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>register : int\n    The number of the next register available.\ncode_metadata : list of dict\n    Return a list of dictionaries containing code metadata: the related\n    <code>instruction</code>and <code>value</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">register</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]]]]</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.operations.BITAND": {"fullname": "src.ast_nodes.operations.BITAND", "modulename": "src.ast_nodes.operations.BITAND", "kind": "module", "doc": "<p>Representation of BITAND nodes for the Abstract Syntax Tree.</p>\n"}, "src.ast_nodes.operations.BITAND.BITAND": {"fullname": "src.ast_nodes.operations.BITAND.BITAND", "modulename": "src.ast_nodes.operations.BITAND", "qualname": "BITAND", "kind": "class", "doc": "<p>Implement the representation of a bitwise and operation (&amp;) for the AST.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>lhs : Node\n    The Node representation of the left hand side of the operation.\nrhs : Node\n    The Node representation of the right hand side of the operation.</p>\n", "bases": "src.ast_nodes.operations.operation.Operation"}, "src.ast_nodes.operations.BITAND.BITAND.__init__": {"fullname": "src.ast_nodes.operations.BITAND.BITAND.__init__", "modulename": "src.ast_nodes.operations.BITAND", "qualname": "BITAND.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lhs</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span>, </span><span class=\"param\"><span class=\"n\">rhs</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "src.ast_nodes.operations.BITAND.BITAND.instruction": {"fullname": "src.ast_nodes.operations.BITAND.BITAND.instruction", "modulename": "src.ast_nodes.operations.BITAND", "qualname": "BITAND.instruction", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "src.ast_nodes.operations.BITOR": {"fullname": "src.ast_nodes.operations.BITOR", "modulename": "src.ast_nodes.operations.BITOR", "kind": "module", "doc": "<p>Representation of BITOR nodes for the Abstract Syntax Tree.</p>\n"}, "src.ast_nodes.operations.BITOR.BITOR": {"fullname": "src.ast_nodes.operations.BITOR.BITOR", "modulename": "src.ast_nodes.operations.BITOR", "qualname": "BITOR", "kind": "class", "doc": "<p>Implement the representation of a bitwise or operation (|) for the AST.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>lhs : Node\n    The Node representation of the left hand side of the operation.\nrhs : Node\n    The Node representation of the right hand side of the operation.</p>\n", "bases": "src.ast_nodes.operations.operation.Operation"}, "src.ast_nodes.operations.BITOR.BITOR.__init__": {"fullname": "src.ast_nodes.operations.BITOR.BITOR.__init__", "modulename": "src.ast_nodes.operations.BITOR", "qualname": "BITOR.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lhs</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span>, </span><span class=\"param\"><span class=\"n\">rhs</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "src.ast_nodes.operations.BITOR.BITOR.instruction": {"fullname": "src.ast_nodes.operations.BITOR.BITOR.instruction", "modulename": "src.ast_nodes.operations.BITOR", "qualname": "BITOR.instruction", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "src.ast_nodes.operations.DIFF": {"fullname": "src.ast_nodes.operations.DIFF", "modulename": "src.ast_nodes.operations.DIFF", "kind": "module", "doc": "<p>Representation of DIFF nodes for the Abstract Syntax Tree.</p>\n"}, "src.ast_nodes.operations.DIFF.DIFF": {"fullname": "src.ast_nodes.operations.DIFF.DIFF", "modulename": "src.ast_nodes.operations.DIFF", "qualname": "DIFF", "kind": "class", "doc": "<p>Implement the representation of a \"is not equal\" (!=) comparison for the AST.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>lhs : Node\n    The Node representation of the left hand side of the comparison.\nrhs : Node\n    The Node representation of the right hand side of the comparison.</p>\n", "bases": "src.ast_nodes.operations.operation.Operation"}, "src.ast_nodes.operations.DIFF.DIFF.__init__": {"fullname": "src.ast_nodes.operations.DIFF.DIFF.__init__", "modulename": "src.ast_nodes.operations.DIFF", "qualname": "DIFF.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lhs</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span>, </span><span class=\"param\"><span class=\"n\">rhs</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "src.ast_nodes.operations.DIFF.DIFF.instruction": {"fullname": "src.ast_nodes.operations.DIFF.DIFF.instruction", "modulename": "src.ast_nodes.operations.DIFF", "qualname": "DIFF.instruction", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "src.ast_nodes.operations.DIV": {"fullname": "src.ast_nodes.operations.DIV", "modulename": "src.ast_nodes.operations.DIV", "kind": "module", "doc": "<p>Representation of DIV nodes for the Abstract Syntax Tree.</p>\n"}, "src.ast_nodes.operations.DIV.DIV": {"fullname": "src.ast_nodes.operations.DIV.DIV", "modulename": "src.ast_nodes.operations.DIV", "qualname": "DIV", "kind": "class", "doc": "<p>Implement the representation of a division for the AST.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>lhs : Node\n    The Node representation of the left hand side of the division.\nrhs : Node\n    The Node representation of the right hand side of the division.</p>\n", "bases": "src.ast_nodes.operations.operation.Operation"}, "src.ast_nodes.operations.DIV.DIV.__init__": {"fullname": "src.ast_nodes.operations.DIV.DIV.__init__", "modulename": "src.ast_nodes.operations.DIV", "qualname": "DIV.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lhs</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span>, </span><span class=\"param\"><span class=\"n\">rhs</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "src.ast_nodes.operations.DIV.DIV.instruction": {"fullname": "src.ast_nodes.operations.DIV.DIV.instruction", "modulename": "src.ast_nodes.operations.DIV", "qualname": "DIV.instruction", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "src.ast_nodes.operations.EQUAL": {"fullname": "src.ast_nodes.operations.EQUAL", "modulename": "src.ast_nodes.operations.EQUAL", "kind": "module", "doc": "<p>Representation of EQUAL nodes for the Abstract Syntax Tree.</p>\n"}, "src.ast_nodes.operations.EQUAL.EQUAL": {"fullname": "src.ast_nodes.operations.EQUAL.EQUAL", "modulename": "src.ast_nodes.operations.EQUAL", "qualname": "EQUAL", "kind": "class", "doc": "<p>Implement the representation of a \"is equal\" (==) comparison for the AST.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>lhs : Node\n    The Node representation of the left hand side of the comparison.\nrhs : Node\n    The Node representation of the right hand side of the comparison.</p>\n", "bases": "src.ast_nodes.operations.operation.Operation"}, "src.ast_nodes.operations.EQUAL.EQUAL.__init__": {"fullname": "src.ast_nodes.operations.EQUAL.EQUAL.__init__", "modulename": "src.ast_nodes.operations.EQUAL", "qualname": "EQUAL.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lhs</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span>, </span><span class=\"param\"><span class=\"n\">rhs</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "src.ast_nodes.operations.EQUAL.EQUAL.instruction": {"fullname": "src.ast_nodes.operations.EQUAL.EQUAL.instruction", "modulename": "src.ast_nodes.operations.EQUAL", "qualname": "EQUAL.instruction", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "src.ast_nodes.operations.GREATER": {"fullname": "src.ast_nodes.operations.GREATER", "modulename": "src.ast_nodes.operations.GREATER", "kind": "module", "doc": "<p>Representation of GREATER nodes for the Abstract Syntax Tree.</p>\n"}, "src.ast_nodes.operations.GREATER.GREATER": {"fullname": "src.ast_nodes.operations.GREATER.GREATER", "modulename": "src.ast_nodes.operations.GREATER", "qualname": "GREATER", "kind": "class", "doc": "<p>Implement the representation of a \"greater than\" (&gt;) comparison for the AST.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>lhs : Node\n    The Node representation of the left hand side of the comparison.\nrhs : Node\n    The Node representation of the right hand side of the comparison.</p>\n", "bases": "src.ast_nodes.operations.operation.Operation"}, "src.ast_nodes.operations.GREATER.GREATER.__init__": {"fullname": "src.ast_nodes.operations.GREATER.GREATER.__init__", "modulename": "src.ast_nodes.operations.GREATER", "qualname": "GREATER.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lhs</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span>, </span><span class=\"param\"><span class=\"n\">rhs</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "src.ast_nodes.operations.GREATER.GREATER.instruction": {"fullname": "src.ast_nodes.operations.GREATER.GREATER.instruction", "modulename": "src.ast_nodes.operations.GREATER", "qualname": "GREATER.instruction", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "src.ast_nodes.operations.LESS": {"fullname": "src.ast_nodes.operations.LESS", "modulename": "src.ast_nodes.operations.LESS", "kind": "module", "doc": "<p>Representation of LESS nodes for the Abstract Syntax Tree.</p>\n"}, "src.ast_nodes.operations.LESS.LESS": {"fullname": "src.ast_nodes.operations.LESS.LESS", "modulename": "src.ast_nodes.operations.LESS", "qualname": "LESS", "kind": "class", "doc": "<p>Implement the representation of a \"less than\" (&lt;) comparison for the AST.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>lhs : Node\n    The Node representation of the left hand side of the comparison.\nrhs : Node\n    The Node representation of the right hand side of the comparison.</p>\n", "bases": "src.ast_nodes.operations.operation.Operation"}, "src.ast_nodes.operations.LESS.LESS.__init__": {"fullname": "src.ast_nodes.operations.LESS.LESS.__init__", "modulename": "src.ast_nodes.operations.LESS", "qualname": "LESS.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lhs</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span>, </span><span class=\"param\"><span class=\"n\">rhs</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "src.ast_nodes.operations.LESS.LESS.instruction": {"fullname": "src.ast_nodes.operations.LESS.LESS.instruction", "modulename": "src.ast_nodes.operations.LESS", "qualname": "LESS.instruction", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "src.ast_nodes.operations.LSHIFT": {"fullname": "src.ast_nodes.operations.LSHIFT", "modulename": "src.ast_nodes.operations.LSHIFT", "kind": "module", "doc": "<p>Representation of LSHIFT nodes for the Abstract Syntax Tree.</p>\n"}, "src.ast_nodes.operations.LSHIFT.LSHIFT": {"fullname": "src.ast_nodes.operations.LSHIFT.LSHIFT", "modulename": "src.ast_nodes.operations.LSHIFT", "qualname": "LSHIFT", "kind": "class", "doc": "<p>Implement the representation of a left shift operation (&lt;&lt;) for the AST.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>lhs : Node\n    The Node representation of the left hand side of the operation.\nrhs : Node\n    The Node representation of the right hand side of the operation.</p>\n", "bases": "src.ast_nodes.operations.operation.Operation"}, "src.ast_nodes.operations.LSHIFT.LSHIFT.__init__": {"fullname": "src.ast_nodes.operations.LSHIFT.LSHIFT.__init__", "modulename": "src.ast_nodes.operations.LSHIFT", "qualname": "LSHIFT.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lhs</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span>, </span><span class=\"param\"><span class=\"n\">rhs</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "src.ast_nodes.operations.LSHIFT.LSHIFT.instruction": {"fullname": "src.ast_nodes.operations.LSHIFT.LSHIFT.instruction", "modulename": "src.ast_nodes.operations.LSHIFT", "qualname": "LSHIFT.instruction", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "src.ast_nodes.operations.MOD": {"fullname": "src.ast_nodes.operations.MOD", "modulename": "src.ast_nodes.operations.MOD", "kind": "module", "doc": "<p>Representation of MOD nodes for the Abstract Syntax Tree.</p>\n"}, "src.ast_nodes.operations.MOD.MOD": {"fullname": "src.ast_nodes.operations.MOD.MOD", "modulename": "src.ast_nodes.operations.MOD", "qualname": "MOD", "kind": "class", "doc": "<p>Implement the representation of the module operation for the AST.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>lhs : Node\n    The Node representation of the left hand side of the operation.\nrhs : Node\n    The Node representation of the right hand side of the operation.</p>\n", "bases": "src.ast_nodes.operations.operation.Operation"}, "src.ast_nodes.operations.MOD.MOD.__init__": {"fullname": "src.ast_nodes.operations.MOD.MOD.__init__", "modulename": "src.ast_nodes.operations.MOD", "qualname": "MOD.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lhs</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span>, </span><span class=\"param\"><span class=\"n\">rhs</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "src.ast_nodes.operations.MOD.MOD.instruction": {"fullname": "src.ast_nodes.operations.MOD.MOD.instruction", "modulename": "src.ast_nodes.operations.MOD", "qualname": "MOD.instruction", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "src.ast_nodes.operations.MULT": {"fullname": "src.ast_nodes.operations.MULT", "modulename": "src.ast_nodes.operations.MULT", "kind": "module", "doc": "<p>Representation of MULT nodes for the Abstract Syntax Tree.</p>\n"}, "src.ast_nodes.operations.MULT.MULT": {"fullname": "src.ast_nodes.operations.MULT.MULT", "modulename": "src.ast_nodes.operations.MULT", "qualname": "MULT", "kind": "class", "doc": "<p>Implement the representation of a multiplication for the AST.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>lhs : Node\n    The Node representation of the left hand side of the multiplication.\nrhs : Node\n    The Node representation of the right hand side of the multiplication.</p>\n", "bases": "src.ast_nodes.operations.operation.Operation"}, "src.ast_nodes.operations.MULT.MULT.__init__": {"fullname": "src.ast_nodes.operations.MULT.MULT.__init__", "modulename": "src.ast_nodes.operations.MULT", "qualname": "MULT.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lhs</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span>, </span><span class=\"param\"><span class=\"n\">rhs</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "src.ast_nodes.operations.MULT.MULT.instruction": {"fullname": "src.ast_nodes.operations.MULT.MULT.instruction", "modulename": "src.ast_nodes.operations.MULT", "qualname": "MULT.instruction", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "src.ast_nodes.operations.NOT": {"fullname": "src.ast_nodes.operations.NOT", "modulename": "src.ast_nodes.operations.NOT", "kind": "module", "doc": "<p>Representation of NOT nodes for the Abstract Syntax Tree.</p>\n"}, "src.ast_nodes.operations.NOT.NOT": {"fullname": "src.ast_nodes.operations.NOT.NOT", "modulename": "src.ast_nodes.operations.NOT", "qualname": "NOT", "kind": "class", "doc": "<p>Implement the representation of a negation (logical not) for the AST.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>expression : Node\n    The Node representation of the term to be negated.</p>\n", "bases": "src.ast_nodes.node.Node"}, "src.ast_nodes.operations.NOT.NOT.__init__": {"fullname": "src.ast_nodes.operations.NOT.NOT.__init__", "modulename": "src.ast_nodes.operations.NOT", "qualname": "NOT.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">expression</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "src.ast_nodes.operations.NOT.NOT.expression": {"fullname": "src.ast_nodes.operations.NOT.NOT.expression", "modulename": "src.ast_nodes.operations.NOT", "qualname": "NOT.expression", "kind": "variable", "doc": "<p></p>\n", "annotation": ": src.ast_nodes.node.Node"}, "src.ast_nodes.operations.NOT.NOT.symbol": {"fullname": "src.ast_nodes.operations.NOT.NOT.symbol", "modulename": "src.ast_nodes.operations.NOT", "qualname": "NOT.symbol", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "src.ast_nodes.operations.NOT.NOT.instruction": {"fullname": "src.ast_nodes.operations.NOT.NOT.instruction", "modulename": "src.ast_nodes.operations.NOT", "qualname": "NOT.instruction", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "src.ast_nodes.operations.NOT.NOT.type": {"fullname": "src.ast_nodes.operations.NOT.NOT.type", "modulename": "src.ast_nodes.operations.NOT", "qualname": "NOT.type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "src.ast_nodes.operations.NOT.NOT.get_certificate_label": {"fullname": "src.ast_nodes.operations.NOT.NOT.get_certificate_label", "modulename": "src.ast_nodes.operations.NOT", "qualname": "NOT.get_certificate_label", "kind": "function", "doc": "<p>Get the contents of <code>certificate_label</code>.</p>\n\n<p>For <code>NOT</code> nodes, obtain the certificates, recursively, from the\n<code>expression</code> subtree first, and then from the <code>NOT</code> node itself.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>: list of str\n    A list containing the certificate label of the <code>NOT</code> node.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.operations.NOT.NOT.print": {"fullname": "src.ast_nodes.operations.NOT.NOT.print", "modulename": "src.ast_nodes.operations.NOT", "qualname": "NOT.print", "kind": "function", "doc": "<p>Print the string representation of this <code>NOT</code> node.</p>\n\n<p>The node itself is aligned with <code>indent</code>, and its children are padded\nwith an additional left space.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>indent : int (optional, default = 0)\n    The number of left padding spaces to indent.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">indent</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"fullname": "src.ast_nodes.operations.NOT.NOT.generate_code", "modulename": "src.ast_nodes.operations.NOT", "qualname": "NOT.generate_code", "kind": "function", "doc": "<p>Generate the code associated with this <code>Operation</code>.</p>\n\n<p>For this node specialization, generate code from the left and right\nhand sides nodes first, and then from the node itself.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>register : int\n    The number of the register to be used by the code generated by this\n    Node.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>register : int\n    The number of the next register available.\ncode_metadata : list of dict\n    Return a list of dictionaries containing code metadata: the related\n    <code>instruction</code>and <code>value</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">register</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]]]]</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.operations.OR": {"fullname": "src.ast_nodes.operations.OR", "modulename": "src.ast_nodes.operations.OR", "kind": "module", "doc": "<p>Representation of OR nodes for the Abstract Syntax Tree.</p>\n"}, "src.ast_nodes.operations.OR.OR": {"fullname": "src.ast_nodes.operations.OR.OR", "modulename": "src.ast_nodes.operations.OR", "qualname": "OR", "kind": "class", "doc": "<p>Implement the representation of a disjunction (logical or) for the AST.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>lhs : Node\n    The Node representation of the left hand side of the operation.\nrhs : Node\n    The Node representation of the right hand side of the operation.</p>\n", "bases": "src.ast_nodes.operations.operation.Operation"}, "src.ast_nodes.operations.OR.OR.__init__": {"fullname": "src.ast_nodes.operations.OR.OR.__init__", "modulename": "src.ast_nodes.operations.OR", "qualname": "OR.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lhs</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span>, </span><span class=\"param\"><span class=\"n\">rhs</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "src.ast_nodes.operations.OR.OR.instruction": {"fullname": "src.ast_nodes.operations.OR.OR.instruction", "modulename": "src.ast_nodes.operations.OR", "qualname": "OR.instruction", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "src.ast_nodes.operations.RSHIFT": {"fullname": "src.ast_nodes.operations.RSHIFT", "modulename": "src.ast_nodes.operations.RSHIFT", "kind": "module", "doc": "<p>Representation of RSHIFT nodes for the Abstract Syntax Tree.</p>\n"}, "src.ast_nodes.operations.RSHIFT.RSHIFT": {"fullname": "src.ast_nodes.operations.RSHIFT.RSHIFT", "modulename": "src.ast_nodes.operations.RSHIFT", "qualname": "RSHIFT", "kind": "class", "doc": "<p>Implement the representation of a right shift operation (&gt;&gt;) for the AST.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>lhs : Node\n    The Node representation of the left hand side of the operation.\nrhs : Node\n    The Node representation of the right hand side of the operation.</p>\n", "bases": "src.ast_nodes.operations.operation.Operation"}, "src.ast_nodes.operations.RSHIFT.RSHIFT.__init__": {"fullname": "src.ast_nodes.operations.RSHIFT.RSHIFT.__init__", "modulename": "src.ast_nodes.operations.RSHIFT", "qualname": "RSHIFT.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lhs</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span>, </span><span class=\"param\"><span class=\"n\">rhs</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "src.ast_nodes.operations.RSHIFT.RSHIFT.instruction": {"fullname": "src.ast_nodes.operations.RSHIFT.RSHIFT.instruction", "modulename": "src.ast_nodes.operations.RSHIFT", "qualname": "RSHIFT.instruction", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "src.ast_nodes.operations.SUB": {"fullname": "src.ast_nodes.operations.SUB", "modulename": "src.ast_nodes.operations.SUB", "kind": "module", "doc": "<p>Representation of SUB nodes for the Abstract Syntax Tree.</p>\n"}, "src.ast_nodes.operations.SUB.SUB": {"fullname": "src.ast_nodes.operations.SUB.SUB", "modulename": "src.ast_nodes.operations.SUB", "qualname": "SUB", "kind": "class", "doc": "<p>Implement the representation of a subtraction for the AST.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>lhs : Node\n    The Node representation of the left hand side of the subtraction.\nrhs : Node\n    The Node representation of the right hand side of the subtraction.</p>\n", "bases": "src.ast_nodes.operations.operation.Operation"}, "src.ast_nodes.operations.SUB.SUB.__init__": {"fullname": "src.ast_nodes.operations.SUB.SUB.__init__", "modulename": "src.ast_nodes.operations.SUB", "qualname": "SUB.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lhs</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span>, </span><span class=\"param\"><span class=\"n\">rhs</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "src.ast_nodes.operations.SUB.SUB.instruction": {"fullname": "src.ast_nodes.operations.SUB.SUB.instruction", "modulename": "src.ast_nodes.operations.SUB", "qualname": "SUB.instruction", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "src.ast_nodes.operations.operation": {"fullname": "src.ast_nodes.operations.operation", "modulename": "src.ast_nodes.operations.operation", "kind": "module", "doc": "<p>Representation of operation nodes for the Abstract Syntax Tree.</p>\n"}, "src.ast_nodes.operations.operation.Operation": {"fullname": "src.ast_nodes.operations.operation.Operation", "modulename": "src.ast_nodes.operations.operation", "qualname": "Operation", "kind": "class", "doc": "<p>Implement the representation of an operation for the AST.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>lhs : Node\n    The Node representation of the left hand side of the operation.\nrhs : Node\n    The Node representation of the right hand side of the operation.\nsupports_float : bool (optional, default = True)\n    Whether the operation supports floating point numbers.</p>\n", "bases": "src.ast_nodes.node.Node"}, "src.ast_nodes.operations.operation.Operation.__init__": {"fullname": "src.ast_nodes.operations.operation.Operation.__init__", "modulename": "src.ast_nodes.operations.operation", "qualname": "Operation.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">lhs</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span>,</span><span class=\"param\">\t<span class=\"n\">rhs</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span>,</span><span class=\"param\">\t<span class=\"n\">supports_float</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"nb\">type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "src.ast_nodes.operations.operation.Operation.lhs": {"fullname": "src.ast_nodes.operations.operation.Operation.lhs", "modulename": "src.ast_nodes.operations.operation", "qualname": "Operation.lhs", "kind": "variable", "doc": "<p></p>\n", "annotation": ": src.ast_nodes.node.Node"}, "src.ast_nodes.operations.operation.Operation.rhs": {"fullname": "src.ast_nodes.operations.operation.Operation.rhs", "modulename": "src.ast_nodes.operations.operation", "qualname": "Operation.rhs", "kind": "variable", "doc": "<p></p>\n", "annotation": ": src.ast_nodes.node.Node"}, "src.ast_nodes.operations.operation.Operation.supports_float": {"fullname": "src.ast_nodes.operations.operation.Operation.supports_float", "modulename": "src.ast_nodes.operations.operation", "qualname": "Operation.supports_float", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, "src.ast_nodes.operations.operation.Operation.print": {"fullname": "src.ast_nodes.operations.operation.Operation.print", "modulename": "src.ast_nodes.operations.operation", "qualname": "Operation.print", "kind": "function", "doc": "<p>Print the string representation of this <code>Operation</code>.</p>\n\n<p>The node itself is aligned with <code>indent</code>, and its children are padded\nwith an additional left space.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>indent : int (optional, default = 0)\n    The number of left padding spaces to indent.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">indent</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.operations.operation.Operation.generate_code": {"fullname": "src.ast_nodes.operations.operation.Operation.generate_code", "modulename": "src.ast_nodes.operations.operation", "qualname": "Operation.generate_code", "kind": "function", "doc": "<p>Generate the code associated with this <code>Operation</code>.</p>\n\n<p>For this node specialization, generate code from the left and right\nhand sides nodes first, and then from the node itself.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>register : int\n    The number of the register to be used by the code generated by this\n    Node.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>register : int\n    The number of the next register available.\ncode_metadata : list of dict\n    Return a list of dictionaries containing code metadata: the related\n    <code>instruction</code>and <code>value</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">register</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]]]]</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.operations.operation.Operation.certificate": {"fullname": "src.ast_nodes.operations.operation.Operation.certificate", "modulename": "src.ast_nodes.operations.operation", "qualname": "Operation.certificate", "kind": "function", "doc": "<p>Compute the certificate of the current <code>Operation</code>, and set this attribute.</p>\n\n<p>For <code>Operation</code> nodes, certificate the <code>lhs</code> and <code>rhs</code> children first,\nand then the <code>Operation</code> itself.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>positional_prime : int\n    A prime number that denotes the relative position of this node in\n    the source code.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>: int\n    The prime that comes immediately after <code>positional_prime</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">positional_prime</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.variables": {"fullname": "src.ast_nodes.variables", "modulename": "src.ast_nodes.variables", "kind": "module", "doc": "<p></p>\n"}, "src.ast_nodes.variables.ELEMENT_ACCESS": {"fullname": "src.ast_nodes.variables.ELEMENT_ACCESS", "modulename": "src.ast_nodes.variables.ELEMENT_ACCESS", "kind": "module", "doc": "<p>Representation of ELEMENT_ACCESS nodes for the Abstract Syntax Tree.</p>\n"}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"fullname": "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS", "modulename": "src.ast_nodes.variables.ELEMENT_ACCESS", "qualname": "ELEMENT_ACCESS", "kind": "class", "doc": "<p>Implement the representation of an elemment access node for the AST.</p>\n\n<p>An element access is used within the context of arrays (indexes), and\nstructs (attributes).</p>\n\n<p>This Node typechecks, and raises a <code>TypeError</code> if <code>variable</code> does not have a\n<code>length</code> attribute -- i.e., is not an array or struct.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>variable : str\n    The variable whose element is being accessed.\nelement : int\n    The index of the element being accessed.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>TypeError\n    - Raised if <code>variable</code> is not an array or a struct.</p>\n", "bases": "src.ast_nodes.node.Node"}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.__init__": {"fullname": "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.__init__", "modulename": "src.ast_nodes.variables.ELEMENT_ACCESS", "qualname": "ELEMENT_ACCESS.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">variable</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">variables</span><span class=\"o\">.</span><span class=\"n\">VAR</span><span class=\"o\">.</span><span class=\"n\">VAR</span>,</span><span class=\"param\">\t<span class=\"n\">element</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">basic</span><span class=\"o\">.</span><span class=\"n\">CST</span><span class=\"o\">.</span><span class=\"n\">CST</span><span class=\"p\">,</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">variables</span><span class=\"o\">.</span><span class=\"n\">VAR</span><span class=\"o\">.</span><span class=\"n\">VAR</span><span class=\"p\">]</span></span>)</span>"}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.is_array": {"fullname": "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.is_array", "modulename": "src.ast_nodes.variables.ELEMENT_ACCESS", "qualname": "ELEMENT_ACCESS.is_array", "kind": "variable", "doc": "<p></p>\n"}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.is_struct": {"fullname": "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.is_struct", "modulename": "src.ast_nodes.variables.ELEMENT_ACCESS", "qualname": "ELEMENT_ACCESS.is_struct", "kind": "variable", "doc": "<p></p>\n"}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.variable": {"fullname": "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.variable", "modulename": "src.ast_nodes.variables.ELEMENT_ACCESS", "qualname": "ELEMENT_ACCESS.variable", "kind": "variable", "doc": "<p></p>\n", "annotation": ": src.ast_nodes.variables.VAR.VAR"}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.element": {"fullname": "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.element", "modulename": "src.ast_nodes.variables.ELEMENT_ACCESS", "qualname": "ELEMENT_ACCESS.element", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[src.ast_nodes.basic.CST.CST, src.ast_nodes.variables.VAR.VAR]"}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.type": {"fullname": "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.type", "modulename": "src.ast_nodes.variables.ELEMENT_ACCESS", "qualname": "ELEMENT_ACCESS.type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.access_type": {"fullname": "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.access_type", "modulename": "src.ast_nodes.variables.ELEMENT_ACCESS", "qualname": "ELEMENT_ACCESS.access_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.element_offset": {"fullname": "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.element_offset", "modulename": "src.ast_nodes.variables.ELEMENT_ACCESS", "qualname": "ELEMENT_ACCESS.element_offset", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict"}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"fullname": "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print", "modulename": "src.ast_nodes.variables.ELEMENT_ACCESS", "qualname": "ELEMENT_ACCESS.print", "kind": "function", "doc": "<p>Print the string representation of this <code>ELEMENT_ACCESS</code>.</p>\n\n<p>The node itself is aligned with <code>indent</code>, and its children (the\nvariable and the element index) are padded with an additional left\nspace.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>indent : int (optional, default = 0)\n    The number of left padding spaces to indent.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">indent</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"fullname": "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code", "modulename": "src.ast_nodes.variables.ELEMENT_ACCESS", "qualname": "ELEMENT_ACCESS.generate_code", "kind": "function", "doc": "<p>Generate the code associated with this <code>ELEMENT_ACCESS</code>.</p>\n\n<p>For this node specialization, generate code from <code>variable</code> and\n<code>element</code> children nodes first, respectively, and then from the\n<code>ELEMENT_ACCESS</code> itself.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>register : int\n    The number of the register to be used by the code generated by this\n    Node. This register will contain the element being accessed.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>register : int\n    The number of the next register available.\ncode_metadata : list of dict\n    Return a list of dictionaries containing code metadata: the related\n    <code>instruction</code>and <code>value</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">register</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]]]</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"fullname": "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate", "modulename": "src.ast_nodes.variables.ELEMENT_ACCESS", "qualname": "ELEMENT_ACCESS.certificate", "kind": "function", "doc": "<p>Compute the certificate of the current <code>ELEMENT_ACCESS</code>, and set this attribute.</p>\n\n<p>For <code>ELEMENT_ACCESS</code> nodes, the certificate is composed by the symbol\nassociated to the instruction being used (VALUE or ADDRESS) together\nwith the <code>prime</code> of the variable being accessed and a composition of\naccess type and offset.</p>\n\n<p>If statically accessed, the composition will be <code>2^(offset + 1)</code>. The +1\nis to avoid <code>0</code> exponents. This is the case for arrays indexed by a\nconstant, or access to struct attributes.</p>\n\n<p>If dynamically accessed, the composition will be <code>3^(prime of the\nindexing variable)</code>. This is the case for arrays indexed by a variable.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>positional_prime : int\n    A prime number that denotes the relative position of this node in\n    the source code.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>: int\n    The prime that comes immediately after <code>positional_prime</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">positional_prime</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.add_context": {"fullname": "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.add_context", "modulename": "src.ast_nodes.variables.ELEMENT_ACCESS", "qualname": "ELEMENT_ACCESS.add_context", "kind": "function", "doc": "<p>Add context to this <code>ELEMENT_ACCESS</code> node.</p>\n\n<p>The context indicates whether this variable is being readed or written.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>context : dict[str, str]\n    The context of this variable use.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.variables.STRUCT_DEF": {"fullname": "src.ast_nodes.variables.STRUCT_DEF", "modulename": "src.ast_nodes.variables.STRUCT_DEF", "kind": "module", "doc": "<p>Representation of STRUCT_DEF nodes for the Abstract Syntax Tree.</p>\n"}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF": {"fullname": "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF", "modulename": "src.ast_nodes.variables.STRUCT_DEF", "qualname": "STRUCT_DEF", "kind": "class", "doc": "<p>Implement the representation of a struct definition for the AST.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>struct_metadata : dict\n    Dictionary of struct metadata exported by the Lexer.</p>\n", "bases": "src.ast_nodes.node.Node"}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.__init__": {"fullname": "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.__init__", "modulename": "src.ast_nodes.variables.STRUCT_DEF", "qualname": "STRUCT_DEF.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">struct_metadata</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">]]</span></span>)</span>"}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.active": {"fullname": "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.active", "modulename": "src.ast_nodes.variables.STRUCT_DEF", "qualname": "STRUCT_DEF.active", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.struct_metadata": {"fullname": "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.struct_metadata", "modulename": "src.ast_nodes.variables.STRUCT_DEF", "qualname": "STRUCT_DEF.struct_metadata", "kind": "variable", "doc": "<p></p>\n"}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"fullname": "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print", "modulename": "src.ast_nodes.variables.STRUCT_DEF", "qualname": "STRUCT_DEF.print", "kind": "function", "doc": "<p>Print the string representation of this <code>STRUCT_DEF</code>.</p>\n\n<p>The node itself is aligned with <code>indent</code>, and the information about its\nattributes is padded with an additional left space.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>indent : int (optional, default = 0)\n    The number of left padding spaces to indent.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">indent</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"fullname": "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate", "modulename": "src.ast_nodes.variables.STRUCT_DEF", "qualname": "STRUCT_DEF.certificate", "kind": "function", "doc": "<p>Compute the certificate of this <code>STRUCT_DEF</code>.</p>\n\n<p>For <code>STRUCT_DEF</code> nodes, the certificate is simply the <code>symbol</code> set\nduring the object initialization.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>positional_prime : int\n    A prime number that denotes the relative position of this node in\n    the source code.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>: int\n    The very same received prime -- this node has no certificate itself.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">positional_prime</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"fullname": "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code", "modulename": "src.ast_nodes.variables.STRUCT_DEF", "qualname": "STRUCT_DEF.generate_code", "kind": "function", "doc": "<p>Generate the code associated with this <code>STRUCT_DEF</code>.</p>\n\n<p>For this node specialization, there is no code to be generated -- the\nstruct definition is just an abstraction. Still, it takes a <code>register</code>\nas parameter, but returns it without incrementing it.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>register : int\n    The number of the register to be used by the code generated by this\n    Node.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>register : int\n    The same given <code>register</code>.\ncode_metadata : list\n    An empty list.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">register</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]]]</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_symbol": {"fullname": "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_symbol", "modulename": "src.ast_nodes.variables.STRUCT_DEF", "qualname": "STRUCT_DEF.get_symbol", "kind": "function", "doc": "<p>Get the <code>symbol</code> attribute from this <code>STRUCT_DEF</code>.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>: str\n    The <code>symbol</code> attribute.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_attribute_types": {"fullname": "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_attribute_types", "modulename": "src.ast_nodes.variables.STRUCT_DEF", "qualname": "STRUCT_DEF.get_attribute_types", "kind": "function", "doc": "<p>Get the types of the attributes of this struct.</p>\n\n<p>The types are returned in the same order as they have been declared in\nthe struct definition.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>attribute_types : list[str]\n    A list containing the attributes types.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.is_active": {"fullname": "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.is_active", "modulename": "src.ast_nodes.variables.STRUCT_DEF", "qualname": "STRUCT_DEF.is_active", "kind": "function", "doc": "<p>Tell whether this struct definition is <code>active</code> or not.</p>\n\n<p>A struct is <code>active</code> if at least one variable of its type has been\ndefined in the source code.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>active : bool\n    Wheter the struct is active or not.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.variables.VAR": {"fullname": "src.ast_nodes.variables.VAR", "modulename": "src.ast_nodes.variables.VAR", "kind": "module", "doc": "<p>Representation of VAR nodes for the Abstract Syntax Tree.</p>\n"}, "src.ast_nodes.variables.VAR.VAR": {"fullname": "src.ast_nodes.variables.VAR.VAR", "modulename": "src.ast_nodes.variables.VAR", "qualname": "VAR", "kind": "class", "doc": "<p>Implement the representation of a variable for the AST.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>variable_metadata : dict[str, str]\n    A dictionary containing the unique ID generated when it was first\n    declared in the original source code, and its type.</p>\n", "bases": "src.ast_nodes.node.Node"}, "src.ast_nodes.variables.VAR.VAR.__init__": {"fullname": "src.ast_nodes.variables.VAR.VAR.__init__", "modulename": "src.ast_nodes.variables.VAR", "qualname": "VAR.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">variable_metadata</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span>)</span>"}, "src.ast_nodes.variables.VAR.VAR.variable_metadata": {"fullname": "src.ast_nodes.variables.VAR.VAR.variable_metadata", "modulename": "src.ast_nodes.variables.VAR", "qualname": "VAR.variable_metadata", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, str]"}, "src.ast_nodes.variables.VAR.VAR.id": {"fullname": "src.ast_nodes.variables.VAR.VAR.id", "modulename": "src.ast_nodes.variables.VAR", "qualname": "VAR.id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, "src.ast_nodes.variables.VAR.VAR.type": {"fullname": "src.ast_nodes.variables.VAR.VAR.type", "modulename": "src.ast_nodes.variables.VAR", "qualname": "VAR.type", "kind": "variable", "doc": "<p></p>\n"}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"fullname": "src.ast_nodes.variables.VAR.VAR.generate_code", "modulename": "src.ast_nodes.variables.VAR", "qualname": "VAR.generate_code", "kind": "function", "doc": "<p>Generate the code associated with this <code>VAR</code>.</p>\n\n<p>For this node specialization, the code metadata contains the instruction\n(i.e., whether the context requires the variable's value or address),\ntogether with the variable identifier (<code>self.value</code>).</p>\n\n<p>It also contains <code>offset_size</code> and <code>offset_register</code> fields: this is due\nto the design of the <code>ADDRESS</code> and <code>LOAD</code> instructions in the virtual\nmachine.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>register : int\n    The number of the register to be used by the code generated by this\n    Node.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>register : int\n    The number of the next register available.\ncode_metadata : list of dict\n    Return a dictionary of code metadata: the related <code>instruction</code> and\n    <code>value</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">register</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]]]</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.variables.VAR.VAR.get_metadata": {"fullname": "src.ast_nodes.variables.VAR.VAR.get_metadata", "modulename": "src.ast_nodes.variables.VAR", "qualname": "VAR.get_metadata", "kind": "function", "doc": "<p>Get the metadata of this <code>VAR</code>.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>: dict[str, str]\n    The variable metadata.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.variables.VAR.VAR.add_context": {"fullname": "src.ast_nodes.variables.VAR.VAR.add_context", "modulename": "src.ast_nodes.variables.VAR", "qualname": "VAR.add_context", "kind": "function", "doc": "<p>Add context to this <code>VAR</code> node.</p>\n\n<p>The context indicates whether this variable is being readed or written.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>context : dict[str, str]\n    The context of this variable use.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This method also changes the <code>symbol</code> attribute according to the\ninstruction being used.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.variables.VAR_DEF": {"fullname": "src.ast_nodes.variables.VAR_DEF", "modulename": "src.ast_nodes.variables.VAR_DEF", "kind": "module", "doc": "<p>Representation of VAR_DEF nodes for the Abstract Syntax Tree.</p>\n"}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF": {"fullname": "src.ast_nodes.variables.VAR_DEF.VAR_DEF", "modulename": "src.ast_nodes.variables.VAR_DEF", "qualname": "VAR_DEF", "kind": "class", "doc": "<p>Implement the representation of a variable definition for the AST.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>variable_metadata : dict\n    Dictionary of variable metadata exported by the Lexer.</p>\n", "bases": "src.ast_nodes.node.Node"}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.__init__": {"fullname": "src.ast_nodes.variables.VAR_DEF.VAR_DEF.__init__", "modulename": "src.ast_nodes.variables.VAR_DEF", "qualname": "VAR_DEF.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">variable_metadata</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span>)</span>"}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.variable_metadata": {"fullname": "src.ast_nodes.variables.VAR_DEF.VAR_DEF.variable_metadata", "modulename": "src.ast_nodes.variables.VAR_DEF", "qualname": "VAR_DEF.variable_metadata", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict"}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.instruction": {"fullname": "src.ast_nodes.variables.VAR_DEF.VAR_DEF.instruction", "modulename": "src.ast_nodes.variables.VAR_DEF", "qualname": "VAR_DEF.instruction", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.size": {"fullname": "src.ast_nodes.variables.VAR_DEF.VAR_DEF.size", "modulename": "src.ast_nodes.variables.VAR_DEF", "qualname": "VAR_DEF.size", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.symbol": {"fullname": "src.ast_nodes.variables.VAR_DEF.VAR_DEF.symbol", "modulename": "src.ast_nodes.variables.VAR_DEF", "qualname": "VAR_DEF.symbol", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"fullname": "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print", "modulename": "src.ast_nodes.variables.VAR_DEF", "qualname": "VAR_DEF.print", "kind": "function", "doc": "<p>Print the string representation of this <code>VAR_DEF</code>.</p>\n\n<p>The node itself is aligned with <code>indent</code>, and the information about its\nattributes is padded with an additional left space.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>indent : int (optional, default = 0)\n    The number of left padding spaces to indent.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">indent</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"fullname": "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code", "modulename": "src.ast_nodes.variables.VAR_DEF", "qualname": "VAR_DEF.generate_code", "kind": "function", "doc": "<p>Generate the code associated with this <code>VAR_DEF</code>.</p>\n\n<p>For this node specialization, the generated code is an <code>ALLOC</code>\ninstruction. The bytecode contains information about the type, and\nlength, if it is an array.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>register : int\n    The number of the register to be used by the code generated by this\n    Node.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>register : int\n    The number of the next register available.\ncode_metadata : list of dict\n    Return a list of dictionaries containing code metadata: the related\n    <code>instruction</code>and <code>value</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">register</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]]]</span>:</span></span>", "funcdef": "def"}, "src.certificators": {"fullname": "src.certificators", "modulename": "src.certificators", "kind": "module", "doc": "<p>Export classes to allow <code>from src.certificators import ...</code>.</p>\n"}, "src.certificators.abstract_certificator": {"fullname": "src.certificators.abstract_certificator", "modulename": "src.certificators.abstract_certificator", "kind": "module", "doc": "<p>Base class for Certificator classes (i.e., back and frontends).</p>\n"}, "src.certificators.abstract_certificator.AbstractCertificator": {"fullname": "src.certificators.abstract_certificator.AbstractCertificator", "modulename": "src.certificators.abstract_certificator", "qualname": "AbstractCertificator", "kind": "class", "doc": "<p>Base class for certificator classes.</p>\n"}, "src.certificators.abstract_certificator.AbstractCertificator.__init__": {"fullname": "src.certificators.abstract_certificator.AbstractCertificator.__init__", "modulename": "src.certificators.abstract_certificator", "qualname": "AbstractCertificator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "src.certificators.abstract_certificator.AbstractCertificator.computed_certificate": {"fullname": "src.certificators.abstract_certificator.AbstractCertificator.computed_certificate", "modulename": "src.certificators.abstract_certificator", "qualname": "AbstractCertificator.computed_certificate", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[str]"}, "src.certificators.abstract_certificator.AbstractCertificator.initial_prime": {"fullname": "src.certificators.abstract_certificator.AbstractCertificator.initial_prime", "modulename": "src.certificators.abstract_certificator", "qualname": "AbstractCertificator.initial_prime", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, "src.certificators.abstract_certificator.AbstractCertificator.certificate": {"fullname": "src.certificators.abstract_certificator.AbstractCertificator.certificate", "modulename": "src.certificators.abstract_certificator", "qualname": "AbstractCertificator.certificate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.certificators.abstract_certificator.AbstractCertificator.get_certificate": {"fullname": "src.certificators.abstract_certificator.AbstractCertificator.get_certificate", "modulename": "src.certificators.abstract_certificator", "qualname": "AbstractCertificator.get_certificate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.certificators.backend": {"fullname": "src.certificators.backend", "modulename": "src.certificators.backend", "kind": "module", "doc": "<p>Certificator for the frontend representation of Tiny C programs.</p>\n"}, "src.certificators.backend.BackendCertificator": {"fullname": "src.certificators.backend.BackendCertificator", "modulename": "src.certificators.backend", "qualname": "BackendCertificator", "kind": "class", "doc": "<p>Certificate the backend representation of some program.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>program : dict[str, dict]\n    A dictionary with bytecodes and struct metadata generated from some\n    Abstract Syntax Tree representation of a program.</p>\n", "bases": "src.certificators.abstract_certificator.AbstractCertificator"}, "src.certificators.backend.BackendCertificator.__init__": {"fullname": "src.certificators.backend.BackendCertificator.__init__", "modulename": "src.certificators.backend", "qualname": "BackendCertificator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">program</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">]</span></span>)</span>"}, "src.certificators.backend.BackendCertificator.program": {"fullname": "src.certificators.backend.BackendCertificator.program", "modulename": "src.certificators.backend", "qualname": "BackendCertificator.program", "kind": "variable", "doc": "<p></p>\n"}, "src.certificators.backend.BackendCertificator.bytecode_list": {"fullname": "src.certificators.backend.BackendCertificator.bytecode_list", "modulename": "src.certificators.backend", "qualname": "BackendCertificator.bytecode_list", "kind": "variable", "doc": "<p></p>\n"}, "src.certificators.backend.BackendCertificator.register_tracker": {"fullname": "src.certificators.backend.BackendCertificator.register_tracker", "modulename": "src.certificators.backend", "qualname": "BackendCertificator.register_tracker", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[int, dict]"}, "src.certificators.backend.BackendCertificator.variable_prime_tracker": {"fullname": "src.certificators.backend.BackendCertificator.variable_prime_tracker", "modulename": "src.certificators.backend", "qualname": "BackendCertificator.variable_prime_tracker", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[int, int]"}, "src.certificators.backend.BackendCertificator.current_positional_prime": {"fullname": "src.certificators.backend.BackendCertificator.current_positional_prime", "modulename": "src.certificators.backend", "qualname": "BackendCertificator.current_positional_prime", "kind": "variable", "doc": "<p></p>\n"}, "src.certificators.backend.BackendCertificator.current_variable_prime": {"fullname": "src.certificators.backend.BackendCertificator.current_variable_prime", "modulename": "src.certificators.backend", "qualname": "BackendCertificator.current_variable_prime", "kind": "variable", "doc": "<p></p>\n"}, "src.certificators.backend.BackendCertificator.functions_primes": {"fullname": "src.certificators.backend.BackendCertificator.functions_primes", "modulename": "src.certificators.backend", "qualname": "BackendCertificator.functions_primes", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[int, int]"}, "src.certificators.backend.BackendCertificator.instruction_status": {"fullname": "src.certificators.backend.BackendCertificator.instruction_status", "modulename": "src.certificators.backend", "qualname": "BackendCertificator.instruction_status", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[int, bool]"}, "src.certificators.backend.BackendCertificator.special_instructions_handlers": {"fullname": "src.certificators.backend.BackendCertificator.special_instructions_handlers", "modulename": "src.certificators.backend", "qualname": "BackendCertificator.special_instructions_handlers", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, dict]"}, "src.certificators.backend.BackendCertificator.grouped_instructions_handlers": {"fullname": "src.certificators.backend.BackendCertificator.grouped_instructions_handlers", "modulename": "src.certificators.backend", "qualname": "BackendCertificator.grouped_instructions_handlers", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, dict]"}, "src.certificators.backend.BackendCertificator.certificate": {"fullname": "src.certificators.backend.BackendCertificator.certificate", "modulename": "src.certificators.backend", "qualname": "BackendCertificator.certificate", "kind": "function", "doc": "<p>Certificate the backend code.</p>\n\n<p>This method iterates over the machine code and annotate each instruction\nwith its relative position and contents.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>computed_certificate : list[str]\n    The list of labels that compose the computed certificate.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.certificators.frontend": {"fullname": "src.certificators.frontend", "modulename": "src.certificators.frontend", "kind": "module", "doc": "<p>Certificator for the frontend representation of Tiny C programs.</p>\n"}, "src.certificators.frontend.FrontendCertificator": {"fullname": "src.certificators.frontend.FrontendCertificator", "modulename": "src.certificators.frontend", "qualname": "FrontendCertificator", "kind": "class", "doc": "<p>Certificate the frontend representation of some program.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>ast : AbstractSyntaxTree\n    The AST of the program to certificate.</p>\n", "bases": "src.certificators.abstract_certificator.AbstractCertificator"}, "src.certificators.frontend.FrontendCertificator.__init__": {"fullname": "src.certificators.frontend.FrontendCertificator.__init__", "modulename": "src.certificators.frontend", "qualname": "FrontendCertificator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ast</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">abstract_syntax_tree</span><span class=\"o\">.</span><span class=\"n\">AbstractSyntaxTree</span></span>)</span>"}, "src.certificators.frontend.FrontendCertificator.ast": {"fullname": "src.certificators.frontend.FrontendCertificator.ast", "modulename": "src.certificators.frontend", "qualname": "FrontendCertificator.ast", "kind": "variable", "doc": "<p></p>\n", "annotation": ": src.abstract_syntax_tree.AbstractSyntaxTree"}, "src.certificators.frontend.FrontendCertificator.initial_prime": {"fullname": "src.certificators.frontend.FrontendCertificator.initial_prime", "modulename": "src.certificators.frontend", "qualname": "FrontendCertificator.initial_prime", "kind": "variable", "doc": "<p></p>\n"}, "src.certificators.frontend.FrontendCertificator.certificate": {"fullname": "src.certificators.frontend.FrontendCertificator.certificate", "modulename": "src.certificators.frontend", "qualname": "FrontendCertificator.certificate", "kind": "function", "doc": "<p>Certificate the frontend code.</p>\n\n<p>This method traverses the AST and annotate each node with its relative\nposition and contents.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>computed_certificate : list[str]\n    The list of labels that compose the computed certificate.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.code_generator": {"fullname": "src.code_generator", "modulename": "src.code_generator", "kind": "module", "doc": "<p>Implement a code generator for the virtual machine.</p>\n"}, "src.code_generator.CodeGenerator": {"fullname": "src.code_generator.CodeGenerator", "modulename": "src.code_generator", "qualname": "CodeGenerator", "kind": "class", "doc": "<p>Code Generator that generates instructions for the virtual machine from\nAbstract Syntax Tree (AST) Nodes.</p>\n\n<p>This class also keeps track of the structs defined in the source code that\nhave been instantiated -- structs that have been defined, but not\ninstantiated, are ignored.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>root : PROG\n    The root of an Abstract Syntax Tree generated by the \n    <code>src.abstract_syntax_tree.AbstractSyntaxTree</code>. class</p>\n"}, "src.code_generator.CodeGenerator.__init__": {"fullname": "src.code_generator.CodeGenerator.__init__", "modulename": "src.code_generator", "qualname": "CodeGenerator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">root</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ast_nodes</span><span class=\"o\">.</span><span class=\"n\">basic</span><span class=\"o\">.</span><span class=\"n\">PROG</span><span class=\"o\">.</span><span class=\"n\">PROG</span></span>)</span>"}, "src.code_generator.CodeGenerator.root": {"fullname": "src.code_generator.CodeGenerator.root", "modulename": "src.code_generator", "qualname": "CodeGenerator.root", "kind": "variable", "doc": "<p></p>\n", "annotation": ": src.ast_nodes.basic.PROG.PROG"}, "src.code_generator.CodeGenerator.program": {"fullname": "src.code_generator.CodeGenerator.program", "modulename": "src.code_generator", "qualname": "CodeGenerator.program", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, typing.Union[list, dict]]"}, "src.code_generator.CodeGenerator.register": {"fullname": "src.code_generator.CodeGenerator.register", "modulename": "src.code_generator", "qualname": "CodeGenerator.register", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, "src.code_generator.CodeGenerator.print": {"fullname": "src.code_generator.CodeGenerator.print", "modulename": "src.code_generator", "qualname": "CodeGenerator.print", "kind": "function", "doc": "<p>Print this CodeGenerator object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.code_generator.CodeGenerator.generate_code": {"fullname": "src.code_generator.CodeGenerator.generate_code", "modulename": "src.code_generator", "qualname": "CodeGenerator.generate_code", "kind": "function", "doc": "<p>Generate code from a the root of an Abstract Syntax Tree.</p>\n\n<p>The generated program will also be stored in the <code>self.program</code>\nattribute. </p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>program : dict[str, dict]\n    A dictionary with bytecodes and struct metadata generated from some\n    Abstract Syntax Tree representation of a program.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.code_generator.CodeGenerator.parse_struct_definitions": {"fullname": "src.code_generator.CodeGenerator.parse_struct_definitions", "modulename": "src.code_generator", "qualname": "CodeGenerator.parse_struct_definitions", "kind": "function", "doc": "<p>Parse struct definitions and add it to the generated program.</p>\n\n<p>For structs, we only keep track of the types used by the struct, and\nthe the order they appear in.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.code_generator.CodeGenerator.parse_global_variables": {"fullname": "src.code_generator.CodeGenerator.parse_global_variables", "modulename": "src.code_generator", "qualname": "CodeGenerator.parse_global_variables", "kind": "function", "doc": "<p>Generate code for global variables and add it to the generated program.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.code_generator.CodeGenerator.parse_functions": {"fullname": "src.code_generator.CodeGenerator.parse_functions", "modulename": "src.code_generator", "qualname": "CodeGenerator.parse_functions", "kind": "function", "doc": "<p>Generate code for each function and add it to the generated program.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.code_generator.CodeGenerator.get_program": {"fullname": "src.code_generator.CodeGenerator.get_program", "modulename": "src.code_generator", "qualname": "CodeGenerator.get_program", "kind": "function", "doc": "<p>Get the generated program.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>program : dict[str, dict]\n    The generated program.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.lexer": {"fullname": "src.lexer", "modulename": "src.lexer", "kind": "module", "doc": "<p>Implement a lexer for the Tiny C compiler.</p>\n"}, "src.lexer.Lexer": {"fullname": "src.lexer.Lexer", "modulename": "src.lexer", "qualname": "Lexer", "kind": "class", "doc": "<p></p>\n"}, "src.lexer.Lexer.__init__": {"fullname": "src.lexer.Lexer.__init__", "modulename": "src.lexer", "qualname": "Lexer.__init__", "kind": "function", "doc": "<p>Initialize the Lexer object.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>source_code : str\n    The high-level, [C]haron source code.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">source_code</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, "src.lexer.Lexer.conditionals": {"fullname": "src.lexer.Lexer.conditionals", "modulename": "src.lexer", "qualname": "Lexer.conditionals", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, str]", "default_value": "{&#x27;do&#x27;: &#x27;DO_SYM&#x27;, &#x27;while&#x27;: &#x27;WHILE_SYM&#x27;, &#x27;if&#x27;: &#x27;IF_SYM&#x27;, &#x27;else&#x27;: &#x27;ELSE_SYM&#x27;}"}, "src.lexer.Lexer.symbols": {"fullname": "src.lexer.Lexer.symbols", "modulename": "src.lexer", "qualname": "Lexer.symbols", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, str]", "default_value": "{&#x27;{&#x27;: &#x27;LCBRA&#x27;, &#x27;}&#x27;: &#x27;RCBRA&#x27;, &#x27;[&#x27;: &#x27;LBRA&#x27;, &#x27;]&#x27;: &#x27;RBRA&#x27;, &#x27;(&#x27;: &#x27;LPAR&#x27;, &#x27;)&#x27;: &#x27;RPAR&#x27;, &#x27;;&#x27;: &#x27;SEMI&#x27;, &#x27;.&#x27;: &#x27;DOT&#x27;}"}, "src.lexer.Lexer.operators": {"fullname": "src.lexer.Lexer.operators", "modulename": "src.lexer", "qualname": "Lexer.operators", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, str]", "default_value": "{&#x27;=&#x27;: &#x27;ASSIGN&#x27;, &#x27;+&#x27;: &#x27;ADD&#x27;, &#x27;-&#x27;: &#x27;SUB&#x27;, &#x27;*&#x27;: &#x27;MULT&#x27;, &#x27;/&#x27;: &#x27;DIV&#x27;, &#x27;%&#x27;: &#x27;MOD&#x27;, &#x27;&lt;&#x27;: &#x27;LESS&#x27;, &#x27;&gt;&#x27;: &#x27;GREATER&#x27;, &#x27;&amp;&amp;&#x27;: &#x27;AND&#x27;, &#x27;||&#x27;: &#x27;OR&#x27;, &#x27;&lt;&lt;&#x27;: &#x27;LSHIFT&#x27;, &#x27;&gt;&gt;&#x27;: &#x27;RSHIFT&#x27;, &#x27;&amp;&#x27;: &#x27;BITAND&#x27;, &#x27;|&#x27;: &#x27;BITOR&#x27;, &#x27;==&#x27;: &#x27;EQUAL&#x27;, &#x27;!=&#x27;: &#x27;DIFF&#x27;, &#x27;!&#x27;: &#x27;NOT&#x27;}"}, "src.lexer.Lexer.types": {"fullname": "src.lexer.Lexer.types", "modulename": "src.lexer", "qualname": "Lexer.types", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, str]", "default_value": "{&#x27;short&#x27;: 2, &#x27;int&#x27;: 3, &#x27;float&#x27;: 5}"}, "src.lexer.Lexer.reserved_words": {"fullname": "src.lexer.Lexer.reserved_words", "modulename": "src.lexer", "qualname": "Lexer.reserved_words", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, str]", "default_value": "{&#x27;do&#x27;: &#x27;DO_SYM&#x27;, &#x27;while&#x27;: &#x27;WHILE_SYM&#x27;, &#x27;if&#x27;: &#x27;IF_SYM&#x27;, &#x27;else&#x27;: &#x27;ELSE_SYM&#x27;, &#x27;{&#x27;: &#x27;LCBRA&#x27;, &#x27;}&#x27;: &#x27;RCBRA&#x27;, &#x27;[&#x27;: &#x27;LBRA&#x27;, &#x27;]&#x27;: &#x27;RBRA&#x27;, &#x27;(&#x27;: &#x27;LPAR&#x27;, &#x27;)&#x27;: &#x27;RPAR&#x27;, &#x27;;&#x27;: &#x27;SEMI&#x27;, &#x27;.&#x27;: &#x27;DOT&#x27;, &#x27;=&#x27;: &#x27;ASSIGN&#x27;, &#x27;+&#x27;: &#x27;ADD&#x27;, &#x27;-&#x27;: &#x27;SUB&#x27;, &#x27;*&#x27;: &#x27;MULT&#x27;, &#x27;/&#x27;: &#x27;DIV&#x27;, &#x27;%&#x27;: &#x27;MOD&#x27;, &#x27;&lt;&#x27;: &#x27;LESS&#x27;, &#x27;&gt;&#x27;: &#x27;GREATER&#x27;, &#x27;&amp;&amp;&#x27;: &#x27;AND&#x27;, &#x27;||&#x27;: &#x27;OR&#x27;, &#x27;&lt;&lt;&#x27;: &#x27;LSHIFT&#x27;, &#x27;&gt;&gt;&#x27;: &#x27;RSHIFT&#x27;, &#x27;&amp;&#x27;: &#x27;BITAND&#x27;, &#x27;|&#x27;: &#x27;BITOR&#x27;, &#x27;==&#x27;: &#x27;EQUAL&#x27;, &#x27;!=&#x27;: &#x27;DIFF&#x27;, &#x27;!&#x27;: &#x27;NOT&#x27;, &#x27;struct&#x27;: &#x27;STRUCT_DEF&#x27;, &#x27;return&#x27;: &#x27;RET_SYM&#x27;, &#x27;short&#x27;: 2, &#x27;int&#x27;: 3, &#x27;float&#x27;: 5}"}, "src.lexer.Lexer.source_code": {"fullname": "src.lexer.Lexer.source_code", "modulename": "src.lexer", "qualname": "Lexer.source_code", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "src.lexer.Lexer.functions": {"fullname": "src.lexer.Lexer.functions", "modulename": "src.lexer", "qualname": "Lexer.functions", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, dict]"}, "src.lexer.Lexer.globals": {"fullname": "src.lexer.Lexer.globals", "modulename": "src.lexer", "qualname": "Lexer.globals", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, dict]"}, "src.lexer.Lexer.variable_count": {"fullname": "src.lexer.Lexer.variable_count", "modulename": "src.lexer", "qualname": "Lexer.variable_count", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, "src.lexer.Lexer.struct_prime": {"fullname": "src.lexer.Lexer.struct_prime", "modulename": "src.lexer", "qualname": "Lexer.struct_prime", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, "src.lexer.Lexer.variable_prime": {"fullname": "src.lexer.Lexer.variable_prime", "modulename": "src.lexer", "qualname": "Lexer.variable_prime", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, "src.lexer.Lexer.parse_source_code": {"fullname": "src.lexer.Lexer.parse_source_code", "modulename": "src.lexer", "qualname": "Lexer.parse_source_code", "kind": "function", "doc": "<p>Parse the scopes and functions from the given source code.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>parsed_source_code : dict\n    A dictionary containing the metadata of the global scope (\"globals\"\n    key), and the parsed code of each function (\"functions\" key).</p>\n\n<pre><code>The `globals` key contains a dictionary such as\n\n{\n    \"variables\": { \n        &lt;variable name&gt;: &lt;variable type&gt;,\n        ...\n    },\n    \"structs\": {\n        &lt;struct name&gt;: {\n            &lt;attribute name&gt;: &lt;attribute type&gt;,\n            ...\n        }\n    }\n}\n\nwhere each `scope_name` is either a function or \"globals\" (for the\ncase of the `global` scope). In this context, the `start` and `end`\nindices refer to the position of the tokenized source code where\nthe scope lies.\n\nThe `functions` key, on the other hand, contains\n\n{\n    &lt;function_name&gt;: {\n        \"type\": element of `types` or a `struct` from the global\n                scope,\n        \"parameters\": list of (attr_type, attr_name) tuples,\n        \"statements\": list of annotated statements found within\n                      the function.\n    },\n    ...\n}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.lexer.Lexer.split_source": {"fullname": "src.lexer.Lexer.split_source", "modulename": "src.lexer", "qualname": "Lexer.split_source", "kind": "function", "doc": "<p>Split the source code in individual words and symbols.</p>\n\n<p>This method is intended to handle reserved words, spaces, line breaks\nand other style-related issues.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>tokenized_source_code : list of str\n    A list of words and individual characters obtained from the source\n    code.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.runner": {"fullname": "src.runner", "modulename": "src.runner", "kind": "module", "doc": "<p>Generate a runner for Charon programs.</p>\n"}, "src.runner.Charon": {"fullname": "src.runner.Charon", "modulename": "src.runner", "qualname": "Charon", "kind": "class", "doc": "<p>This class represents an instance of a program in [C]haron.</p>\n\n<p>An instance is composed by the parsed source (i.e., the output from the\n<code>Lexer</code>), the Abstract Syntax Tree, a Virtual Machine, and the frontend and\nbackend certificators.</p>\n\n<p>The goal of this class is to centralize all of this generated metadata in a\nsingle object.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>parsed_source : dict[str, dict]\n    The source code after being tokenized and parsed by the Lexer.\nast : AbstractSyntaxTree\n    The Abstract Syntax Tree of this progrma.\nprogram : dict[str, dict]\n    The compiled program, to be executed by the Virtual Machine.\nvm : VirtualMachine\n    An instance of <code>VirtualMachine</code> loaded with the <code>program</code>.\nfrontend_certificator : FrontendCertificator\n    An instance of <code>FrontendCertificator</code> loaded with the <code>ast</code>.\nbackend_certificator : BackendCertificator\n    An instance of <code>BackendCertificator</code> loaded with the <code>program</code>.</p>\n"}, "src.runner.Charon.__init__": {"fullname": "src.runner.Charon.__init__", "modulename": "src.runner", "qualname": "Charon.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">parsed_source</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">ast</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">abstract_syntax_tree</span><span class=\"o\">.</span><span class=\"n\">AbstractSyntaxTree</span>,</span><span class=\"param\">\t<span class=\"n\">program</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">vm</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">virtual_machine</span><span class=\"o\">.</span><span class=\"n\">VirtualMachine</span>,</span><span class=\"param\">\t<span class=\"n\">frontend_certificator</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">certificators</span><span class=\"o\">.</span><span class=\"n\">frontend</span><span class=\"o\">.</span><span class=\"n\">FrontendCertificator</span>,</span><span class=\"param\">\t<span class=\"n\">backend_certificator</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">certificators</span><span class=\"o\">.</span><span class=\"n\">backend</span><span class=\"o\">.</span><span class=\"n\">BackendCertificator</span></span>)</span>"}, "src.runner.Charon.parsed_source": {"fullname": "src.runner.Charon.parsed_source", "modulename": "src.runner", "qualname": "Charon.parsed_source", "kind": "variable", "doc": "<p></p>\n"}, "src.runner.Charon.ast": {"fullname": "src.runner.Charon.ast", "modulename": "src.runner", "qualname": "Charon.ast", "kind": "variable", "doc": "<p></p>\n"}, "src.runner.Charon.program": {"fullname": "src.runner.Charon.program", "modulename": "src.runner", "qualname": "Charon.program", "kind": "variable", "doc": "<p></p>\n"}, "src.runner.Charon.vm": {"fullname": "src.runner.Charon.vm", "modulename": "src.runner", "qualname": "Charon.vm", "kind": "variable", "doc": "<p></p>\n"}, "src.runner.Charon.frontend_certificator": {"fullname": "src.runner.Charon.frontend_certificator", "modulename": "src.runner", "qualname": "Charon.frontend_certificator", "kind": "variable", "doc": "<p></p>\n"}, "src.runner.Charon.backend_certificator": {"fullname": "src.runner.Charon.backend_certificator", "modulename": "src.runner", "qualname": "Charon.backend_certificator", "kind": "variable", "doc": "<p></p>\n"}, "src.runner.Charon.get_parsed_source": {"fullname": "src.runner.Charon.get_parsed_source", "modulename": "src.runner", "qualname": "Charon.get_parsed_source", "kind": "function", "doc": "<p>Get the <code>parsed_source</code> attribute.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.runner.Charon.get_ast": {"fullname": "src.runner.Charon.get_ast", "modulename": "src.runner", "qualname": "Charon.get_ast", "kind": "function", "doc": "<p>Get the <code>ast</code> attribute.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">abstract_syntax_tree</span><span class=\"o\">.</span><span class=\"n\">AbstractSyntaxTree</span>:</span></span>", "funcdef": "def"}, "src.runner.Charon.get_program": {"fullname": "src.runner.Charon.get_program", "modulename": "src.runner", "qualname": "Charon.get_program", "kind": "function", "doc": "<p>Get the <code>program</code> attribute.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.runner.Charon.get_vm": {"fullname": "src.runner.Charon.get_vm", "modulename": "src.runner", "qualname": "Charon.get_vm", "kind": "function", "doc": "<p>Get the <code>vm</code> attribute.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">virtual_machine</span><span class=\"o\">.</span><span class=\"n\">VirtualMachine</span>:</span></span>", "funcdef": "def"}, "src.runner.Charon.get_frontend_certificator": {"fullname": "src.runner.Charon.get_frontend_certificator", "modulename": "src.runner", "qualname": "Charon.get_frontend_certificator", "kind": "function", "doc": "<p>Get the <code>frontend_certificator</code> attribute.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">certificators</span><span class=\"o\">.</span><span class=\"n\">frontend</span><span class=\"o\">.</span><span class=\"n\">FrontendCertificator</span>:</span></span>", "funcdef": "def"}, "src.runner.Charon.get_backend_certificator": {"fullname": "src.runner.Charon.get_backend_certificator", "modulename": "src.runner", "qualname": "Charon.get_backend_certificator", "kind": "function", "doc": "<p>Get the <code>backend_certificator</code> attribute.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">certificators</span><span class=\"o\">.</span><span class=\"n\">backend</span><span class=\"o\">.</span><span class=\"n\">BackendCertificator</span>:</span></span>", "funcdef": "def"}, "src.runner.create_instance": {"fullname": "src.runner.create_instance", "modulename": "src.runner", "qualname": "create_instance", "kind": "function", "doc": "<p>Create an instance that certificates and runs the input <code>source_code</code>.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>source_code : str\n    The source code to parse and load on the Virtual Machine.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>instance : Charon\n    An instance of this [C]haron program.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">source_code</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">runner</span><span class=\"o\">.</span><span class=\"n\">Charon</span>:</span></span>", "funcdef": "def"}, "src.utils": {"fullname": "src.utils", "modulename": "src.utils", "kind": "module", "doc": "<p>General purpose utilities.</p>\n"}, "src.utils.builtin_types": {"fullname": "src.utils.builtin_types", "modulename": "src.utils", "qualname": "builtin_types", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, int]", "default_value": "{&#x27;short&#x27;: 2, &#x27;int&#x27;: 4, &#x27;float&#x27;: 4}"}, "src.utils.is_prime": {"fullname": "src.utils.is_prime", "modulename": "src.utils", "qualname": "is_prime", "kind": "function", "doc": "<p>Check whether the given <code>number</code> is a prime.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>number : int\n    The number to test.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>: bool\n    The verdict.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "src.utils.next_prime": {"fullname": "src.utils.next_prime", "modulename": "src.utils", "qualname": "next_prime", "kind": "function", "doc": "<p>Compute the next prime immediately after <code>number</code>.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>number : int\n    The reference number.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>next_number : int\n    The first prime after <code>number</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "src.utils.previous_prime": {"fullname": "src.utils.previous_prime", "modulename": "src.utils", "qualname": "previous_prime", "kind": "function", "doc": "<p>Compute the prime immediately before <code>number</code>.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>number : int\n    The reference number.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>next_number : int\n    The first prime before <code>number</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "src.utils.primes_list": {"fullname": "src.utils.primes_list", "modulename": "src.utils", "qualname": "primes_list", "kind": "function", "doc": "<p>Compute a list of prime numbers with a given <code>length</code>.</p>\n\n<p>The list always starts at 2.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>length : int\n    The length of the list.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>primes : list[int]\n    A list of integers containing the specified amount of primes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">length</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.utils.type_cast": {"fullname": "src.utils.type_cast", "modulename": "src.utils", "qualname": "type_cast", "kind": "function", "doc": "<p>Compute a type cast instruction from <code>original_type</code> to <code>target_type</code>.</p>\n\n<p>Notice that casts from <code>short</code> to <code>float</code> (and vice-and-versa) are not\ndirect. First, we must cast to <code>int</code>, and then to the actual <code>target_type</code>.\nThus, the returned <code>code</code> list will contain two instructions.</p>\n\n<p>The other possible casts (<code>short</code> to <code>int</code>, <code>int</code> to <code>short</code>, <code>int</code> to\n<code>float</code>, and <code>float</code> to <code>int</code>) happen directly, and only generate a single\ninstruction. (<code>code</code>, in this case, is a list with a single item.)</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>original_type : str\n    The original type, to cast from.\ntarget_type : str\n    The target type, to cast to.\nregister : int\n    The register to be allocated to this instruction.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>register : int\n    The number of the next register available.\ncode : list[dict]\n    The code metadata of the <code>TYPECAST</code> instruction.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">original_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">target_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">register</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, "src.utils.get_variable_size": {"fullname": "src.utils.get_variable_size", "modulename": "src.utils", "qualname": "get_variable_size", "kind": "function", "doc": "<p>Get the size of a variable, in bytes, from its type.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>variable_metadata : dict\n    Dictionary of variable metadata exported by the Lexer.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>var_size : int\n    The size of the variable type, in bytes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">variable_metadata</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "src.utils.flatten_list": {"fullname": "src.utils.flatten_list", "modulename": "src.utils", "qualname": "flatten_list", "kind": "function", "doc": "<p>Flatten a list of lists into a single list.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>list_of_lists : list[list]\n    The list to be flattened.\ndrop_duplicates : bool (optional, default = True)\n    Whether or not duplicates should be removed from the final list.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>flattened_list : list\n    The flattened list.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">list_of_lists</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">drop_duplicates</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, "src.utils.NODE_TO_INSTRUCTION_MAPPING": {"fullname": "src.utils.NODE_TO_INSTRUCTION_MAPPING", "modulename": "src.utils", "qualname": "NODE_TO_INSTRUCTION_MAPPING", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;CST&#x27;: [&#x27;CONSTANT&#x27;], &#x27;VAR_DEF&#x27;: [&#x27;ALLOC&#x27;], &#x27;VAR_VALUE&#x27;: [&#x27;LOAD&#x27;], &#x27;VAR_ADDRESS&#x27;: [&#x27;ADDRESS&#x27;], &#x27;PARAM&#x27;: [&#x27;ALLOC&#x27;, &#x27;STORE&#x27;], &#x27;ARG&#x27;: [&#x27;MOV&#x27;], &#x27;FUNC_CALL&#x27;: [&#x27;JAL&#x27;, &#x27;MOV&#x27;], &#x27;RET_SYM&#x27;: [&#x27;MOV&#x27;, &#x27;JR&#x27;], &#x27;IF&#x27;: [&#x27;JZ&#x27;], &#x27;IFELSE&#x27;: [&#x27;JZ&#x27;], &#x27;WHILE&#x27;: [&#x27;JZ&#x27;], &#x27;DO&#x27;: [&#x27;NOT&#x27;, &#x27;JZ&#x27;], &#x27;ASSIGN&#x27;: [&#x27;STORE&#x27;], &#x27;NOT&#x27;: [&#x27;NOT&#x27;], &#x27;ADD&#x27;: [&#x27;ADD&#x27;, &#x27;FADD&#x27;], &#x27;SUB&#x27;: [&#x27;SUB&#x27;, &#x27;FSUB&#x27;], &#x27;MULT&#x27;: [&#x27;MULT&#x27;, &#x27;FMULT&#x27;], &#x27;DIV&#x27;: [&#x27;DIV&#x27;, &#x27;FDIV&#x27;], &#x27;MOD&#x27;: [&#x27;MOD&#x27;], &#x27;LESS&#x27;: [&#x27;LT&#x27;, &#x27;FLT&#x27;], &#x27;GREATER&#x27;: [&#x27;GT&#x27;, &#x27;FGT&#x27;], &#x27;EQUAL&#x27;: [&#x27;EQ&#x27;, &#x27;FEQ&#x27;], &#x27;DIFF&#x27;: [&#x27;NEQ&#x27;, &#x27;FNEQ&#x27;], &#x27;AND&#x27;: [&#x27;AND&#x27;, &#x27;FAND&#x27;], &#x27;OR&#x27;: [&#x27;OR&#x27;, &#x27;FOR&#x27;], &#x27;LSHIFT&#x27;: [&#x27;LSHIFT&#x27;], &#x27;RSHIFT&#x27;: [&#x27;RSHIFT&#x27;], &#x27;BITAND&#x27;: [&#x27;BITAND&#x27;], &#x27;BITOR&#x27;: [&#x27;BITOR&#x27;], &#x27;PROG&#x27;: [&#x27;HALT&#x27;]}"}, "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING": {"fullname": "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING", "modulename": "src.utils", "qualname": "INSTRUCTION_OPERATION_TO_NODE_MAPPING", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;STORE&#x27;: &#x27;ASSIGN&#x27;, &#x27;NOT&#x27;: &#x27;NOT&#x27;, &#x27;ADD&#x27;: &#x27;ADD&#x27;, &#x27;FADD&#x27;: &#x27;ADD&#x27;, &#x27;SUB&#x27;: &#x27;SUB&#x27;, &#x27;FSUB&#x27;: &#x27;SUB&#x27;, &#x27;MULT&#x27;: &#x27;MULT&#x27;, &#x27;FMULT&#x27;: &#x27;MULT&#x27;, &#x27;DIV&#x27;: &#x27;DIV&#x27;, &#x27;FDIV&#x27;: &#x27;DIV&#x27;, &#x27;MOD&#x27;: &#x27;MOD&#x27;, &#x27;LT&#x27;: &#x27;LESS&#x27;, &#x27;FLT&#x27;: &#x27;LESS&#x27;, &#x27;GT&#x27;: &#x27;GREATER&#x27;, &#x27;FGT&#x27;: &#x27;GREATER&#x27;, &#x27;EQ&#x27;: &#x27;EQUAL&#x27;, &#x27;FEQ&#x27;: &#x27;EQUAL&#x27;, &#x27;NEQ&#x27;: &#x27;DIFF&#x27;, &#x27;FNEQ&#x27;: &#x27;DIFF&#x27;, &#x27;AND&#x27;: &#x27;AND&#x27;, &#x27;FAND&#x27;: &#x27;AND&#x27;, &#x27;OR&#x27;: &#x27;OR&#x27;, &#x27;FOR&#x27;: &#x27;OR&#x27;, &#x27;LSHIFT&#x27;: &#x27;LSHIFT&#x27;, &#x27;RSHIFT&#x27;: &#x27;RSHIFT&#x27;, &#x27;BITAND&#x27;: &#x27;BITAND&#x27;, &#x27;BITOR&#x27;: &#x27;BITOR&#x27;}"}, "src.utils.INSTRUCTIONS_CATEGORIES": {"fullname": "src.utils.INSTRUCTIONS_CATEGORIES", "modulename": "src.utils", "qualname": "INSTRUCTIONS_CATEGORIES", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;constants&#x27;: [&#x27;CONSTANT&#x27;], &#x27;variables&#x27;: [&#x27;LOAD&#x27;, &#x27;ADDRESS&#x27;, &#x27;ALLOC&#x27;], &#x27;functions&#x27;: [&#x27;STORE&#x27;, &#x27;MOV&#x27;, &#x27;ALLOC&#x27;], &#x27;jumps&#x27;: [&#x27;JZ&#x27;, &#x27;JR&#x27;, &#x27;MOV&#x27;, &#x27;JAL&#x27;, &#x27;NOT&#x27;], &#x27;unops&#x27;: [&#x27;STORE&#x27;, &#x27;NOT&#x27;], &#x27;binops&#x27;: [&#x27;BITOR&#x27;, &#x27;MULT&#x27;, &#x27;LT&#x27;, &#x27;RSHIFT&#x27;, &#x27;LSHIFT&#x27;, &#x27;MOD&#x27;, &#x27;SUB&#x27;, &#x27;FADD&#x27;, &#x27;FAND&#x27;, &#x27;FEQ&#x27;, &#x27;AND&#x27;, &#x27;NEQ&#x27;, &#x27;OR&#x27;, &#x27;FGT&#x27;, &#x27;FSUB&#x27;, &#x27;ADD&#x27;, &#x27;DIV&#x27;, &#x27;EQ&#x27;, &#x27;FMULT&#x27;, &#x27;GT&#x27;, &#x27;FLT&#x27;, &#x27;BITAND&#x27;, &#x27;FOR&#x27;, &#x27;FDIV&#x27;, &#x27;FNEQ&#x27;], &#x27;misc&#x27;: [&#x27;HALT&#x27;], &#x27;type_casts&#x27;: [&#x27;FPTOSI&#x27;, &#x27;SIGNEXT&#x27;, &#x27;SITOFP&#x27;, &#x27;TRUNC&#x27;]}"}, "src.utils.SYMBOLS_MAP": {"fullname": "src.utils.SYMBOLS_MAP", "modulename": "src.utils", "qualname": "SYMBOLS_MAP", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;CST&#x27;: &#x27;2&#x27;, &#x27;VAR_DEF&#x27;: &#x27;3&#x27;, &#x27;VAR_VALUE&#x27;: &#x27;5&#x27;, &#x27;VAR_ADDRESS&#x27;: &#x27;7&#x27;, &#x27;PARAM&#x27;: &#x27;11&#x27;, &#x27;ARG&#x27;: &#x27;13&#x27;, &#x27;FUNC_CALL&#x27;: &#x27;17&#x27;, &#x27;RET_SYM&#x27;: &#x27;19&#x27;, &#x27;IF&#x27;: &#x27;23&#x27;, &#x27;IFELSE&#x27;: &#x27;29&#x27;, &#x27;WHILE&#x27;: &#x27;31&#x27;, &#x27;DO&#x27;: &#x27;37&#x27;, &#x27;ASSIGN&#x27;: &#x27;41&#x27;, &#x27;NOT&#x27;: &#x27;43&#x27;, &#x27;ADD&#x27;: &#x27;47&#x27;, &#x27;SUB&#x27;: &#x27;53&#x27;, &#x27;MULT&#x27;: &#x27;59&#x27;, &#x27;DIV&#x27;: &#x27;61&#x27;, &#x27;MOD&#x27;: &#x27;67&#x27;, &#x27;LESS&#x27;: &#x27;71&#x27;, &#x27;GREATER&#x27;: &#x27;73&#x27;, &#x27;EQUAL&#x27;: &#x27;79&#x27;, &#x27;DIFF&#x27;: &#x27;83&#x27;, &#x27;AND&#x27;: &#x27;89&#x27;, &#x27;OR&#x27;: &#x27;97&#x27;, &#x27;LSHIFT&#x27;: &#x27;101&#x27;, &#x27;RSHIFT&#x27;: &#x27;103&#x27;, &#x27;BITAND&#x27;: &#x27;107&#x27;, &#x27;BITOR&#x27;: &#x27;109&#x27;, &#x27;PROG&#x27;: &#x27;113&#x27;}"}, "src.utils.TYPE_SYMBOLS_MAP": {"fullname": "src.utils.TYPE_SYMBOLS_MAP", "modulename": "src.utils", "qualname": "TYPE_SYMBOLS_MAP", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;short&#x27;: {&#x27;type_symbol&#x27;: 2, &#x27;enforce&#x27;: &lt;class &#x27;int&#x27;&gt;}, &#x27;int&#x27;: {&#x27;type_symbol&#x27;: 3, &#x27;enforce&#x27;: &lt;class &#x27;int&#x27;&gt;}, &#x27;float&#x27;: {&#x27;type_symbol&#x27;: 5, &#x27;enforce&#x27;: &lt;class &#x27;float&#x27;&gt;}}"}, "src.utils.get_certificate_symbol": {"fullname": "src.utils.get_certificate_symbol", "modulename": "src.utils", "qualname": "get_certificate_symbol", "kind": "function", "doc": "<p>Get the certificate symbol associated with the given operation.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>operation : str or Node\n    The operation to get the certificate symbol of.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>: str\n    The associated certificate symbol.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">operation</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "src.virtual_machine": {"fullname": "src.virtual_machine", "modulename": "src.virtual_machine", "kind": "module", "doc": "<p>Implement a virtual machine that computes generated code.</p>\n"}, "src.virtual_machine.VirtualMachine": {"fullname": "src.virtual_machine.VirtualMachine", "modulename": "src.virtual_machine", "qualname": "VirtualMachine", "kind": "class", "doc": "<p>Virtual Machine that computes instructions from the <code>CodeGenerator</code>.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>program : dict[str, Union[list, dict]]\n    The program generated by the <code>CodeGenerator.generate_code</code> method.\nmemory_size : int, optional (default = 1024)\n    The memory size, in bytes, to use.</p>\n"}, "src.virtual_machine.VirtualMachine.__init__": {"fullname": "src.virtual_machine.VirtualMachine.__init__", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">program</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">memory_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1024</span></span>)</span>"}, "src.virtual_machine.VirtualMachine.program": {"fullname": "src.virtual_machine.VirtualMachine.program", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.program", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, typing.Union[list, dict]]"}, "src.virtual_machine.VirtualMachine.memory": {"fullname": "src.virtual_machine.VirtualMachine.memory", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.memory", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, typing.Union[int, float, str, NoneType]]"}, "src.virtual_machine.VirtualMachine.memory_size": {"fullname": "src.virtual_machine.VirtualMachine.memory_size", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.memory_size", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, "src.virtual_machine.VirtualMachine.memory_pointer": {"fullname": "src.virtual_machine.VirtualMachine.memory_pointer", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.memory_pointer", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, "src.virtual_machine.VirtualMachine.program_counter": {"fullname": "src.virtual_machine.VirtualMachine.program_counter", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.program_counter", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, "src.virtual_machine.VirtualMachine.registers": {"fullname": "src.virtual_machine.VirtualMachine.registers", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.registers", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[typing.Union[int, str], typing.Union[int, float]]"}, "src.virtual_machine.VirtualMachine.variables": {"fullname": "src.virtual_machine.VirtualMachine.variables", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.variables", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[int, str]"}, "src.virtual_machine.VirtualMachine.get_memory": {"fullname": "src.virtual_machine.VirtualMachine.get_memory", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.get_memory", "kind": "function", "doc": "<p>Get the <code>self.memory</code> dictionary.</p>\n\n<p>This method only returns valid memory addresses: i.e., addresses that\ndo not contain <code>None</code>.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>memory : dict[str, Union[int, float, str]]\n    The memory dictionary, filtered out of <code>None</code> elements.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "src.virtual_machine.VirtualMachine.print": {"fullname": "src.virtual_machine.VirtualMachine.print", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.print", "kind": "function", "doc": "<p>Print this VirtualMachine object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.virtual_machine.VirtualMachine.run": {"fullname": "src.virtual_machine.VirtualMachine.run", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.run", "kind": "function", "doc": "<p>Run the program on the virtual machine.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.virtual_machine.VirtualMachine.ADD": {"fullname": "src.virtual_machine.VirtualMachine.ADD", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.ADD", "kind": "function", "doc": "<p>Handle a <code>ADD</code> bytecode.</p>\n\n<p>This method handles the addition between two integers.</p>\n\n<p><code>short</code>-typed values will also use this method.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>instruction_params : dict[str, Union[int, float, str]]\n    The bytecode metadata.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">instruction_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.virtual_machine.VirtualMachine.ADDRESS": {"fullname": "src.virtual_machine.VirtualMachine.ADDRESS", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.ADDRESS", "kind": "function", "doc": "<p>Handle a <code>ADDRESS</code> bytecode.</p>\n\n<p>This method loads the address of a variable into a register.</p>\n\n<p>If an array or struct, it will load the address of the first element/\nattribute to the register.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>instruction_params : dict[str, Union[int, float, str]]\n    The bytecode metadata.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">instruction_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.virtual_machine.VirtualMachine.ALLOC": {"fullname": "src.virtual_machine.VirtualMachine.ALLOC", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.ALLOC", "kind": "function", "doc": "<p>Handle a <code>ALLOC</code> bytecode.</p>\n\n<p>This method allocates memory for a variable.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>instruction_params : dict[str, Union[int, float, str]]\n    The bytecode metadata.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>MemoryError\n    Raised if the memory is full when this method is called, or if the\n    available memory is not enough for the variable being allocated.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">instruction_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.virtual_machine.VirtualMachine.AND": {"fullname": "src.virtual_machine.VirtualMachine.AND", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.AND", "kind": "function", "doc": "<p>Handle a <code>AND</code> bytecode.</p>\n\n<p>This method handles the \"logical and\" operation between two integers.</p>\n\n<p><code>short</code>-typed values will also use this method.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>instruction_params : dict[str, Union[int, float, str]]\n    The bytecode metadata.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This method writes <code>1</code> in the target <code>register</code> if Python's evaluation\nof <code>lhs and rhs</code> results in anything different from <code>0</code>. This is due to\nthe fact that the language does not support boolean literals (<code>True</code> and\n<code>False</code>).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">instruction_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.virtual_machine.VirtualMachine.BITAND": {"fullname": "src.virtual_machine.VirtualMachine.BITAND", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.BITAND", "kind": "function", "doc": "<p>Handle a <code>BITAND</code> bytecode.</p>\n\n<p>This method handles the bit-wise \"and\" operation between two integers.</p>\n\n<p><code>short</code>-typed values will also use this method.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>instruction_params : dict[str, Union[int, float, str]]\n    The bytecode metadata.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">instruction_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.virtual_machine.VirtualMachine.BITOR": {"fullname": "src.virtual_machine.VirtualMachine.BITOR", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.BITOR", "kind": "function", "doc": "<p>Handle a <code>BITOR</code> bytecode.</p>\n\n<p>This method handles the bit-wise \"or\" operation between two integers.</p>\n\n<p><code>short</code>-typed values will also use this method.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>instruction_params : dict[str, Union[int, float, str]]\n    The bytecode metadata.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">instruction_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.virtual_machine.VirtualMachine.CONSTANT": {"fullname": "src.virtual_machine.VirtualMachine.CONSTANT", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.CONSTANT", "kind": "function", "doc": "<p>Handle a <code>CONSTANT</code> bytecode.</p>\n\n<p>This method saves the constant in some register.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>instruction_params : dict[str, Union[int, float, str]]\n    The bytecode metadata.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">instruction_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.virtual_machine.VirtualMachine.DIV": {"fullname": "src.virtual_machine.VirtualMachine.DIV", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.DIV", "kind": "function", "doc": "<p>Handle a <code>DIV</code> bytecode.</p>\n\n<p>This method handles the division between two integers.</p>\n\n<p><code>short</code>-typed values will also use this method.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>instruction_params : dict[str, Union[int, float, str]]\n    The bytecode metadata.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">instruction_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.virtual_machine.VirtualMachine.EQ": {"fullname": "src.virtual_machine.VirtualMachine.EQ", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.EQ", "kind": "function", "doc": "<p>Handle a <code>EQ</code> bytecode.</p>\n\n<p>This method handles the \"is equal\" comparison between two integers.</p>\n\n<p><code>short</code>-typed values will also use this method.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>instruction_params : dict[str, Union[int, float, str]]\n    The bytecode metadata.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This method writes <code>1</code> in the target <code>register</code> if the expression\nevaluates to <code>True</code>, and <code>0</code> other wise. This is due to the fact that\nthe language does not support boolean literals (<code>True</code> and <code>False</code>).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">instruction_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.virtual_machine.VirtualMachine.FADD": {"fullname": "src.virtual_machine.VirtualMachine.FADD", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.FADD", "kind": "function", "doc": "<p>Handle a <code>FADD</code> bytecode.</p>\n\n<p>This method handles the addition between two floating point numbers.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>instruction_params : dict[str, Union[int, float, str]]\n    The bytecode metadata.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">instruction_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.virtual_machine.VirtualMachine.FAND": {"fullname": "src.virtual_machine.VirtualMachine.FAND", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.FAND", "kind": "function", "doc": "<p>Handle a <code>FAND</code> bytecode.</p>\n\n<p>This method handles the \"logical and\" operation between two floating\npoint numbers.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>instruction_params : dict[str, Union[int, float, str]]\n    The bytecode metadata.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This method writes <code>1</code> in the target <code>register</code> if Python's evaluation\nof <code>lhs and rhs</code> results in anything different from <code>0</code>. This is due to\nthe fact that the language does not support boolean literals (<code>True</code> and\n<code>False</code>).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">instruction_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.virtual_machine.VirtualMachine.FDIV": {"fullname": "src.virtual_machine.VirtualMachine.FDIV", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.FDIV", "kind": "function", "doc": "<p>Handle a <code>FDIV</code> bytecode.</p>\n\n<p>This method handles the division between two floating point numbers.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>instruction_params : dict[str, Union[int, float, str]]\n    The bytecode metadata.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">instruction_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.virtual_machine.VirtualMachine.FEQ": {"fullname": "src.virtual_machine.VirtualMachine.FEQ", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.FEQ", "kind": "function", "doc": "<p>Handle a <code>FEQ</code> bytecode.</p>\n\n<p>This method handles the \"is equal\" comparison between two floating point\nnumbers.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>instruction_params : dict[str, Union[int, float, str]]\n    The bytecode metadata.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This method writes <code>1</code> in the target <code>register</code> if the expression\nevaluates to <code>True</code>, and <code>0</code> other wise. This is due to the fact that\nthe language does not support boolean literals (<code>True</code> and <code>False</code>).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">instruction_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.virtual_machine.VirtualMachine.FGT": {"fullname": "src.virtual_machine.VirtualMachine.FGT", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.FGT", "kind": "function", "doc": "<p>Handle a <code>FGT</code> bytecode.</p>\n\n<p>This method handles the \"greater than\" comparison between two floating\npoint numbers.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>instruction_params : dict[str, Union[int, float, str]]\n    The bytecode metadata.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This method writes <code>1</code> in the target <code>register</code> if the expression\nevaluates to <code>True</code>, and <code>0</code> other wise. This is due to the fact that\nthe language does not support boolean literals (<code>True</code> and <code>False</code>).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">instruction_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.virtual_machine.VirtualMachine.FLT": {"fullname": "src.virtual_machine.VirtualMachine.FLT", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.FLT", "kind": "function", "doc": "<p>Handle a <code>FLT</code> bytecode.</p>\n\n<p>This method handles the \"less than\" comparison between two floating\npoint numbers.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>instruction_params : dict[str, Union[int, float, str]]\n    The bytecode metadata.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This method writes <code>1</code> in the target <code>register</code> if the expression\nevaluates to <code>True</code>, and <code>0</code> other wise. This is due to the fact that\nthe language does not support boolean literals (<code>True</code> and <code>False</code>).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">instruction_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.virtual_machine.VirtualMachine.FMULT": {"fullname": "src.virtual_machine.VirtualMachine.FMULT", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.FMULT", "kind": "function", "doc": "<p>Handle a <code>FMULT</code> bytecode.</p>\n\n<p>This method handles the multiplication between two floating point\nnumbers.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>instruction_params : dict[str, Union[int, float, str]]\n    The bytecode metadata.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">instruction_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.virtual_machine.VirtualMachine.FNEQ": {"fullname": "src.virtual_machine.VirtualMachine.FNEQ", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.FNEQ", "kind": "function", "doc": "<p>Handle a <code>FNEQ</code> bytecode.</p>\n\n<p>This method handles the \"is not equal\" comparison between two floating\npoint numbers.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>instruction_params : dict[str, Union[int, float, str]]\n    The bytecode metadata.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This method writes <code>1</code> in the target <code>register</code> if the expression\nevaluates to <code>True</code>, and <code>0</code> other wise. This is due to the fact that\nthe language does not support boolean literals (<code>True</code> and <code>False</code>).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">instruction_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.virtual_machine.VirtualMachine.FOR": {"fullname": "src.virtual_machine.VirtualMachine.FOR", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.FOR", "kind": "function", "doc": "<p>Handle a <code>FOR</code> bytecode.</p>\n\n<p>This method handles the \"logical or\" operation between two floating\npoint numbers.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>instruction_params : dict[str, Union[int, float, str]]\n    The bytecode metadata.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This method writes <code>1</code> in the target <code>register</code> if Python's evaluation\nof <code>lhs or rhs</code> results in anything different from <code>0</code>. This is due to\nthe fact that the language does not support boolean literals (<code>True</code> and\n<code>False</code>).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">instruction_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.virtual_machine.VirtualMachine.FPTOSI": {"fullname": "src.virtual_machine.VirtualMachine.FPTOSI", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.FPTOSI", "kind": "function", "doc": "<p>Handle a <code>FPTOSI</code> bytecode.</p>\n\n<p>This method type casts a floating point to signed integer. For the sake\nof simplicity, we'll use Python's conversion.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>instruction_params : dict[str, Union[int, float, str]]\n    The bytecode metadata.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">instruction_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.virtual_machine.VirtualMachine.FSUB": {"fullname": "src.virtual_machine.VirtualMachine.FSUB", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.FSUB", "kind": "function", "doc": "<p>Handle a <code>FSUB</code> bytecode.</p>\n\n<p>This method handles the subtraction between two floating point numbers.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>instruction_params : dict[str, Union[int, float, str]]\n    The bytecode metadata.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">instruction_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.virtual_machine.VirtualMachine.GT": {"fullname": "src.virtual_machine.VirtualMachine.GT", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.GT", "kind": "function", "doc": "<p>Handle a <code>GT</code> bytecode.</p>\n\n<p>This method handles the \"greater than\" comparison between two integers.</p>\n\n<p><code>short</code>-typed values will also use this method.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>instruction_params : dict[str, Union[int, float, str]]\n    The bytecode metadata.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This method writes <code>1</code> in the target <code>register</code> if the expression\nevaluates to <code>True</code>, and <code>0</code> other wise. This is due to the fact that\nthe language does not support boolean literals (<code>True</code> and <code>False</code>).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">instruction_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.virtual_machine.VirtualMachine.HALT": {"fullname": "src.virtual_machine.VirtualMachine.HALT", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.HALT", "kind": "function", "doc": "<p>Handle a <code>HALT</code> bytecode.</p>\n\n<p>This method handles the end of the execution of a program. For this\ninstruction, the <code>instruction_params</code> is ignored.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">instruction_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.virtual_machine.VirtualMachine.JAL": {"fullname": "src.virtual_machine.VirtualMachine.JAL", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.JAL", "kind": "function", "doc": "<p>Handle a <code>JAL</code> bytecode.</p>\n\n<p>This method handles jump-and-link instructions.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>instruction_params : dict[str, Union[int, float, str]]\n    The bytecode metadata.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">instruction_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.virtual_machine.VirtualMachine.JR": {"fullname": "src.virtual_machine.VirtualMachine.JR", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.JR", "kind": "function", "doc": "<p>Handle a <code>JR</code> bytecode.</p>\n\n<p>This method jumps to an address stored in a register.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>instruction_params : dict[str, Union[int, float, str]]\n    The bytecode metadata.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">instruction_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.virtual_machine.VirtualMachine.JZ": {"fullname": "src.virtual_machine.VirtualMachine.JZ", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.JZ", "kind": "function", "doc": "<p>Handle a <code>JZ</code> bytecode.</p>\n\n<p>This method handles conditional jumps: if the evaluated value is zero,\njump some amount of instructions.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>instruction_params : dict[str, Union[int, float, str]]\n    The bytecode metadata.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">instruction_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.virtual_machine.VirtualMachine.LOAD": {"fullname": "src.virtual_machine.VirtualMachine.LOAD", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.LOAD", "kind": "function", "doc": "<p>Handle a <code>LOAD</code> bytecode.</p>\n\n<p>This method loads the value of a variable into a register.</p>\n\n<p>If an array or struct, it will load the value of the first element/\nattribute to the register -- which is not a problem at all, as\n<code>self.ELEMENT_ADDRESS</code> will handle this later.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>instruction_params : dict[str, Union[int, float, str]]\n    The bytecode metadata.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">instruction_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.virtual_machine.VirtualMachine.LSHIFT": {"fullname": "src.virtual_machine.VirtualMachine.LSHIFT", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.LSHIFT", "kind": "function", "doc": "<p>Handle a <code>LSHIFT</code> bytecode.</p>\n\n<p>This method handles the left bit-shift operation between two integers.</p>\n\n<p><code>short</code>-typed values will also use this method.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>instruction_params : dict[str, Union[int, float, str]]\n    The bytecode metadata.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">instruction_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.virtual_machine.VirtualMachine.LT": {"fullname": "src.virtual_machine.VirtualMachine.LT", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.LT", "kind": "function", "doc": "<p>Handle a <code>LT</code> bytecode.</p>\n\n<p>This method handles the \"less than\" comparison between two integers.</p>\n\n<p><code>short</code>-typed values will also use this method.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>instruction_params : dict[str, Union[int, float, str]]\n    The bytecode metadata.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This method writes <code>1</code> in the target <code>register</code> if the expression\nevaluates to <code>True</code>, and <code>0</code> other wise. This is due to the fact that\nthe language does not support boolean literals (<code>True</code> and <code>False</code>).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">instruction_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.virtual_machine.VirtualMachine.MOD": {"fullname": "src.virtual_machine.VirtualMachine.MOD", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.MOD", "kind": "function", "doc": "<p>Handle a <code>MOD</code> bytecode.</p>\n\n<p>This method handles the module operation between two integers.</p>\n\n<p><code>short</code>-typed values will also use this method.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>instruction_params : dict[str, Union[int, float, str]]\n    The bytecode metadata.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">instruction_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.virtual_machine.VirtualMachine.MOV": {"fullname": "src.virtual_machine.VirtualMachine.MOV", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.MOV", "kind": "function", "doc": "<p>Handle a <code>MOV</code> bytecode.</p>\n\n<p>This method copies the value of one register into another.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>instruction_params : dict[str, Union[int, float, str]]\n    The bytecode metadata.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">instruction_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.virtual_machine.VirtualMachine.MULT": {"fullname": "src.virtual_machine.VirtualMachine.MULT", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.MULT", "kind": "function", "doc": "<p>Handle a <code>MULT</code> bytecode.</p>\n\n<p>This method handles the multiplication between two integers.</p>\n\n<p><code>short</code>-typed values will also use this method.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>instruction_params : dict[str, Union[int, float, str]]\n    The bytecode metadata.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">instruction_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.virtual_machine.VirtualMachine.NEQ": {"fullname": "src.virtual_machine.VirtualMachine.NEQ", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.NEQ", "kind": "function", "doc": "<p>Handle a <code>NEQ</code> bytecode.</p>\n\n<p>This method handles the \"is not equal\" comparison between two integers.</p>\n\n<p><code>short</code>-typed values will also use this method.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>instruction_params : dict[str, Union[int, float, str]]\n    The bytecode metadata.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This method writes <code>1</code> in the target <code>register</code> if the expression\nevaluates to <code>True</code>, and <code>0</code> other wise. This is due to the fact that\nthe language does not support boolean literals (<code>True</code> and <code>False</code>).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">instruction_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.virtual_machine.VirtualMachine.NOT": {"fullname": "src.virtual_machine.VirtualMachine.NOT", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.NOT", "kind": "function", "doc": "<p>Handle a <code>NOT</code> bytecode.</p>\n\n<p>This method handles the \"logical not\" of an integer.</p>\n\n<p><code>short</code>-typed values will also use this method.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>instruction_params : dict[str, Union[int, float, str]]\n    The bytecode metadata.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This method writes <code>1</code> in the target <code>register</code> if the expression\nevaluates to <code>False</code>, and <code>0</code> other wise. This is due to the fact that\nthe language does not support boolean literals (<code>True</code> and <code>False</code>).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">instruction_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.virtual_machine.VirtualMachine.OR": {"fullname": "src.virtual_machine.VirtualMachine.OR", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.OR", "kind": "function", "doc": "<p>Handle a <code>OR</code> bytecode.</p>\n\n<p>This method handles the \"logical or\" operation between two integers.</p>\n\n<p><code>short</code>-typed values will also use this method.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>instruction_params : dict[str, Union[int, float, str]]\n    The bytecode metadata.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This method writes <code>1</code> in the target <code>register</code> if Python's evaluation\nof <code>lhs or rhs</code> results in anything different from <code>0</code>. This is due to\nthe fact that the language does not support boolean literals (<code>True</code> and\n<code>False</code>).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">instruction_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.virtual_machine.VirtualMachine.RSHIFT": {"fullname": "src.virtual_machine.VirtualMachine.RSHIFT", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.RSHIFT", "kind": "function", "doc": "<p>Handle a <code>RSHIFT</code> bytecode.</p>\n\n<p>This method handles the right bit-shift operation between two integers.</p>\n\n<p><code>short</code>-typed values will also use this method.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>instruction_params : dict[str, Union[int, float, str]]\n    The bytecode metadata.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">instruction_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.virtual_machine.VirtualMachine.SIGNEXT": {"fullname": "src.virtual_machine.VirtualMachine.SIGNEXT", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.SIGNEXT", "kind": "function", "doc": "<p>Handle a <code>SIGNEXT</code> bytecode.</p>\n\n<p>This method extends a 16-bit value to 32 bits. As we are dealing with\nregisters, and not the memory directly, the value to extend is simply\ncopied to the destination register.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>instruction_params : dict[str, Union[int, float, str]]\n    The bytecode metadata.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">instruction_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.virtual_machine.VirtualMachine.SITOFP": {"fullname": "src.virtual_machine.VirtualMachine.SITOFP", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.SITOFP", "kind": "function", "doc": "<p>Handle a <code>SITOFP</code> bytecode.</p>\n\n<p>This method type casts a signed integer to floating point. For the sake\nof simplicity, we'll use Python's conversion.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>instruction_params : dict[str, Union[int, float, str]]\n    The bytecode metadata.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">instruction_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.virtual_machine.VirtualMachine.STORE": {"fullname": "src.virtual_machine.VirtualMachine.STORE", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.STORE", "kind": "function", "doc": "<p>Handle a <code>STORE</code> bytecode.</p>\n\n<p>This method stores some value into a memory address.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>instruction_params : dict[str, Union[int, float, str]]\n    The bytecode metadata.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">instruction_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.virtual_machine.VirtualMachine.SUB": {"fullname": "src.virtual_machine.VirtualMachine.SUB", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.SUB", "kind": "function", "doc": "<p>Handle a <code>SUB</code> bytecode.</p>\n\n<p>This method handles the subtraction between two integers.</p>\n\n<p><code>short</code>-typed values will also use this method.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>instruction_params : dict[str, Union[int, float, str]]\n    The bytecode metadata.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">instruction_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.virtual_machine.VirtualMachine.TRUNC": {"fullname": "src.virtual_machine.VirtualMachine.TRUNC", "modulename": "src.virtual_machine", "qualname": "VirtualMachine.TRUNC", "kind": "function", "doc": "<p>Handle a <code>TRUNC</code> bytecode.</p>\n\n<p>This method truncates a 32-bit value to 16 bits.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>instruction_params : dict[str, Union[int, float, str]]\n    The bytecode metadata.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">instruction_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}}, "docInfo": {"src": {"qualname": 0, "fullname": 1, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 21}, "src.abstract_syntax_tree": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 9}, "src.abstract_syntax_tree.AbstractSyntaxTree": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 51}, "src.abstract_syntax_tree.AbstractSyntaxTree.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 3}, "src.abstract_syntax_tree.AbstractSyntaxTree.source_code": {"qualname": 3, "fullname": 7, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.abstract_syntax_tree.AbstractSyntaxTree.root": {"qualname": 2, "fullname": 6, "annotation": 7, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.abstract_syntax_tree.AbstractSyntaxTree.current_symbol": {"qualname": 3, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.abstract_syntax_tree.AbstractSyntaxTree.current_value": {"qualname": 3, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.abstract_syntax_tree.AbstractSyntaxTree.current_statement_list": {"qualname": 4, "fullname": 8, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.abstract_syntax_tree.AbstractSyntaxTree.current_function_type": {"qualname": 4, "fullname": 8, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.abstract_syntax_tree.AbstractSyntaxTree.build": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 28}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_struct_definitions": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 14}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_global_variables": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 14}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_functions": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 13}, "src.abstract_syntax_tree.AbstractSyntaxTree.print_tree": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 45}, "src.abstract_syntax_tree.AbstractSyntaxTree.get_root": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 25}, "src.ast_nodes": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 14}, "src.ast_nodes.node": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 14}, "src.ast_nodes.node.Node": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 84}, "src.ast_nodes.node.Node.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 89, "bases": 0, "doc": 3}, "src.ast_nodes.node.Node.value": {"qualname": 2, "fullname": 6, "annotation": 5, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.node.Node.type": {"qualname": 2, "fullname": 6, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.node.Node.certificate_label": {"qualname": 3, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.node.Node.uses_register": {"qualname": 3, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.node.Node.instruction": {"qualname": 2, "fullname": 6, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.node.Node.symbol": {"qualname": 2, "fullname": 6, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.node.Node.get_value": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 25}, "src.ast_nodes.node.Node.get_type": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 23}, "src.ast_nodes.node.Node.get_certificate_label": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 67}, "src.ast_nodes.node.Node.print": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 47}, "src.ast_nodes.node.Node.generate_code": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 67, "bases": 0, "doc": 232}, "src.ast_nodes.node.Node.certificate": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 25, "bases": 0, "doc": 59}, "src.ast_nodes.basic": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.basic.CST": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "src.ast_nodes.basic.CST.CST": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 59}, "src.ast_nodes.basic.CST.CST.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 3}, "src.ast_nodes.basic.CST.CST.type": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.basic.CST.CST.instruction": {"qualname": 2, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.basic.CST.CST.symbol": {"qualname": 2, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.basic.PROG": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "src.ast_nodes.basic.PROG.PROG": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 15}, "src.ast_nodes.basic.PROG.PROG.instruction": {"qualname": 2, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.basic.PROG.PROG.children": {"qualname": 2, "fullname": 7, "annotation": 6, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.basic.PROG.PROG.add_child": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 40, "bases": 0, "doc": 31}, "src.ast_nodes.basic.PROG.PROG.get_certificate_label": {"qualname": 4, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 60}, "src.ast_nodes.basic.PROG.PROG.print": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 54}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 73, "bases": 0, "doc": 148}, "src.ast_nodes.basic.PROG.PROG.certificate": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 25, "bases": 0, "doc": 80}, "src.ast_nodes.basic.SEQ": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "src.ast_nodes.basic.SEQ.SEQ": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 41}, "src.ast_nodes.basic.SEQ.SEQ.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "src.ast_nodes.basic.SEQ.SEQ.children": {"qualname": 2, "fullname": 7, "annotation": 6, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.basic.SEQ.SEQ.add_child": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 40, "bases": 0, "doc": 31}, "src.ast_nodes.basic.SEQ.SEQ.get_certificate_label": {"qualname": 4, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 61}, "src.ast_nodes.basic.SEQ.SEQ.print": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 54}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 73, "bases": 0, "doc": 88}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 25, "bases": 0, "doc": 93}, "src.ast_nodes.conditionals": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.conditionals.DO": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "src.ast_nodes.conditionals.DO.DO": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 55}, "src.ast_nodes.conditionals.DO.DO.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 59, "bases": 0, "doc": 3}, "src.ast_nodes.conditionals.DO.DO.get_certificate_label": {"qualname": 4, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 71}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 67, "bases": 0, "doc": 124}, "src.ast_nodes.conditionals.DO.DO.certificate": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 25, "bases": 0, "doc": 88}, "src.ast_nodes.conditionals.IF": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "src.ast_nodes.conditionals.IF.IF": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 54}, "src.ast_nodes.conditionals.IF.IF.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 61, "bases": 0, "doc": 3}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 67, "bases": 0, "doc": 139}, "src.ast_nodes.conditionals.IFELSE": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "src.ast_nodes.conditionals.IFELSE.IFELSE": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 77}, "src.ast_nodes.conditionals.IFELSE.IFELSE.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 90, "bases": 0, "doc": 3}, "src.ast_nodes.conditionals.IFELSE.IFELSE.statement_if_false": {"qualname": 4, "fullname": 9, "annotation": 6, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label": {"qualname": 4, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 69}, "src.ast_nodes.conditionals.IFELSE.IFELSE.print": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 54}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 67, "bases": 0, "doc": 159}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 25, "bases": 0, "doc": 109}, "src.ast_nodes.conditionals.WHILE": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "src.ast_nodes.conditionals.WHILE.WHILE": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 81}, "src.ast_nodes.conditionals.WHILE.WHILE.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 59, "bases": 0, "doc": 3}, "src.ast_nodes.conditionals.WHILE.WHILE.get_certificate_label": {"qualname": 4, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 71}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 67, "bases": 0, "doc": 156}, "src.ast_nodes.conditionals.conditional": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 11}, "src.ast_nodes.conditionals.conditional.Conditional": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 53}, "src.ast_nodes.conditionals.conditional.Conditional.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 61, "bases": 0, "doc": 3}, "src.ast_nodes.conditionals.conditional.Conditional.parenthesis_expression": {"qualname": 3, "fullname": 8, "annotation": 6, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.conditionals.conditional.Conditional.statement_if_true": {"qualname": 4, "fullname": 9, "annotation": 6, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label": {"qualname": 4, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 70}, "src.ast_nodes.conditionals.conditional.Conditional.print": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 54}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 25, "bases": 0, "doc": 90}, "src.ast_nodes.functions": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.functions.ARG": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "src.ast_nodes.functions.ARG.ARG": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 42}, "src.ast_nodes.functions.ARG.ARG.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 82, "bases": 0, "doc": 3}, "src.ast_nodes.functions.ARG.ARG.argument_value": {"qualname": 3, "fullname": 8, "annotation": 13, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.functions.ARG.ARG.parameter_type": {"qualname": 3, "fullname": 8, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.functions.ARG.ARG.get_certificate_label": {"qualname": 4, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 60}, "src.ast_nodes.functions.ARG.ARG.print": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 56}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 73, "bases": 0, "doc": 112}, "src.ast_nodes.functions.ARG.ARG.certificate": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 25, "bases": 0, "doc": 82}, "src.ast_nodes.functions.FUNC_CALL": {"qualname": 0, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 13}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL": {"qualname": 2, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 33}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.__init__": {"qualname": 4, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 3}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.function_call_metadata": {"qualname": 5, "fullname": 11, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.arguments": {"qualname": 3, "fullname": 9, "annotation": 7, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.type": {"qualname": 3, "fullname": 9, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.symbol": {"qualname": 3, "fullname": 9, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.get_certificate_label": {"qualname": 5, "fullname": 11, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 62}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 55}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"qualname": 4, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 73, "bases": 0, "doc": 100}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 25, "bases": 0, "doc": 84}, "src.ast_nodes.functions.FUNC_DEF": {"qualname": 0, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 13}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"qualname": 2, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 98}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.__init__": {"qualname": 4, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 55, "bases": 0, "doc": 3}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.parameters": {"qualname": 3, "fullname": 9, "annotation": 7, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.statements": {"qualname": 3, "fullname": 9, "annotation": 7, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.set_statements": {"qualname": 4, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 45, "bases": 0, "doc": 44}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"qualname": 5, "fullname": 11, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 73}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 55}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"qualname": 4, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 67, "bases": 0, "doc": 110}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 25, "bases": 0, "doc": 86}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_function_name": {"qualname": 5, "fullname": 11, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 24}, "src.ast_nodes.functions.PARAM": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "src.ast_nodes.functions.PARAM.PARAM": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 8, "doc": 76}, "src.ast_nodes.functions.PARAM.PARAM.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 15, "bases": 0, "doc": 3}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 67, "bases": 0, "doc": 108}, "src.ast_nodes.functions.RET_SYM": {"qualname": 0, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 13}, "src.ast_nodes.functions.RET_SYM.RET_SYM": {"qualname": 2, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 48}, "src.ast_nodes.functions.RET_SYM.RET_SYM.__init__": {"qualname": 4, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 41, "bases": 0, "doc": 3}, "src.ast_nodes.functions.RET_SYM.RET_SYM.returned_value": {"qualname": 4, "fullname": 10, "annotation": 6, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.functions.RET_SYM.RET_SYM.type": {"qualname": 3, "fullname": 9, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.functions.RET_SYM.RET_SYM.get_certificate_label": {"qualname": 5, "fullname": 11, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 63}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 59}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"qualname": 4, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 73, "bases": 0, "doc": 131}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 25, "bases": 0, "doc": 85}, "src.ast_nodes.operations": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.operations.ADD": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "src.ast_nodes.operations.ADD.ADD": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 46}, "src.ast_nodes.operations.ADD.ADD.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 63, "bases": 0, "doc": 3}, "src.ast_nodes.operations.ADD.ADD.instruction": {"qualname": 2, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.operations.AND": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "src.ast_nodes.operations.AND.AND": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 48}, "src.ast_nodes.operations.AND.AND.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 63, "bases": 0, "doc": 3}, "src.ast_nodes.operations.AND.AND.instruction": {"qualname": 2, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.operations.ASSIGN": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "src.ast_nodes.operations.ASSIGN.ASSIGN": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 73}, "src.ast_nodes.operations.ASSIGN.ASSIGN.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 56, "bases": 0, "doc": 3}, "src.ast_nodes.operations.ASSIGN.ASSIGN.instruction": {"qualname": 2, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 73, "bases": 0, "doc": 141}, "src.ast_nodes.operations.BITAND": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "src.ast_nodes.operations.BITAND.BITAND": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 49}, "src.ast_nodes.operations.BITAND.BITAND.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 63, "bases": 0, "doc": 3}, "src.ast_nodes.operations.BITAND.BITAND.instruction": {"qualname": 2, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.operations.BITOR": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "src.ast_nodes.operations.BITOR.BITOR": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 49}, "src.ast_nodes.operations.BITOR.BITOR.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 63, "bases": 0, "doc": 3}, "src.ast_nodes.operations.BITOR.BITOR.instruction": {"qualname": 2, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.operations.DIFF": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "src.ast_nodes.operations.DIFF.DIFF": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 50}, "src.ast_nodes.operations.DIFF.DIFF.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 63, "bases": 0, "doc": 3}, "src.ast_nodes.operations.DIFF.DIFF.instruction": {"qualname": 2, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.operations.DIV": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "src.ast_nodes.operations.DIV.DIV": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 46}, "src.ast_nodes.operations.DIV.DIV.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 63, "bases": 0, "doc": 3}, "src.ast_nodes.operations.DIV.DIV.instruction": {"qualname": 2, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.operations.EQUAL": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "src.ast_nodes.operations.EQUAL.EQUAL": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 48}, "src.ast_nodes.operations.EQUAL.EQUAL.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 63, "bases": 0, "doc": 3}, "src.ast_nodes.operations.EQUAL.EQUAL.instruction": {"qualname": 2, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.operations.GREATER": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "src.ast_nodes.operations.GREATER.GREATER": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 49}, "src.ast_nodes.operations.GREATER.GREATER.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 63, "bases": 0, "doc": 3}, "src.ast_nodes.operations.GREATER.GREATER.instruction": {"qualname": 2, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.operations.LESS": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "src.ast_nodes.operations.LESS.LESS": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 49}, "src.ast_nodes.operations.LESS.LESS.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 63, "bases": 0, "doc": 3}, "src.ast_nodes.operations.LESS.LESS.instruction": {"qualname": 2, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.operations.LSHIFT": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "src.ast_nodes.operations.LSHIFT.LSHIFT": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 50}, "src.ast_nodes.operations.LSHIFT.LSHIFT.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 63, "bases": 0, "doc": 3}, "src.ast_nodes.operations.LSHIFT.LSHIFT.instruction": {"qualname": 2, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.operations.MOD": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "src.ast_nodes.operations.MOD.MOD": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 47}, "src.ast_nodes.operations.MOD.MOD.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 63, "bases": 0, "doc": 3}, "src.ast_nodes.operations.MOD.MOD.instruction": {"qualname": 2, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.operations.MULT": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "src.ast_nodes.operations.MULT.MULT": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 46}, "src.ast_nodes.operations.MULT.MULT.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 63, "bases": 0, "doc": 3}, "src.ast_nodes.operations.MULT.MULT.instruction": {"qualname": 2, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.operations.NOT": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "src.ast_nodes.operations.NOT.NOT": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 32}, "src.ast_nodes.operations.NOT.NOT.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 3}, "src.ast_nodes.operations.NOT.NOT.expression": {"qualname": 2, "fullname": 7, "annotation": 6, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.operations.NOT.NOT.symbol": {"qualname": 2, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.operations.NOT.NOT.instruction": {"qualname": 2, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.operations.NOT.NOT.type": {"qualname": 2, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.operations.NOT.NOT.get_certificate_label": {"qualname": 4, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 61}, "src.ast_nodes.operations.NOT.NOT.print": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 55}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 73, "bases": 0, "doc": 98}, "src.ast_nodes.operations.OR": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "src.ast_nodes.operations.OR.OR": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 48}, "src.ast_nodes.operations.OR.OR.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 63, "bases": 0, "doc": 3}, "src.ast_nodes.operations.OR.OR.instruction": {"qualname": 2, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.operations.RSHIFT": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "src.ast_nodes.operations.RSHIFT.RSHIFT": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 50}, "src.ast_nodes.operations.RSHIFT.RSHIFT.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 63, "bases": 0, "doc": 3}, "src.ast_nodes.operations.RSHIFT.RSHIFT.instruction": {"qualname": 2, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.operations.SUB": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "src.ast_nodes.operations.SUB.SUB": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 46}, "src.ast_nodes.operations.SUB.SUB.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 63, "bases": 0, "doc": 3}, "src.ast_nodes.operations.SUB.SUB.instruction": {"qualname": 2, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.operations.operation": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "src.ast_nodes.operations.operation.Operation": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 60}, "src.ast_nodes.operations.operation.Operation.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 103, "bases": 0, "doc": 3}, "src.ast_nodes.operations.operation.Operation.lhs": {"qualname": 2, "fullname": 7, "annotation": 6, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.operations.operation.Operation.rhs": {"qualname": 2, "fullname": 7, "annotation": 6, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.operations.operation.Operation.supports_float": {"qualname": 3, "fullname": 8, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.operations.operation.Operation.print": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 54}, "src.ast_nodes.operations.operation.Operation.generate_code": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 73, "bases": 0, "doc": 98}, "src.ast_nodes.operations.operation.Operation.certificate": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 25, "bases": 0, "doc": 85}, "src.ast_nodes.variables": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.variables.ELEMENT_ACCESS": {"qualname": 0, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 13}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"qualname": 2, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 108}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.__init__": {"qualname": 4, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 101, "bases": 0, "doc": 3}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.is_array": {"qualname": 4, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.is_struct": {"qualname": 4, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.variable": {"qualname": 3, "fullname": 9, "annotation": 7, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.element": {"qualname": 3, "fullname": 9, "annotation": 13, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.type": {"qualname": 3, "fullname": 9, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.access_type": {"qualname": 4, "fullname": 10, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.element_offset": {"qualname": 4, "fullname": 10, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 61}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"qualname": 4, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 67, "bases": 0, "doc": 113}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 25, "bases": 0, "doc": 174}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.add_context": {"qualname": 4, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 42}, "src.ast_nodes.variables.STRUCT_DEF": {"qualname": 0, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 13}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF": {"qualname": 2, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 31}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.__init__": {"qualname": 4, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 3}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.active": {"qualname": 3, "fullname": 9, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.struct_metadata": {"qualname": 4, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 58}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 25, "bases": 0, "doc": 78}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"qualname": 4, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 67, "bases": 0, "doc": 95}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_symbol": {"qualname": 4, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 28}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_attribute_types": {"qualname": 5, "fullname": 11, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 48}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.is_active": {"qualname": 4, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 54}, "src.ast_nodes.variables.VAR": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "src.ast_nodes.variables.VAR.VAR": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 43}, "src.ast_nodes.variables.VAR.VAR.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 3}, "src.ast_nodes.variables.VAR.VAR.variable_metadata": {"qualname": 3, "fullname": 8, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.variables.VAR.VAR.id": {"qualname": 2, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.variables.VAR.VAR.type": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 67, "bases": 0, "doc": 143}, "src.ast_nodes.variables.VAR.VAR.get_metadata": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 23}, "src.ast_nodes.variables.VAR.VAR.add_context": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 62}, "src.ast_nodes.variables.VAR_DEF": {"qualname": 0, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 13}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF": {"qualname": 2, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 31}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.__init__": {"qualname": 4, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 15, "bases": 0, "doc": 3}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.variable_metadata": {"qualname": 4, "fullname": 10, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.instruction": {"qualname": 3, "fullname": 9, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.size": {"qualname": 3, "fullname": 9, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.symbol": {"qualname": 3, "fullname": 9, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 58}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"qualname": 4, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 67, "bases": 0, "doc": 105}, "src.certificators": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 14}, "src.certificators.abstract_certificator": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 13}, "src.certificators.abstract_certificator.AbstractCertificator": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 8}, "src.certificators.abstract_certificator.AbstractCertificator.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "src.certificators.abstract_certificator.AbstractCertificator.computed_certificate": {"qualname": 3, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.certificators.abstract_certificator.AbstractCertificator.initial_prime": {"qualname": 3, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.certificators.abstract_certificator.AbstractCertificator.certificate": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 3}, "src.certificators.abstract_certificator.AbstractCertificator.get_certificate": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 3}, "src.certificators.backend": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "src.certificators.backend.BackendCertificator": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 37}, "src.certificators.backend.BackendCertificator.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 3}, "src.certificators.backend.BackendCertificator.program": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.certificators.backend.BackendCertificator.bytecode_list": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.certificators.backend.BackendCertificator.register_tracker": {"qualname": 3, "fullname": 6, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.certificators.backend.BackendCertificator.variable_prime_tracker": {"qualname": 4, "fullname": 7, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.certificators.backend.BackendCertificator.current_positional_prime": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.certificators.backend.BackendCertificator.current_variable_prime": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.certificators.backend.BackendCertificator.functions_primes": {"qualname": 3, "fullname": 6, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.certificators.backend.BackendCertificator.instruction_status": {"qualname": 3, "fullname": 6, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.certificators.backend.BackendCertificator.special_instructions_handlers": {"qualname": 4, "fullname": 7, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.certificators.backend.BackendCertificator.grouped_instructions_handlers": {"qualname": 4, "fullname": 7, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.certificators.backend.BackendCertificator.certificate": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 46}, "src.certificators.frontend": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "src.certificators.frontend.FrontendCertificator": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 26}, "src.certificators.frontend.FrontendCertificator.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 3}, "src.certificators.frontend.FrontendCertificator.ast": {"qualname": 2, "fullname": 5, "annotation": 6, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.certificators.frontend.FrontendCertificator.initial_prime": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.certificators.frontend.FrontendCertificator.certificate": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 44}, "src.code_generator": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 11}, "src.code_generator.CodeGenerator": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 74}, "src.code_generator.CodeGenerator.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 3}, "src.code_generator.CodeGenerator.root": {"qualname": 2, "fullname": 5, "annotation": 7, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.code_generator.CodeGenerator.program": {"qualname": 2, "fullname": 5, "annotation": 5, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.code_generator.CodeGenerator.register": {"qualname": 2, "fullname": 5, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.code_generator.CodeGenerator.print": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 7}, "src.code_generator.CodeGenerator.generate_code": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 58}, "src.code_generator.CodeGenerator.parse_struct_definitions": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 36}, "src.code_generator.CodeGenerator.parse_global_variables": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 15}, "src.code_generator.CodeGenerator.parse_functions": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 15}, "src.code_generator.CodeGenerator.get_program": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 20}, "src.lexer": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 11}, "src.lexer.Lexer": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.lexer.Lexer.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 15, "bases": 0, "doc": 23}, "src.lexer.Lexer.conditionals": {"qualname": 2, "fullname": 4, "annotation": 3, "default_value": 34, "signature": 0, "bases": 0, "doc": 3}, "src.lexer.Lexer.symbols": {"qualname": 2, "fullname": 4, "annotation": 3, "default_value": 54, "signature": 0, "bases": 0, "doc": 3}, "src.lexer.Lexer.operators": {"qualname": 2, "fullname": 4, "annotation": 3, "default_value": 121, "signature": 0, "bases": 0, "doc": 3}, "src.lexer.Lexer.types": {"qualname": 2, "fullname": 4, "annotation": 3, "default_value": 16, "signature": 0, "bases": 0, "doc": 3}, "src.lexer.Lexer.reserved_words": {"qualname": 3, "fullname": 5, "annotation": 3, "default_value": 235, "signature": 0, "bases": 0, "doc": 3}, "src.lexer.Lexer.source_code": {"qualname": 3, "fullname": 5, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.lexer.Lexer.functions": {"qualname": 2, "fullname": 4, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.lexer.Lexer.globals": {"qualname": 2, "fullname": 4, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.lexer.Lexer.variable_count": {"qualname": 3, "fullname": 5, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.lexer.Lexer.struct_prime": {"qualname": 3, "fullname": 5, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.lexer.Lexer.variable_prime": {"qualname": 3, "fullname": 5, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.lexer.Lexer.parse_source_code": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 178}, "src.lexer.Lexer.split_source": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 56}, "src.runner": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 9}, "src.runner.Charon": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 159}, "src.runner.Charon.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 150, "bases": 0, "doc": 3}, "src.runner.Charon.parsed_source": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.runner.Charon.ast": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.runner.Charon.program": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.runner.Charon.vm": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.runner.Charon.frontend_certificator": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.runner.Charon.backend_certificator": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.runner.Charon.get_parsed_source": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 10}, "src.runner.Charon.get_ast": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 9}, "src.runner.Charon.get_program": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 9}, "src.runner.Charon.get_vm": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 25, "bases": 0, "doc": 9}, "src.runner.Charon.get_frontend_certificator": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 29, "bases": 0, "doc": 10}, "src.runner.Charon.get_backend_certificator": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 29, "bases": 0, "doc": 10}, "src.runner.create_instance": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 30, "bases": 0, "doc": 52}, "src.utils": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 6}, "src.utils.builtin_types": {"qualname": 2, "fullname": 4, "annotation": 3, "default_value": 16, "signature": 0, "bases": 0, "doc": 3}, "src.utils.is_prime": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 36}, "src.utils.next_prime": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 41}, "src.utils.previous_prime": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 40}, "src.utils.primes_list": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 25, "bases": 0, "doc": 57}, "src.utils.type_cast": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 70, "bases": 0, "doc": 189}, "src.utils.get_variable_size": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 50}, "src.utils.flatten_list": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 45, "bases": 0, "doc": 59}, "src.utils.NODE_TO_INSTRUCTION_MAPPING": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 318, "signature": 0, "bases": 0, "doc": 3}, "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING": {"qualname": 5, "fullname": 7, "annotation": 0, "default_value": 191, "signature": 0, "bases": 0, "doc": 3}, "src.utils.INSTRUCTIONS_CATEGORIES": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 182, "signature": 0, "bases": 0, "doc": 3}, "src.utils.SYMBOLS_MAP": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 217, "signature": 0, "bases": 0, "doc": 3}, "src.utils.TYPE_SYMBOLS_MAP": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 67, "signature": 0, "bases": 0, "doc": 3}, "src.utils.get_certificate_symbol": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 43}, "src.virtual_machine": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 11}, "src.virtual_machine.VirtualMachine": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 49}, "src.virtual_machine.VirtualMachine.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 61, "bases": 0, "doc": 3}, "src.virtual_machine.VirtualMachine.program": {"qualname": 2, "fullname": 5, "annotation": 5, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.virtual_machine.VirtualMachine.memory": {"qualname": 2, "fullname": 5, "annotation": 7, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.virtual_machine.VirtualMachine.memory_size": {"qualname": 3, "fullname": 6, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.virtual_machine.VirtualMachine.memory_pointer": {"qualname": 3, "fullname": 6, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.virtual_machine.VirtualMachine.program_counter": {"qualname": 3, "fullname": 6, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.virtual_machine.VirtualMachine.registers": {"qualname": 2, "fullname": 5, "annotation": 7, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.virtual_machine.VirtualMachine.variables": {"qualname": 2, "fullname": 5, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.virtual_machine.VirtualMachine.get_memory": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 47, "bases": 0, "doc": 52}, "src.virtual_machine.VirtualMachine.print": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 7}, "src.virtual_machine.VirtualMachine.run": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 10}, "src.virtual_machine.VirtualMachine.ADD": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 49}, "src.virtual_machine.VirtualMachine.ADDRESS": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 60}, "src.virtual_machine.VirtualMachine.ALLOC": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 66}, "src.virtual_machine.VirtualMachine.AND": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 108}, "src.virtual_machine.VirtualMachine.BITAND": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 52}, "src.virtual_machine.VirtualMachine.BITOR": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 52}, "src.virtual_machine.VirtualMachine.CONSTANT": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 36}, "src.virtual_machine.VirtualMachine.DIV": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 49}, "src.virtual_machine.VirtualMachine.EQ": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 104}, "src.virtual_machine.VirtualMachine.FADD": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 38}, "src.virtual_machine.VirtualMachine.FAND": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 97}, "src.virtual_machine.VirtualMachine.FDIV": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 38}, "src.virtual_machine.VirtualMachine.FEQ": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 93}, "src.virtual_machine.VirtualMachine.FGT": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 93}, "src.virtual_machine.VirtualMachine.FLT": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 93}, "src.virtual_machine.VirtualMachine.FMULT": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 38}, "src.virtual_machine.VirtualMachine.FNEQ": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 94}, "src.virtual_machine.VirtualMachine.FOR": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 97}, "src.virtual_machine.VirtualMachine.FPTOSI": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 49}, "src.virtual_machine.VirtualMachine.FSUB": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 38}, "src.virtual_machine.VirtualMachine.GT": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 104}, "src.virtual_machine.VirtualMachine.HALT": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 33}, "src.virtual_machine.VirtualMachine.JAL": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 35}, "src.virtual_machine.VirtualMachine.JR": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 38}, "src.virtual_machine.VirtualMachine.JZ": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 44}, "src.virtual_machine.VirtualMachine.LOAD": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 77}, "src.virtual_machine.VirtualMachine.LSHIFT": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 52}, "src.virtual_machine.VirtualMachine.LT": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 104}, "src.virtual_machine.VirtualMachine.MOD": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 50}, "src.virtual_machine.VirtualMachine.MOV": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 38}, "src.virtual_machine.VirtualMachine.MULT": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 49}, "src.virtual_machine.VirtualMachine.NEQ": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 105}, "src.virtual_machine.VirtualMachine.NOT": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 103}, "src.virtual_machine.VirtualMachine.OR": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 108}, "src.virtual_machine.VirtualMachine.RSHIFT": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 52}, "src.virtual_machine.VirtualMachine.SIGNEXT": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 60}, "src.virtual_machine.VirtualMachine.SITOFP": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 49}, "src.virtual_machine.VirtualMachine.STORE": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 37}, "src.virtual_machine.VirtualMachine.SUB": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 49}, "src.virtual_machine.VirtualMachine.TRUNC": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 38}}, "length": 403, "save": true}, "index": {"qualname": {"root": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.__init__": {"tf": 1}, "src.ast_nodes.node.Node.__init__": {"tf": 1}, "src.ast_nodes.basic.CST.CST.__init__": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.__init__": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.__init__": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.__init__": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.__init__": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.__init__": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.__init__": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.__init__": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.__init__": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.__init__": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.__init__": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.__init__": {"tf": 1}, "src.ast_nodes.operations.ADD.ADD.__init__": {"tf": 1}, "src.ast_nodes.operations.AND.AND.__init__": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.__init__": {"tf": 1}, "src.ast_nodes.operations.BITAND.BITAND.__init__": {"tf": 1}, "src.ast_nodes.operations.BITOR.BITOR.__init__": {"tf": 1}, "src.ast_nodes.operations.DIFF.DIFF.__init__": {"tf": 1}, "src.ast_nodes.operations.DIV.DIV.__init__": {"tf": 1}, "src.ast_nodes.operations.EQUAL.EQUAL.__init__": {"tf": 1}, "src.ast_nodes.operations.GREATER.GREATER.__init__": {"tf": 1}, "src.ast_nodes.operations.LESS.LESS.__init__": {"tf": 1}, "src.ast_nodes.operations.LSHIFT.LSHIFT.__init__": {"tf": 1}, "src.ast_nodes.operations.MOD.MOD.__init__": {"tf": 1}, "src.ast_nodes.operations.MULT.MULT.__init__": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.__init__": {"tf": 1}, "src.ast_nodes.operations.OR.OR.__init__": {"tf": 1}, "src.ast_nodes.operations.RSHIFT.RSHIFT.__init__": {"tf": 1}, "src.ast_nodes.operations.SUB.SUB.__init__": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.__init__": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.__init__": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.__init__": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.__init__": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.__init__": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.__init__": {"tf": 1}, "src.certificators.backend.BackendCertificator.__init__": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.__init__": {"tf": 1}, "src.code_generator.CodeGenerator.__init__": {"tf": 1}, "src.lexer.Lexer.__init__": {"tf": 1}, "src.runner.Charon.__init__": {"tf": 1}, "src.virtual_machine.VirtualMachine.__init__": {"tf": 1}}, "df": 43, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.__init__": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.source_code": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.root": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.current_symbol": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.current_value": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.current_statement_list": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.current_function_type": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.build": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_struct_definitions": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_global_variables": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_functions": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.print_tree": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.get_root": {"tf": 1}}, "df": 14}}}}}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.certificators.abstract_certificator.AbstractCertificator": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.__init__": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.computed_certificate": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.initial_prime": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.certificate": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.get_certificate": {"tf": 1}}, "df": 6}}}}}}}}}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "d": {"docs": {"src.ast_nodes.basic.PROG.PROG.add_child": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.add_child": {"tf": 1}, "src.ast_nodes.operations.ADD.ADD": {"tf": 1}, "src.ast_nodes.operations.ADD.ADD.__init__": {"tf": 1}, "src.ast_nodes.operations.ADD.ADD.instruction": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.add_context": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.add_context": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADD": {"tf": 1}}, "df": 8, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {"src.ast_nodes.functions.ARG.ARG": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.__init__": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.argument_value": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.parameter_type": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.print": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.certificate": {"tf": 1}}, "df": 8, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.functions.ARG.ARG.argument_value": {"tf": 1}}, "df": 1, "s": {"docs": {"src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.arguments": {"tf": 1}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.is_array": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"src.ast_nodes.operations.AND.AND": {"tf": 1}, "src.ast_nodes.operations.AND.AND.__init__": {"tf": 1}, "src.ast_nodes.operations.AND.AND.instruction": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}}, "df": 4}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {"src.ast_nodes.operations.ASSIGN.ASSIGN": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.__init__": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.instruction": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}}, "df": 4}}}}, "t": {"docs": {"src.certificators.frontend.FrontendCertificator.ast": {"tf": 1}, "src.runner.Charon.ast": {"tf": 1}, "src.runner.Charon.get_ast": {"tf": 1}}, "df": 3}}, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.__init__": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.is_array": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.is_struct": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.variable": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.element": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.type": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.access_type": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.element_offset": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.add_context": {"tf": 1}}, "df": 13}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.active": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.is_active": {"tf": 1}}, "df": 2}}}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_attribute_types": {"tf": 1}}, "df": 1}}}}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {"src.virtual_machine.VirtualMachine.ALLOC": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.__init__": {"tf": 1}, "src.ast_nodes.node.Node.__init__": {"tf": 1}, "src.ast_nodes.basic.CST.CST.__init__": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.__init__": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.__init__": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.__init__": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.__init__": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.__init__": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.__init__": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.__init__": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.__init__": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.__init__": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.__init__": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.__init__": {"tf": 1}, "src.ast_nodes.operations.ADD.ADD.__init__": {"tf": 1}, "src.ast_nodes.operations.AND.AND.__init__": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.__init__": {"tf": 1}, "src.ast_nodes.operations.BITAND.BITAND.__init__": {"tf": 1}, "src.ast_nodes.operations.BITOR.BITOR.__init__": {"tf": 1}, "src.ast_nodes.operations.DIFF.DIFF.__init__": {"tf": 1}, "src.ast_nodes.operations.DIV.DIV.__init__": {"tf": 1}, "src.ast_nodes.operations.EQUAL.EQUAL.__init__": {"tf": 1}, "src.ast_nodes.operations.GREATER.GREATER.__init__": {"tf": 1}, "src.ast_nodes.operations.LESS.LESS.__init__": {"tf": 1}, "src.ast_nodes.operations.LSHIFT.LSHIFT.__init__": {"tf": 1}, "src.ast_nodes.operations.MOD.MOD.__init__": {"tf": 1}, "src.ast_nodes.operations.MULT.MULT.__init__": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.__init__": {"tf": 1}, "src.ast_nodes.operations.OR.OR.__init__": {"tf": 1}, "src.ast_nodes.operations.RSHIFT.RSHIFT.__init__": {"tf": 1}, "src.ast_nodes.operations.SUB.SUB.__init__": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.__init__": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.__init__": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.__init__": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.__init__": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.__init__": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.__init__": {"tf": 1}, "src.certificators.backend.BackendCertificator.__init__": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.__init__": {"tf": 1}, "src.code_generator.CodeGenerator.__init__": {"tf": 1}, "src.lexer.Lexer.__init__": {"tf": 1}, "src.runner.Charon.__init__": {"tf": 1}, "src.virtual_machine.VirtualMachine.__init__": {"tf": 1}}, "df": 43, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.certificators.abstract_certificator.AbstractCertificator.initial_prime": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.initial_prime": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.ast_nodes.node.Node.instruction": {"tf": 1}, "src.ast_nodes.basic.CST.CST.instruction": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.instruction": {"tf": 1}, "src.ast_nodes.operations.ADD.ADD.instruction": {"tf": 1}, "src.ast_nodes.operations.AND.AND.instruction": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.instruction": {"tf": 1}, "src.ast_nodes.operations.BITAND.BITAND.instruction": {"tf": 1}, "src.ast_nodes.operations.BITOR.BITOR.instruction": {"tf": 1}, "src.ast_nodes.operations.DIFF.DIFF.instruction": {"tf": 1}, "src.ast_nodes.operations.DIV.DIV.instruction": {"tf": 1}, "src.ast_nodes.operations.EQUAL.EQUAL.instruction": {"tf": 1}, "src.ast_nodes.operations.GREATER.GREATER.instruction": {"tf": 1}, "src.ast_nodes.operations.LESS.LESS.instruction": {"tf": 1}, "src.ast_nodes.operations.LSHIFT.LSHIFT.instruction": {"tf": 1}, "src.ast_nodes.operations.MOD.MOD.instruction": {"tf": 1}, "src.ast_nodes.operations.MULT.MULT.instruction": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.instruction": {"tf": 1}, "src.ast_nodes.operations.OR.OR.instruction": {"tf": 1}, "src.ast_nodes.operations.RSHIFT.RSHIFT.instruction": {"tf": 1}, "src.ast_nodes.operations.SUB.SUB.instruction": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.instruction": {"tf": 1}, "src.certificators.backend.BackendCertificator.instruction_status": {"tf": 1}, "src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1}, "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING": {"tf": 1}}, "df": 24, "s": {"docs": {"src.certificators.backend.BackendCertificator.special_instructions_handlers": {"tf": 1}, "src.certificators.backend.BackendCertificator.grouped_instructions_handlers": {"tf": 1}, "src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}}, "df": 3}}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"src.runner.create_instance": {"tf": 1}}, "df": 1}}}}}}}, "f": {"docs": {"src.ast_nodes.conditionals.IF.IF": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.__init__": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.statement_if_false": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.statement_if_true": {"tf": 1}}, "df": 5, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.conditionals.IFELSE.IFELSE": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.__init__": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.statement_if_false": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.print": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1}}, "df": 7}}}}}, "s": {"docs": {"src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.is_array": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.is_struct": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.is_active": {"tf": 1}, "src.utils.is_prime": {"tf": 1}}, "df": 4}, "d": {"docs": {"src.ast_nodes.variables.VAR.VAR.id": {"tf": 1}}, "df": 1}}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.source_code": {"tf": 1}, "src.lexer.Lexer.source_code": {"tf": 1}, "src.lexer.Lexer.parse_source_code": {"tf": 1}, "src.lexer.Lexer.split_source": {"tf": 1}, "src.runner.Charon.parsed_source": {"tf": 1}, "src.runner.Charon.get_parsed_source": {"tf": 1}}, "df": 6}}}}}, "y": {"docs": {}, "df": 0, "m": {"docs": {"src.ast_nodes.functions.RET_SYM.RET_SYM": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.__init__": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.returned_value": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.type": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 1}}, "df": 8, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.current_symbol": {"tf": 1}, "src.ast_nodes.node.Node.symbol": {"tf": 1}, "src.ast_nodes.basic.CST.CST.symbol": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.symbol": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.symbol": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_symbol": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.symbol": {"tf": 1}, "src.utils.get_certificate_symbol": {"tf": 1}}, "df": 8, "s": {"docs": {"src.lexer.Lexer.symbols": {"tf": 1}, "src.utils.SYMBOLS_MAP": {"tf": 1}, "src.utils.TYPE_SYMBOLS_MAP": {"tf": 1}}, "df": 3}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.current_statement_list": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.statement_if_false": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.statement_if_true": {"tf": 1}}, "df": 3, "s": {"docs": {"src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.statements": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.set_statements": {"tf": 1}}, "df": 2}}}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {"src.certificators.backend.BackendCertificator.instruction_status": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.parse_struct_definitions": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.is_struct": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.__init__": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.active": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.struct_metadata": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_symbol": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_attribute_types": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.is_active": {"tf": 1}, "src.code_generator.CodeGenerator.parse_struct_definitions": {"tf": 1}, "src.lexer.Lexer.struct_prime": {"tf": 1}}, "df": 14}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"src.virtual_machine.VirtualMachine.STORE": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "q": {"docs": {"src.ast_nodes.basic.SEQ.SEQ": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.__init__": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.children": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.add_child": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.print": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1}}, "df": 8}, "t": {"docs": {"src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.set_statements": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "b": {"docs": {"src.ast_nodes.operations.SUB.SUB": {"tf": 1}, "src.ast_nodes.operations.SUB.SUB.__init__": {"tf": 1}, "src.ast_nodes.operations.SUB.SUB.instruction": {"tf": 1}, "src.virtual_machine.VirtualMachine.SUB": {"tf": 1}}, "df": 4}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.operations.operation.Operation.supports_float": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.variables.VAR_DEF.VAR_DEF.size": {"tf": 1}, "src.utils.get_variable_size": {"tf": 1}, "src.virtual_machine.VirtualMachine.memory_size": {"tf": 1}}, "df": 3}}, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {"src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "p": {"docs": {"src.virtual_machine.VirtualMachine.SITOFP": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.certificators.backend.BackendCertificator.special_instructions_handlers": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"src.lexer.Lexer.split_source": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.source_code": {"tf": 1}, "src.ast_nodes.node.Node.generate_code": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1}, "src.code_generator.CodeGenerator.generate_code": {"tf": 1}, "src.lexer.Lexer.source_code": {"tf": 1}, "src.lexer.Lexer.parse_source_code": {"tf": 1}}, "df": 23, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.code_generator.CodeGenerator": {"tf": 1}, "src.code_generator.CodeGenerator.__init__": {"tf": 1}, "src.code_generator.CodeGenerator.root": {"tf": 1}, "src.code_generator.CodeGenerator.program": {"tf": 1}, "src.code_generator.CodeGenerator.register": {"tf": 1}, "src.code_generator.CodeGenerator.print": {"tf": 1}, "src.code_generator.CodeGenerator.generate_code": {"tf": 1}, "src.code_generator.CodeGenerator.parse_struct_definitions": {"tf": 1}, "src.code_generator.CodeGenerator.parse_global_variables": {"tf": 1}, "src.code_generator.CodeGenerator.parse_functions": {"tf": 1}, "src.code_generator.CodeGenerator.get_program": {"tf": 1}}, "df": 11}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.ast_nodes.conditionals.conditional.Conditional": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.__init__": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.parenthesis_expression": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.statement_if_true": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.print": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 1}}, "df": 7, "s": {"docs": {"src.lexer.Lexer.conditionals": {"tf": 1}}, "df": 1}}}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.add_context": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.add_context": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.virtual_machine.VirtualMachine.CONSTANT": {"tf": 1}}, "df": 1}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.certificators.abstract_certificator.AbstractCertificator.computed_certificate": {"tf": 1}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.lexer.Lexer.variable_count": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.virtual_machine.VirtualMachine.program_counter": {"tf": 1}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.current_symbol": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.current_value": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.current_statement_list": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.current_function_type": {"tf": 1}, "src.certificators.backend.BackendCertificator.current_positional_prime": {"tf": 1}, "src.certificators.backend.BackendCertificator.current_variable_prime": {"tf": 1}}, "df": 6}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.node.Node.certificate_label": {"tf": 1}, "src.ast_nodes.node.Node.get_certificate_label": {"tf": 1}, "src.ast_nodes.node.Node.certificate": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.certificate": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.get_certificate_label": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.computed_certificate": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.certificate": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.get_certificate": {"tf": 1}, "src.certificators.backend.BackendCertificator.certificate": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.certificate": {"tf": 1}, "src.utils.get_certificate_symbol": {"tf": 1}}, "df": 32}, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.runner.Charon.frontend_certificator": {"tf": 1}, "src.runner.Charon.backend_certificator": {"tf": 1}, "src.runner.Charon.get_frontend_certificator": {"tf": 1}, "src.runner.Charon.get_backend_certificator": {"tf": 1}}, "df": 4}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.basic.CST.CST": {"tf": 1}, "src.ast_nodes.basic.CST.CST.__init__": {"tf": 1}, "src.ast_nodes.basic.CST.CST.type": {"tf": 1}, "src.ast_nodes.basic.CST.CST.instruction": {"tf": 1}, "src.ast_nodes.basic.CST.CST.symbol": {"tf": 1}}, "df": 5}}, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"src.ast_nodes.basic.PROG.PROG.add_child": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.add_child": {"tf": 1}}, "df": 2, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"src.ast_nodes.basic.PROG.PROG.children": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.children": {"tf": 1}}, "df": 2}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.runner.Charon": {"tf": 1}, "src.runner.Charon.__init__": {"tf": 1}, "src.runner.Charon.parsed_source": {"tf": 1}, "src.runner.Charon.ast": {"tf": 1}, "src.runner.Charon.program": {"tf": 1}, "src.runner.Charon.vm": {"tf": 1}, "src.runner.Charon.frontend_certificator": {"tf": 1}, "src.runner.Charon.backend_certificator": {"tf": 1}, "src.runner.Charon.get_parsed_source": {"tf": 1}, "src.runner.Charon.get_ast": {"tf": 1}, "src.runner.Charon.get_program": {"tf": 1}, "src.runner.Charon.get_vm": {"tf": 1}, "src.runner.Charon.get_frontend_certificator": {"tf": 1}, "src.runner.Charon.get_backend_certificator": {"tf": 1}}, "df": 14}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"src.ast_nodes.functions.FUNC_CALL.FUNC_CALL": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.__init__": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.function_call_metadata": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.arguments": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.type": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.symbol": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 1}}, "df": 10}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"src.utils.type_cast": {"tf": 1}}, "df": 1}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}}, "df": 1}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"src.runner.create_instance": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.root": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.get_root": {"tf": 1}, "src.code_generator.CodeGenerator.root": {"tf": 1}}, "df": 3}}}, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.ast_nodes.node.Node.uses_register": {"tf": 1}, "src.certificators.backend.BackendCertificator.register_tracker": {"tf": 1}, "src.code_generator.CodeGenerator.register": {"tf": 1}}, "df": 3, "s": {"docs": {"src.virtual_machine.VirtualMachine.registers": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {"src.ast_nodes.functions.RET_SYM.RET_SYM": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.__init__": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.returned_value": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.type": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 1}}, "df": 8, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.ast_nodes.functions.RET_SYM.RET_SYM.returned_value": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.lexer.Lexer.reserved_words": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.operations.RSHIFT.RSHIFT": {"tf": 1}, "src.ast_nodes.operations.RSHIFT.RSHIFT.__init__": {"tf": 1}, "src.ast_nodes.operations.RSHIFT.RSHIFT.instruction": {"tf": 1}, "src.virtual_machine.VirtualMachine.RSHIFT": {"tf": 1}}, "df": 4}}}}}, "h": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.operations.operation.Operation.rhs": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "n": {"docs": {"src.virtual_machine.VirtualMachine.run": {"tf": 1}}, "df": 1}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.current_value": {"tf": 1}, "src.ast_nodes.node.Node.value": {"tf": 1}, "src.ast_nodes.node.Node.get_value": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.argument_value": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.returned_value": {"tf": 1}}, "df": 5}}}, "r": {"docs": {"src.ast_nodes.variables.VAR.VAR": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.__init__": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.variable_metadata": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.id": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.type": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.get_metadata": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.add_context": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.__init__": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.variable_metadata": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.instruction": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.size": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.symbol": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1}}, "df": 16, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.variable": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.variable_metadata": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.variable_metadata": {"tf": 1}, "src.certificators.backend.BackendCertificator.variable_prime_tracker": {"tf": 1}, "src.certificators.backend.BackendCertificator.current_variable_prime": {"tf": 1}, "src.lexer.Lexer.variable_count": {"tf": 1}, "src.lexer.Lexer.variable_prime": {"tf": 1}, "src.utils.get_variable_size": {"tf": 1}}, "df": 8, "s": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.parse_global_variables": {"tf": 1}, "src.code_generator.CodeGenerator.parse_global_variables": {"tf": 1}, "src.virtual_machine.VirtualMachine.variables": {"tf": 1}}, "df": 3}}}}}}}}, "m": {"docs": {"src.runner.Charon.vm": {"tf": 1}, "src.runner.Charon.get_vm": {"tf": 1}}, "df": 2}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"src.virtual_machine.VirtualMachine": {"tf": 1}, "src.virtual_machine.VirtualMachine.__init__": {"tf": 1}, "src.virtual_machine.VirtualMachine.program": {"tf": 1}, "src.virtual_machine.VirtualMachine.memory": {"tf": 1}, "src.virtual_machine.VirtualMachine.memory_size": {"tf": 1}, "src.virtual_machine.VirtualMachine.memory_pointer": {"tf": 1}, "src.virtual_machine.VirtualMachine.program_counter": {"tf": 1}, "src.virtual_machine.VirtualMachine.registers": {"tf": 1}, "src.virtual_machine.VirtualMachine.variables": {"tf": 1}, "src.virtual_machine.VirtualMachine.get_memory": {"tf": 1}, "src.virtual_machine.VirtualMachine.print": {"tf": 1}, "src.virtual_machine.VirtualMachine.run": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 1}, "src.virtual_machine.VirtualMachine.ALLOC": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.CONSTANT": {"tf": 1}, "src.virtual_machine.VirtualMachine.DIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FDIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FMULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 1}, "src.virtual_machine.VirtualMachine.FSUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.HALT": {"tf": 1}, "src.virtual_machine.VirtualMachine.JAL": {"tf": 1}, "src.virtual_machine.VirtualMachine.JR": {"tf": 1}, "src.virtual_machine.VirtualMachine.JZ": {"tf": 1}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1}, "src.virtual_machine.VirtualMachine.LSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOD": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOV": {"tf": 1}, "src.virtual_machine.VirtualMachine.MULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}, "src.virtual_machine.VirtualMachine.RSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SITOFP": {"tf": 1}, "src.virtual_machine.VirtualMachine.STORE": {"tf": 1}, "src.virtual_machine.VirtualMachine.SUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.TRUNC": {"tf": 1}}, "df": 52}}}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.current_statement_list": {"tf": 1}, "src.certificators.backend.BackendCertificator.bytecode_list": {"tf": 1}, "src.utils.primes_list": {"tf": 1}, "src.utils.flatten_list": {"tf": 1}}, "df": 4}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"src.ast_nodes.node.Node.certificate_label": {"tf": 1}, "src.ast_nodes.node.Node.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.get_certificate_label": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.get_certificate_label": {"tf": 1}}, "df": 13}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.operations.LESS.LESS": {"tf": 1}, "src.ast_nodes.operations.LESS.LESS.__init__": {"tf": 1}, "src.ast_nodes.operations.LESS.LESS.instruction": {"tf": 1}}, "df": 3}}, "x": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.lexer.Lexer": {"tf": 1}, "src.lexer.Lexer.__init__": {"tf": 1}, "src.lexer.Lexer.conditionals": {"tf": 1}, "src.lexer.Lexer.symbols": {"tf": 1}, "src.lexer.Lexer.operators": {"tf": 1}, "src.lexer.Lexer.types": {"tf": 1}, "src.lexer.Lexer.reserved_words": {"tf": 1}, "src.lexer.Lexer.source_code": {"tf": 1}, "src.lexer.Lexer.functions": {"tf": 1}, "src.lexer.Lexer.globals": {"tf": 1}, "src.lexer.Lexer.variable_count": {"tf": 1}, "src.lexer.Lexer.struct_prime": {"tf": 1}, "src.lexer.Lexer.variable_prime": {"tf": 1}, "src.lexer.Lexer.parse_source_code": {"tf": 1}, "src.lexer.Lexer.split_source": {"tf": 1}}, "df": 15}}}}, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.operations.LSHIFT.LSHIFT": {"tf": 1}, "src.ast_nodes.operations.LSHIFT.LSHIFT.__init__": {"tf": 1}, "src.ast_nodes.operations.LSHIFT.LSHIFT.instruction": {"tf": 1}, "src.virtual_machine.VirtualMachine.LSHIFT": {"tf": 1}}, "df": 4}}}}}, "h": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.operations.operation.Operation.lhs": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"src.virtual_machine.VirtualMachine.LOAD": {"tf": 1}}, "df": 1}}}, "t": {"docs": {"src.virtual_machine.VirtualMachine.LT": {"tf": 1}}, "df": 1}}, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"src.ast_nodes.functions.FUNC_CALL.FUNC_CALL": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.__init__": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.function_call_metadata": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.arguments": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.type": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.symbol": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.__init__": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.parameters": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.statements": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.set_statements": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_function_name": {"tf": 1}}, "df": 20, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.current_function_type": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.function_call_metadata": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_function_name": {"tf": 1}}, "df": 3, "s": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.parse_functions": {"tf": 1}, "src.certificators.backend.BackendCertificator.functions_primes": {"tf": 1}, "src.code_generator.CodeGenerator.parse_functions": {"tf": 1}, "src.lexer.Lexer.functions": {"tf": 1}}, "df": 4}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.conditionals.IFELSE.IFELSE.statement_if_false": {"tf": 1}}, "df": 1}}}, "d": {"docs": {}, "df": 0, "d": {"docs": {"src.virtual_machine.VirtualMachine.FADD": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"src.virtual_machine.VirtualMachine.FAND": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.operations.operation.Operation.supports_float": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"src.utils.flatten_list": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {"src.virtual_machine.VirtualMachine.FLT": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"src.runner.Charon.frontend_certificator": {"tf": 1}, "src.runner.Charon.get_frontend_certificator": {"tf": 1}}, "df": 2, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.certificators.frontend.FrontendCertificator": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.__init__": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.ast": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.initial_prime": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.certificate": {"tf": 1}}, "df": 5}}}}}}}}}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {"src.virtual_machine.VirtualMachine.FDIV": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "q": {"docs": {"src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}}, "df": 1}}, "g": {"docs": {}, "df": 0, "t": {"docs": {"src.virtual_machine.VirtualMachine.FGT": {"tf": 1}}, "df": 1}}, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"src.virtual_machine.VirtualMachine.FMULT": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {"src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.virtual_machine.VirtualMachine.FOR": {"tf": 1}}, "df": 1}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {"src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "b": {"docs": {"src.virtual_machine.VirtualMachine.FSUB": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.current_function_type": {"tf": 1}, "src.ast_nodes.node.Node.type": {"tf": 1}, "src.ast_nodes.node.Node.get_type": {"tf": 1}, "src.ast_nodes.basic.CST.CST.type": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.parameter_type": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.type": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.type": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.type": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.type": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.access_type": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.type": {"tf": 1}, "src.utils.type_cast": {"tf": 1}, "src.utils.TYPE_SYMBOLS_MAP": {"tf": 1}}, "df": 13, "s": {"docs": {"src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_attribute_types": {"tf": 1}, "src.lexer.Lexer.types": {"tf": 1}, "src.utils.builtin_types": {"tf": 1}}, "df": 3}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.print_tree": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.conditionals.conditional.Conditional.statement_if_true": {"tf": 1}}, "df": 1}, "n": {"docs": {}, "df": 0, "c": {"docs": {"src.virtual_machine.VirtualMachine.TRUNC": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.certificators.backend.BackendCertificator.register_tracker": {"tf": 1}, "src.certificators.backend.BackendCertificator.variable_prime_tracker": {"tf": 1}}, "df": 2}}}}}}, "o": {"docs": {"src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1}, "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING": {"tf": 1}}, "df": 2}}, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.build": {"tf": 1}}, "df": 1}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"src.utils.builtin_types": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"src.ast_nodes.operations.BITAND.BITAND": {"tf": 1}, "src.ast_nodes.operations.BITAND.BITAND.__init__": {"tf": 1}, "src.ast_nodes.operations.BITAND.BITAND.instruction": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITAND": {"tf": 1}}, "df": 4}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.ast_nodes.operations.BITOR.BITOR": {"tf": 1}, "src.ast_nodes.operations.BITOR.BITOR.__init__": {"tf": 1}, "src.ast_nodes.operations.BITOR.BITOR.instruction": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITOR": {"tf": 1}}, "df": 4}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"src.runner.Charon.backend_certificator": {"tf": 1}, "src.runner.Charon.get_backend_certificator": {"tf": 1}}, "df": 2, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.certificators.backend.BackendCertificator": {"tf": 1}, "src.certificators.backend.BackendCertificator.__init__": {"tf": 1}, "src.certificators.backend.BackendCertificator.program": {"tf": 1}, "src.certificators.backend.BackendCertificator.bytecode_list": {"tf": 1}, "src.certificators.backend.BackendCertificator.register_tracker": {"tf": 1}, "src.certificators.backend.BackendCertificator.variable_prime_tracker": {"tf": 1}, "src.certificators.backend.BackendCertificator.current_positional_prime": {"tf": 1}, "src.certificators.backend.BackendCertificator.current_variable_prime": {"tf": 1}, "src.certificators.backend.BackendCertificator.functions_primes": {"tf": 1}, "src.certificators.backend.BackendCertificator.instruction_status": {"tf": 1}, "src.certificators.backend.BackendCertificator.special_instructions_handlers": {"tf": 1}, "src.certificators.backend.BackendCertificator.grouped_instructions_handlers": {"tf": 1}, "src.certificators.backend.BackendCertificator.certificate": {"tf": 1}}, "df": 13}}}}}}}}}}}}}}}}}}, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"src.certificators.backend.BackendCertificator.bytecode_list": {"tf": 1}}, "df": 1}}}}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.parse_struct_definitions": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_global_variables": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_functions": {"tf": 1}, "src.code_generator.CodeGenerator.parse_struct_definitions": {"tf": 1}, "src.code_generator.CodeGenerator.parse_global_variables": {"tf": 1}, "src.code_generator.CodeGenerator.parse_functions": {"tf": 1}, "src.lexer.Lexer.parse_source_code": {"tf": 1}}, "df": 7, "d": {"docs": {"src.runner.Charon.parsed_source": {"tf": 1}, "src.runner.Charon.get_parsed_source": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.conditionals.conditional.Conditional.parenthesis_expression": {"tf": 1}}, "df": 1}}}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {"src.ast_nodes.functions.PARAM.PARAM": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.__init__": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1}}, "df": 3, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.ast_nodes.functions.ARG.ARG.parameter_type": {"tf": 1}}, "df": 1, "s": {"docs": {"src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.parameters": {"tf": 1}}, "df": 1}}}}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.print_tree": {"tf": 1}, "src.ast_nodes.node.Node.print": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.print": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.print": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.print": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.print": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.print": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.print": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 1}, "src.code_generator.CodeGenerator.print": {"tf": 1}, "src.virtual_machine.VirtualMachine.print": {"tf": 1}}, "df": 17}}, "m": {"docs": {}, "df": 0, "e": {"docs": {"src.certificators.abstract_certificator.AbstractCertificator.initial_prime": {"tf": 1}, "src.certificators.backend.BackendCertificator.variable_prime_tracker": {"tf": 1}, "src.certificators.backend.BackendCertificator.current_positional_prime": {"tf": 1}, "src.certificators.backend.BackendCertificator.current_variable_prime": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.initial_prime": {"tf": 1}, "src.lexer.Lexer.struct_prime": {"tf": 1}, "src.lexer.Lexer.variable_prime": {"tf": 1}, "src.utils.is_prime": {"tf": 1}, "src.utils.next_prime": {"tf": 1}, "src.utils.previous_prime": {"tf": 1}}, "df": 10, "s": {"docs": {"src.certificators.backend.BackendCertificator.functions_primes": {"tf": 1}, "src.utils.primes_list": {"tf": 1}}, "df": 2}}}}, "o": {"docs": {}, "df": 0, "g": {"docs": {"src.ast_nodes.basic.PROG.PROG": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.instruction": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.children": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.add_child": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.print": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.certificate": {"tf": 1}}, "df": 8, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {"src.certificators.backend.BackendCertificator.program": {"tf": 1}, "src.code_generator.CodeGenerator.program": {"tf": 1}, "src.code_generator.CodeGenerator.get_program": {"tf": 1}, "src.runner.Charon.program": {"tf": 1}, "src.runner.Charon.get_program": {"tf": 1}, "src.virtual_machine.VirtualMachine.program": {"tf": 1}, "src.virtual_machine.VirtualMachine.program_counter": {"tf": 1}}, "df": 7}}}}}, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"src.utils.previous_prime": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.certificators.backend.BackendCertificator.current_positional_prime": {"tf": 1}}, "df": 1}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.virtual_machine.VirtualMachine.memory_pointer": {"tf": 1}}, "df": 1}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {"src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.__init__": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.parameters": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.statements": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.set_statements": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_function_name": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.__init__": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.active": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.struct_metadata": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_symbol": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_attribute_types": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.is_active": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.__init__": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.variable_metadata": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.instruction": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.size": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.symbol": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1}}, "df": 28, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.parse_struct_definitions": {"tf": 1}, "src.code_generator.CodeGenerator.parse_struct_definitions": {"tf": 1}}, "df": 2}}}}}}}}}}, "o": {"docs": {"src.ast_nodes.conditionals.DO.DO": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.__init__": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 1}}, "df": 5}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {"src.ast_nodes.operations.DIFF.DIFF": {"tf": 1}, "src.ast_nodes.operations.DIFF.DIFF.__init__": {"tf": 1}, "src.ast_nodes.operations.DIFF.DIFF.instruction": {"tf": 1}}, "df": 3}}, "v": {"docs": {"src.ast_nodes.operations.DIV.DIV": {"tf": 1}, "src.ast_nodes.operations.DIV.DIV.__init__": {"tf": 1}, "src.ast_nodes.operations.DIV.DIV.instruction": {"tf": 1}, "src.virtual_machine.VirtualMachine.DIV": {"tf": 1}}, "df": 4}}}, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.parse_global_variables": {"tf": 1}, "src.code_generator.CodeGenerator.parse_global_variables": {"tf": 1}}, "df": 2, "s": {"docs": {"src.lexer.Lexer.globals": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.get_root": {"tf": 1}, "src.ast_nodes.node.Node.get_value": {"tf": 1}, "src.ast_nodes.node.Node.get_type": {"tf": 1}, "src.ast_nodes.node.Node.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_function_name": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.get_certificate_label": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.get_certificate_label": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_symbol": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_attribute_types": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.get_metadata": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.get_certificate": {"tf": 1}, "src.code_generator.CodeGenerator.get_program": {"tf": 1}, "src.runner.Charon.get_parsed_source": {"tf": 1}, "src.runner.Charon.get_ast": {"tf": 1}, "src.runner.Charon.get_program": {"tf": 1}, "src.runner.Charon.get_vm": {"tf": 1}, "src.runner.Charon.get_frontend_certificator": {"tf": 1}, "src.runner.Charon.get_backend_certificator": {"tf": 1}, "src.utils.get_variable_size": {"tf": 1}, "src.utils.get_certificate_symbol": {"tf": 1}, "src.virtual_machine.VirtualMachine.get_memory": {"tf": 1}}, "df": 30}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.node.Node.generate_code": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1}, "src.code_generator.CodeGenerator.generate_code": {"tf": 1}}, "df": 20}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.ast_nodes.operations.GREATER.GREATER": {"tf": 1}, "src.ast_nodes.operations.GREATER.GREATER.__init__": {"tf": 1}, "src.ast_nodes.operations.GREATER.GREATER.instruction": {"tf": 1}}, "df": 3}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.certificators.backend.BackendCertificator.grouped_instructions_handlers": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {"src.virtual_machine.VirtualMachine.GT": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.node.Node": {"tf": 1}, "src.ast_nodes.node.Node.__init__": {"tf": 1}, "src.ast_nodes.node.Node.value": {"tf": 1}, "src.ast_nodes.node.Node.type": {"tf": 1}, "src.ast_nodes.node.Node.certificate_label": {"tf": 1}, "src.ast_nodes.node.Node.uses_register": {"tf": 1}, "src.ast_nodes.node.Node.instruction": {"tf": 1}, "src.ast_nodes.node.Node.symbol": {"tf": 1}, "src.ast_nodes.node.Node.get_value": {"tf": 1}, "src.ast_nodes.node.Node.get_type": {"tf": 1}, "src.ast_nodes.node.Node.get_certificate_label": {"tf": 1}, "src.ast_nodes.node.Node.print": {"tf": 1}, "src.ast_nodes.node.Node.generate_code": {"tf": 1}, "src.ast_nodes.node.Node.certificate": {"tf": 1}, "src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1}, "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING": {"tf": 1}}, "df": 16}}, "t": {"docs": {"src.ast_nodes.operations.NOT.NOT": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.__init__": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.expression": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.symbol": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.instruction": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.type": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.get_certificate_label": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.print": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}}, "df": 10}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_function_name": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {"src.utils.next_prime": {"tf": 1}}, "df": 1}}, "q": {"docs": {"src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.node.Node.uses_register": {"tf": 1}}, "df": 1}}}}, "w": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.conditionals.WHILE.WHILE": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.__init__": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}}, "df": 4}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"src.lexer.Lexer.reserved_words": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.ast_nodes.conditionals.conditional.Conditional.parenthesis_expression": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.expression": {"tf": 1}}, "df": 2}}}}}}}}}, "q": {"docs": {"src.virtual_machine.VirtualMachine.EQ": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.ast_nodes.operations.EQUAL.EQUAL": {"tf": 1}, "src.ast_nodes.operations.EQUAL.EQUAL.__init__": {"tf": 1}, "src.ast_nodes.operations.EQUAL.EQUAL.instruction": {"tf": 1}}, "df": 3}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.__init__": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.is_array": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.is_struct": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.variable": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.element": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.type": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.access_type": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.element_offset": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.add_context": {"tf": 1}}, "df": 13}}}}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.function_call_metadata": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.struct_metadata": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.variable_metadata": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.get_metadata": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.variable_metadata": {"tf": 1}}, "df": 5}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"src.virtual_machine.VirtualMachine.memory": {"tf": 1}, "src.virtual_machine.VirtualMachine.memory_size": {"tf": 1}, "src.virtual_machine.VirtualMachine.memory_pointer": {"tf": 1}, "src.virtual_machine.VirtualMachine.get_memory": {"tf": 1}}, "df": 4}}}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {"src.ast_nodes.operations.MOD.MOD": {"tf": 1}, "src.ast_nodes.operations.MOD.MOD.__init__": {"tf": 1}, "src.ast_nodes.operations.MOD.MOD.instruction": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOD": {"tf": 1}}, "df": 4}, "v": {"docs": {"src.virtual_machine.VirtualMachine.MOV": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.operations.MULT.MULT": {"tf": 1}, "src.ast_nodes.operations.MULT.MULT.__init__": {"tf": 1}, "src.ast_nodes.operations.MULT.MULT.instruction": {"tf": 1}, "src.virtual_machine.VirtualMachine.MULT": {"tf": 1}}, "df": 4}}}, "a": {"docs": {}, "df": 0, "p": {"docs": {"src.utils.SYMBOLS_MAP": {"tf": 1}, "src.utils.TYPE_SYMBOLS_MAP": {"tf": 1}}, "df": 2, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1}, "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING": {"tf": 1}}, "df": 2}}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.ast_nodes.operations.OR.OR": {"tf": 1}, "src.ast_nodes.operations.OR.OR.__init__": {"tf": 1}, "src.ast_nodes.operations.OR.OR.instruction": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}}, "df": 4}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.ast_nodes.operations.operation.Operation": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.__init__": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.lhs": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.rhs": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.supports_float": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.print": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 1}, "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING": {"tf": 1}}, "df": 9}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"src.lexer.Lexer.operators": {"tf": 1}}, "df": 1}}}}}}}}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.element_offset": {"tf": 1}}, "df": 1}}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"src.certificators.backend.BackendCertificator.special_instructions_handlers": {"tf": 1}, "src.certificators.backend.BackendCertificator.grouped_instructions_handlers": {"tf": 1}}, "df": 2}}}}}}, "l": {"docs": {}, "df": 0, "t": {"docs": {"src.virtual_machine.VirtualMachine.HALT": {"tf": 1}}, "df": 1}}}}, "j": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.virtual_machine.VirtualMachine.JAL": {"tf": 1}}, "df": 1}}, "r": {"docs": {"src.virtual_machine.VirtualMachine.JR": {"tf": 1}}, "df": 1}, "z": {"docs": {"src.virtual_machine.VirtualMachine.JZ": {"tf": 1}}, "df": 1}}}}, "fullname": {"root": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.__init__": {"tf": 1}, "src.ast_nodes.node.Node.__init__": {"tf": 1}, "src.ast_nodes.basic.CST.CST.__init__": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.__init__": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.__init__": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.__init__": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.__init__": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.__init__": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.__init__": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.__init__": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.__init__": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.__init__": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.__init__": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.__init__": {"tf": 1}, "src.ast_nodes.operations.ADD.ADD.__init__": {"tf": 1}, "src.ast_nodes.operations.AND.AND.__init__": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.__init__": {"tf": 1}, "src.ast_nodes.operations.BITAND.BITAND.__init__": {"tf": 1}, "src.ast_nodes.operations.BITOR.BITOR.__init__": {"tf": 1}, "src.ast_nodes.operations.DIFF.DIFF.__init__": {"tf": 1}, "src.ast_nodes.operations.DIV.DIV.__init__": {"tf": 1}, "src.ast_nodes.operations.EQUAL.EQUAL.__init__": {"tf": 1}, "src.ast_nodes.operations.GREATER.GREATER.__init__": {"tf": 1}, "src.ast_nodes.operations.LESS.LESS.__init__": {"tf": 1}, "src.ast_nodes.operations.LSHIFT.LSHIFT.__init__": {"tf": 1}, "src.ast_nodes.operations.MOD.MOD.__init__": {"tf": 1}, "src.ast_nodes.operations.MULT.MULT.__init__": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.__init__": {"tf": 1}, "src.ast_nodes.operations.OR.OR.__init__": {"tf": 1}, "src.ast_nodes.operations.RSHIFT.RSHIFT.__init__": {"tf": 1}, "src.ast_nodes.operations.SUB.SUB.__init__": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.__init__": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.__init__": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.__init__": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.__init__": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.__init__": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.__init__": {"tf": 1}, "src.certificators.backend.BackendCertificator.__init__": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.__init__": {"tf": 1}, "src.code_generator.CodeGenerator.__init__": {"tf": 1}, "src.lexer.Lexer.__init__": {"tf": 1}, "src.runner.Charon.__init__": {"tf": 1}, "src.virtual_machine.VirtualMachine.__init__": {"tf": 1}}, "df": 43, "s": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {"src": {"tf": 1}, "src.abstract_syntax_tree": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.__init__": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.source_code": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.root": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.current_symbol": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.current_value": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.current_statement_list": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.current_function_type": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.build": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_struct_definitions": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_global_variables": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_functions": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.print_tree": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.get_root": {"tf": 1}, "src.ast_nodes": {"tf": 1}, "src.ast_nodes.node": {"tf": 1}, "src.ast_nodes.node.Node": {"tf": 1}, "src.ast_nodes.node.Node.__init__": {"tf": 1}, "src.ast_nodes.node.Node.value": {"tf": 1}, "src.ast_nodes.node.Node.type": {"tf": 1}, "src.ast_nodes.node.Node.certificate_label": {"tf": 1}, "src.ast_nodes.node.Node.uses_register": {"tf": 1}, "src.ast_nodes.node.Node.instruction": {"tf": 1}, "src.ast_nodes.node.Node.symbol": {"tf": 1}, "src.ast_nodes.node.Node.get_value": {"tf": 1}, "src.ast_nodes.node.Node.get_type": {"tf": 1}, "src.ast_nodes.node.Node.get_certificate_label": {"tf": 1}, "src.ast_nodes.node.Node.print": {"tf": 1}, "src.ast_nodes.node.Node.generate_code": {"tf": 1}, "src.ast_nodes.node.Node.certificate": {"tf": 1}, "src.ast_nodes.basic": {"tf": 1}, "src.ast_nodes.basic.CST": {"tf": 1}, "src.ast_nodes.basic.CST.CST": {"tf": 1}, "src.ast_nodes.basic.CST.CST.__init__": {"tf": 1}, "src.ast_nodes.basic.CST.CST.type": {"tf": 1}, "src.ast_nodes.basic.CST.CST.instruction": {"tf": 1}, "src.ast_nodes.basic.CST.CST.symbol": {"tf": 1}, "src.ast_nodes.basic.PROG": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.instruction": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.children": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.add_child": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.print": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.certificate": {"tf": 1}, "src.ast_nodes.basic.SEQ": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.__init__": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.children": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.add_child": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.print": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1}, "src.ast_nodes.conditionals": {"tf": 1}, "src.ast_nodes.conditionals.DO": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.__init__": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 1}, "src.ast_nodes.conditionals.IF": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.__init__": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.__init__": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.statement_if_false": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.print": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1}, "src.ast_nodes.conditionals.WHILE": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.__init__": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.conditional": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.__init__": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.parenthesis_expression": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.statement_if_true": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.print": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 1}, "src.ast_nodes.functions": {"tf": 1}, "src.ast_nodes.functions.ARG": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.__init__": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.argument_value": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.parameter_type": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.print": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.__init__": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.function_call_metadata": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.arguments": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.type": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.symbol": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.__init__": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.parameters": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.statements": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.set_statements": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_function_name": {"tf": 1}, "src.ast_nodes.functions.PARAM": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.__init__": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.__init__": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.returned_value": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.type": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 1}, "src.ast_nodes.operations": {"tf": 1}, "src.ast_nodes.operations.ADD": {"tf": 1}, "src.ast_nodes.operations.ADD.ADD": {"tf": 1}, "src.ast_nodes.operations.ADD.ADD.__init__": {"tf": 1}, "src.ast_nodes.operations.ADD.ADD.instruction": {"tf": 1}, "src.ast_nodes.operations.AND": {"tf": 1}, "src.ast_nodes.operations.AND.AND": {"tf": 1}, "src.ast_nodes.operations.AND.AND.__init__": {"tf": 1}, "src.ast_nodes.operations.AND.AND.instruction": {"tf": 1}, "src.ast_nodes.operations.ASSIGN": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.__init__": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.instruction": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}, "src.ast_nodes.operations.BITAND": {"tf": 1}, "src.ast_nodes.operations.BITAND.BITAND": {"tf": 1}, "src.ast_nodes.operations.BITAND.BITAND.__init__": {"tf": 1}, "src.ast_nodes.operations.BITAND.BITAND.instruction": {"tf": 1}, "src.ast_nodes.operations.BITOR": {"tf": 1}, "src.ast_nodes.operations.BITOR.BITOR": {"tf": 1}, "src.ast_nodes.operations.BITOR.BITOR.__init__": {"tf": 1}, "src.ast_nodes.operations.BITOR.BITOR.instruction": {"tf": 1}, "src.ast_nodes.operations.DIFF": {"tf": 1}, "src.ast_nodes.operations.DIFF.DIFF": {"tf": 1}, "src.ast_nodes.operations.DIFF.DIFF.__init__": {"tf": 1}, "src.ast_nodes.operations.DIFF.DIFF.instruction": {"tf": 1}, "src.ast_nodes.operations.DIV": {"tf": 1}, "src.ast_nodes.operations.DIV.DIV": {"tf": 1}, "src.ast_nodes.operations.DIV.DIV.__init__": {"tf": 1}, "src.ast_nodes.operations.DIV.DIV.instruction": {"tf": 1}, "src.ast_nodes.operations.EQUAL": {"tf": 1}, "src.ast_nodes.operations.EQUAL.EQUAL": {"tf": 1}, "src.ast_nodes.operations.EQUAL.EQUAL.__init__": {"tf": 1}, "src.ast_nodes.operations.EQUAL.EQUAL.instruction": {"tf": 1}, "src.ast_nodes.operations.GREATER": {"tf": 1}, "src.ast_nodes.operations.GREATER.GREATER": {"tf": 1}, "src.ast_nodes.operations.GREATER.GREATER.__init__": {"tf": 1}, "src.ast_nodes.operations.GREATER.GREATER.instruction": {"tf": 1}, "src.ast_nodes.operations.LESS": {"tf": 1}, "src.ast_nodes.operations.LESS.LESS": {"tf": 1}, "src.ast_nodes.operations.LESS.LESS.__init__": {"tf": 1}, "src.ast_nodes.operations.LESS.LESS.instruction": {"tf": 1}, "src.ast_nodes.operations.LSHIFT": {"tf": 1}, "src.ast_nodes.operations.LSHIFT.LSHIFT": {"tf": 1}, "src.ast_nodes.operations.LSHIFT.LSHIFT.__init__": {"tf": 1}, "src.ast_nodes.operations.LSHIFT.LSHIFT.instruction": {"tf": 1}, "src.ast_nodes.operations.MOD": {"tf": 1}, "src.ast_nodes.operations.MOD.MOD": {"tf": 1}, "src.ast_nodes.operations.MOD.MOD.__init__": {"tf": 1}, "src.ast_nodes.operations.MOD.MOD.instruction": {"tf": 1}, "src.ast_nodes.operations.MULT": {"tf": 1}, "src.ast_nodes.operations.MULT.MULT": {"tf": 1}, "src.ast_nodes.operations.MULT.MULT.__init__": {"tf": 1}, "src.ast_nodes.operations.MULT.MULT.instruction": {"tf": 1}, "src.ast_nodes.operations.NOT": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.__init__": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.expression": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.symbol": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.instruction": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.type": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.get_certificate_label": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.print": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1}, "src.ast_nodes.operations.OR": {"tf": 1}, "src.ast_nodes.operations.OR.OR": {"tf": 1}, "src.ast_nodes.operations.OR.OR.__init__": {"tf": 1}, "src.ast_nodes.operations.OR.OR.instruction": {"tf": 1}, "src.ast_nodes.operations.RSHIFT": {"tf": 1}, "src.ast_nodes.operations.RSHIFT.RSHIFT": {"tf": 1}, "src.ast_nodes.operations.RSHIFT.RSHIFT.__init__": {"tf": 1}, "src.ast_nodes.operations.RSHIFT.RSHIFT.instruction": {"tf": 1}, "src.ast_nodes.operations.SUB": {"tf": 1}, "src.ast_nodes.operations.SUB.SUB": {"tf": 1}, "src.ast_nodes.operations.SUB.SUB.__init__": {"tf": 1}, "src.ast_nodes.operations.SUB.SUB.instruction": {"tf": 1}, "src.ast_nodes.operations.operation": {"tf": 1}, "src.ast_nodes.operations.operation.Operation": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.__init__": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.lhs": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.rhs": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.supports_float": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.print": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 1}, "src.ast_nodes.variables": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.__init__": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.is_array": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.is_struct": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.variable": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.element": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.type": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.access_type": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.element_offset": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.add_context": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.__init__": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.active": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.struct_metadata": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_symbol": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_attribute_types": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.is_active": {"tf": 1}, "src.ast_nodes.variables.VAR": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.__init__": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.variable_metadata": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.id": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.type": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.get_metadata": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.add_context": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.__init__": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.variable_metadata": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.instruction": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.size": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.symbol": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1}, "src.certificators": {"tf": 1}, "src.certificators.abstract_certificator": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.__init__": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.computed_certificate": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.initial_prime": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.certificate": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.get_certificate": {"tf": 1}, "src.certificators.backend": {"tf": 1}, "src.certificators.backend.BackendCertificator": {"tf": 1}, "src.certificators.backend.BackendCertificator.__init__": {"tf": 1}, "src.certificators.backend.BackendCertificator.program": {"tf": 1}, "src.certificators.backend.BackendCertificator.bytecode_list": {"tf": 1}, "src.certificators.backend.BackendCertificator.register_tracker": {"tf": 1}, "src.certificators.backend.BackendCertificator.variable_prime_tracker": {"tf": 1}, "src.certificators.backend.BackendCertificator.current_positional_prime": {"tf": 1}, "src.certificators.backend.BackendCertificator.current_variable_prime": {"tf": 1}, "src.certificators.backend.BackendCertificator.functions_primes": {"tf": 1}, "src.certificators.backend.BackendCertificator.instruction_status": {"tf": 1}, "src.certificators.backend.BackendCertificator.special_instructions_handlers": {"tf": 1}, "src.certificators.backend.BackendCertificator.grouped_instructions_handlers": {"tf": 1}, "src.certificators.backend.BackendCertificator.certificate": {"tf": 1}, "src.certificators.frontend": {"tf": 1}, "src.certificators.frontend.FrontendCertificator": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.__init__": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.ast": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.initial_prime": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.certificate": {"tf": 1}, "src.code_generator": {"tf": 1}, "src.code_generator.CodeGenerator": {"tf": 1}, "src.code_generator.CodeGenerator.__init__": {"tf": 1}, "src.code_generator.CodeGenerator.root": {"tf": 1}, "src.code_generator.CodeGenerator.program": {"tf": 1}, "src.code_generator.CodeGenerator.register": {"tf": 1}, "src.code_generator.CodeGenerator.print": {"tf": 1}, "src.code_generator.CodeGenerator.generate_code": {"tf": 1}, "src.code_generator.CodeGenerator.parse_struct_definitions": {"tf": 1}, "src.code_generator.CodeGenerator.parse_global_variables": {"tf": 1}, "src.code_generator.CodeGenerator.parse_functions": {"tf": 1}, "src.code_generator.CodeGenerator.get_program": {"tf": 1}, "src.lexer": {"tf": 1}, "src.lexer.Lexer": {"tf": 1}, "src.lexer.Lexer.__init__": {"tf": 1}, "src.lexer.Lexer.conditionals": {"tf": 1}, "src.lexer.Lexer.symbols": {"tf": 1}, "src.lexer.Lexer.operators": {"tf": 1}, "src.lexer.Lexer.types": {"tf": 1}, "src.lexer.Lexer.reserved_words": {"tf": 1}, "src.lexer.Lexer.source_code": {"tf": 1}, "src.lexer.Lexer.functions": {"tf": 1}, "src.lexer.Lexer.globals": {"tf": 1}, "src.lexer.Lexer.variable_count": {"tf": 1}, "src.lexer.Lexer.struct_prime": {"tf": 1}, "src.lexer.Lexer.variable_prime": {"tf": 1}, "src.lexer.Lexer.parse_source_code": {"tf": 1}, "src.lexer.Lexer.split_source": {"tf": 1}, "src.runner": {"tf": 1}, "src.runner.Charon": {"tf": 1}, "src.runner.Charon.__init__": {"tf": 1}, "src.runner.Charon.parsed_source": {"tf": 1}, "src.runner.Charon.ast": {"tf": 1}, "src.runner.Charon.program": {"tf": 1}, "src.runner.Charon.vm": {"tf": 1}, "src.runner.Charon.frontend_certificator": {"tf": 1}, "src.runner.Charon.backend_certificator": {"tf": 1}, "src.runner.Charon.get_parsed_source": {"tf": 1}, "src.runner.Charon.get_ast": {"tf": 1}, "src.runner.Charon.get_program": {"tf": 1}, "src.runner.Charon.get_vm": {"tf": 1}, "src.runner.Charon.get_frontend_certificator": {"tf": 1}, "src.runner.Charon.get_backend_certificator": {"tf": 1}, "src.runner.create_instance": {"tf": 1}, "src.utils": {"tf": 1}, "src.utils.builtin_types": {"tf": 1}, "src.utils.is_prime": {"tf": 1}, "src.utils.next_prime": {"tf": 1}, "src.utils.previous_prime": {"tf": 1}, "src.utils.primes_list": {"tf": 1}, "src.utils.type_cast": {"tf": 1}, "src.utils.get_variable_size": {"tf": 1}, "src.utils.flatten_list": {"tf": 1}, "src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1}, "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING": {"tf": 1}, "src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}, "src.utils.SYMBOLS_MAP": {"tf": 1}, "src.utils.TYPE_SYMBOLS_MAP": {"tf": 1}, "src.utils.get_certificate_symbol": {"tf": 1}, "src.virtual_machine": {"tf": 1}, "src.virtual_machine.VirtualMachine": {"tf": 1}, "src.virtual_machine.VirtualMachine.__init__": {"tf": 1}, "src.virtual_machine.VirtualMachine.program": {"tf": 1}, "src.virtual_machine.VirtualMachine.memory": {"tf": 1}, "src.virtual_machine.VirtualMachine.memory_size": {"tf": 1}, "src.virtual_machine.VirtualMachine.memory_pointer": {"tf": 1}, "src.virtual_machine.VirtualMachine.program_counter": {"tf": 1}, "src.virtual_machine.VirtualMachine.registers": {"tf": 1}, "src.virtual_machine.VirtualMachine.variables": {"tf": 1}, "src.virtual_machine.VirtualMachine.get_memory": {"tf": 1}, "src.virtual_machine.VirtualMachine.print": {"tf": 1}, "src.virtual_machine.VirtualMachine.run": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 1}, "src.virtual_machine.VirtualMachine.ALLOC": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.CONSTANT": {"tf": 1}, "src.virtual_machine.VirtualMachine.DIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FDIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FMULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 1}, "src.virtual_machine.VirtualMachine.FSUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.HALT": {"tf": 1}, "src.virtual_machine.VirtualMachine.JAL": {"tf": 1}, "src.virtual_machine.VirtualMachine.JR": {"tf": 1}, "src.virtual_machine.VirtualMachine.JZ": {"tf": 1}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1}, "src.virtual_machine.VirtualMachine.LSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOD": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOV": {"tf": 1}, "src.virtual_machine.VirtualMachine.MULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}, "src.virtual_machine.VirtualMachine.RSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SITOFP": {"tf": 1}, "src.virtual_machine.VirtualMachine.STORE": {"tf": 1}, "src.virtual_machine.VirtualMachine.SUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.TRUNC": {"tf": 1}}, "df": 403}}, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "x": {"docs": {"src.abstract_syntax_tree": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.__init__": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.source_code": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.root": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.current_symbol": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.current_value": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.current_statement_list": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.current_function_type": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.build": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_struct_definitions": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_global_variables": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_functions": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.print_tree": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.get_root": {"tf": 1}}, "df": 15}}}}, "m": {"docs": {"src.ast_nodes.functions.RET_SYM": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.RET_SYM.RET_SYM.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.RET_SYM.RET_SYM.returned_value": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.RET_SYM.RET_SYM.type": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.RET_SYM.RET_SYM.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 1.4142135623730951}}, "df": 9, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.current_symbol": {"tf": 1}, "src.ast_nodes.node.Node.symbol": {"tf": 1}, "src.ast_nodes.basic.CST.CST.symbol": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.symbol": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.symbol": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_symbol": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.symbol": {"tf": 1}, "src.utils.get_certificate_symbol": {"tf": 1}}, "df": 8, "s": {"docs": {"src.lexer.Lexer.symbols": {"tf": 1}, "src.utils.SYMBOLS_MAP": {"tf": 1}, "src.utils.TYPE_SYMBOLS_MAP": {"tf": 1}}, "df": 3}}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.source_code": {"tf": 1}, "src.lexer.Lexer.source_code": {"tf": 1}, "src.lexer.Lexer.parse_source_code": {"tf": 1}, "src.lexer.Lexer.split_source": {"tf": 1}, "src.runner.Charon.parsed_source": {"tf": 1}, "src.runner.Charon.get_parsed_source": {"tf": 1}}, "df": 6}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.current_statement_list": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.statement_if_false": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.statement_if_true": {"tf": 1}}, "df": 3, "s": {"docs": {"src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.statements": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.set_statements": {"tf": 1}}, "df": 2}}}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {"src.certificators.backend.BackendCertificator.instruction_status": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.parse_struct_definitions": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.is_struct": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.active": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.struct_metadata": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_symbol": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_attribute_types": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.is_active": {"tf": 1.4142135623730951}, "src.code_generator.CodeGenerator.parse_struct_definitions": {"tf": 1}, "src.lexer.Lexer.struct_prime": {"tf": 1}}, "df": 15}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"src.virtual_machine.VirtualMachine.STORE": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "q": {"docs": {"src.ast_nodes.basic.SEQ": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.SEQ.SEQ.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.SEQ.SEQ.children": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.SEQ.SEQ.add_child": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.SEQ.SEQ.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.SEQ.SEQ.print": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1.4142135623730951}}, "df": 9}, "t": {"docs": {"src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.set_statements": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "b": {"docs": {"src.ast_nodes.operations.SUB": {"tf": 1}, "src.ast_nodes.operations.SUB.SUB": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.SUB.SUB.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.SUB.SUB.instruction": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.SUB": {"tf": 1}}, "df": 5}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.operations.operation.Operation.supports_float": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.variables.VAR_DEF.VAR_DEF.size": {"tf": 1}, "src.utils.get_variable_size": {"tf": 1}, "src.virtual_machine.VirtualMachine.memory_size": {"tf": 1}}, "df": 3}}, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {"src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "p": {"docs": {"src.virtual_machine.VirtualMachine.SITOFP": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.certificators.backend.BackendCertificator.special_instructions_handlers": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"src.lexer.Lexer.split_source": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"src.abstract_syntax_tree": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.__init__": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.source_code": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.root": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.current_symbol": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.current_value": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.current_statement_list": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.current_function_type": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.build": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_struct_definitions": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_global_variables": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_functions": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.print_tree": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.get_root": {"tf": 1}, "src.certificators.abstract_certificator": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.__init__": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.computed_certificate": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.initial_prime": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.certificate": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.get_certificate": {"tf": 1}}, "df": 22, "s": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.__init__": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.source_code": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.root": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.current_symbol": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.current_value": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.current_statement_list": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.current_function_type": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.build": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_struct_definitions": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_global_variables": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_functions": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.print_tree": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.get_root": {"tf": 1}}, "df": 14}}}}}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.certificators.abstract_certificator.AbstractCertificator": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.__init__": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.computed_certificate": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.initial_prime": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.certificate": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.get_certificate": {"tf": 1}}, "df": 6}}}}}}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes": {"tf": 1}, "src.ast_nodes.node": {"tf": 1}, "src.ast_nodes.node.Node": {"tf": 1}, "src.ast_nodes.node.Node.__init__": {"tf": 1}, "src.ast_nodes.node.Node.value": {"tf": 1}, "src.ast_nodes.node.Node.type": {"tf": 1}, "src.ast_nodes.node.Node.certificate_label": {"tf": 1}, "src.ast_nodes.node.Node.uses_register": {"tf": 1}, "src.ast_nodes.node.Node.instruction": {"tf": 1}, "src.ast_nodes.node.Node.symbol": {"tf": 1}, "src.ast_nodes.node.Node.get_value": {"tf": 1}, "src.ast_nodes.node.Node.get_type": {"tf": 1}, "src.ast_nodes.node.Node.get_certificate_label": {"tf": 1}, "src.ast_nodes.node.Node.print": {"tf": 1}, "src.ast_nodes.node.Node.generate_code": {"tf": 1}, "src.ast_nodes.node.Node.certificate": {"tf": 1}, "src.ast_nodes.basic": {"tf": 1}, "src.ast_nodes.basic.CST": {"tf": 1}, "src.ast_nodes.basic.CST.CST": {"tf": 1}, "src.ast_nodes.basic.CST.CST.__init__": {"tf": 1}, "src.ast_nodes.basic.CST.CST.type": {"tf": 1}, "src.ast_nodes.basic.CST.CST.instruction": {"tf": 1}, "src.ast_nodes.basic.CST.CST.symbol": {"tf": 1}, "src.ast_nodes.basic.PROG": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.instruction": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.children": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.add_child": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.print": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.certificate": {"tf": 1}, "src.ast_nodes.basic.SEQ": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.__init__": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.children": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.add_child": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.print": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1}, "src.ast_nodes.conditionals": {"tf": 1}, "src.ast_nodes.conditionals.DO": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.__init__": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 1}, "src.ast_nodes.conditionals.IF": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.__init__": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.__init__": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.statement_if_false": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.print": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1}, "src.ast_nodes.conditionals.WHILE": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.__init__": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.conditional": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.__init__": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.parenthesis_expression": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.statement_if_true": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.print": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 1}, "src.ast_nodes.functions": {"tf": 1}, "src.ast_nodes.functions.ARG": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.__init__": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.argument_value": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.parameter_type": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.print": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.__init__": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.function_call_metadata": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.arguments": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.type": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.symbol": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.__init__": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.parameters": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.statements": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.set_statements": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_function_name": {"tf": 1}, "src.ast_nodes.functions.PARAM": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.__init__": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.__init__": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.returned_value": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.type": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 1}, "src.ast_nodes.operations": {"tf": 1}, "src.ast_nodes.operations.ADD": {"tf": 1}, "src.ast_nodes.operations.ADD.ADD": {"tf": 1}, "src.ast_nodes.operations.ADD.ADD.__init__": {"tf": 1}, "src.ast_nodes.operations.ADD.ADD.instruction": {"tf": 1}, "src.ast_nodes.operations.AND": {"tf": 1}, "src.ast_nodes.operations.AND.AND": {"tf": 1}, "src.ast_nodes.operations.AND.AND.__init__": {"tf": 1}, "src.ast_nodes.operations.AND.AND.instruction": {"tf": 1}, "src.ast_nodes.operations.ASSIGN": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.__init__": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.instruction": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}, "src.ast_nodes.operations.BITAND": {"tf": 1}, "src.ast_nodes.operations.BITAND.BITAND": {"tf": 1}, "src.ast_nodes.operations.BITAND.BITAND.__init__": {"tf": 1}, "src.ast_nodes.operations.BITAND.BITAND.instruction": {"tf": 1}, "src.ast_nodes.operations.BITOR": {"tf": 1}, "src.ast_nodes.operations.BITOR.BITOR": {"tf": 1}, "src.ast_nodes.operations.BITOR.BITOR.__init__": {"tf": 1}, "src.ast_nodes.operations.BITOR.BITOR.instruction": {"tf": 1}, "src.ast_nodes.operations.DIFF": {"tf": 1}, "src.ast_nodes.operations.DIFF.DIFF": {"tf": 1}, "src.ast_nodes.operations.DIFF.DIFF.__init__": {"tf": 1}, "src.ast_nodes.operations.DIFF.DIFF.instruction": {"tf": 1}, "src.ast_nodes.operations.DIV": {"tf": 1}, "src.ast_nodes.operations.DIV.DIV": {"tf": 1}, "src.ast_nodes.operations.DIV.DIV.__init__": {"tf": 1}, "src.ast_nodes.operations.DIV.DIV.instruction": {"tf": 1}, "src.ast_nodes.operations.EQUAL": {"tf": 1}, "src.ast_nodes.operations.EQUAL.EQUAL": {"tf": 1}, "src.ast_nodes.operations.EQUAL.EQUAL.__init__": {"tf": 1}, "src.ast_nodes.operations.EQUAL.EQUAL.instruction": {"tf": 1}, "src.ast_nodes.operations.GREATER": {"tf": 1}, "src.ast_nodes.operations.GREATER.GREATER": {"tf": 1}, "src.ast_nodes.operations.GREATER.GREATER.__init__": {"tf": 1}, "src.ast_nodes.operations.GREATER.GREATER.instruction": {"tf": 1}, "src.ast_nodes.operations.LESS": {"tf": 1}, "src.ast_nodes.operations.LESS.LESS": {"tf": 1}, "src.ast_nodes.operations.LESS.LESS.__init__": {"tf": 1}, "src.ast_nodes.operations.LESS.LESS.instruction": {"tf": 1}, "src.ast_nodes.operations.LSHIFT": {"tf": 1}, "src.ast_nodes.operations.LSHIFT.LSHIFT": {"tf": 1}, "src.ast_nodes.operations.LSHIFT.LSHIFT.__init__": {"tf": 1}, "src.ast_nodes.operations.LSHIFT.LSHIFT.instruction": {"tf": 1}, "src.ast_nodes.operations.MOD": {"tf": 1}, "src.ast_nodes.operations.MOD.MOD": {"tf": 1}, "src.ast_nodes.operations.MOD.MOD.__init__": {"tf": 1}, "src.ast_nodes.operations.MOD.MOD.instruction": {"tf": 1}, "src.ast_nodes.operations.MULT": {"tf": 1}, "src.ast_nodes.operations.MULT.MULT": {"tf": 1}, "src.ast_nodes.operations.MULT.MULT.__init__": {"tf": 1}, "src.ast_nodes.operations.MULT.MULT.instruction": {"tf": 1}, "src.ast_nodes.operations.NOT": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.__init__": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.expression": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.symbol": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.instruction": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.type": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.get_certificate_label": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.print": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1}, "src.ast_nodes.operations.OR": {"tf": 1}, "src.ast_nodes.operations.OR.OR": {"tf": 1}, "src.ast_nodes.operations.OR.OR.__init__": {"tf": 1}, "src.ast_nodes.operations.OR.OR.instruction": {"tf": 1}, "src.ast_nodes.operations.RSHIFT": {"tf": 1}, "src.ast_nodes.operations.RSHIFT.RSHIFT": {"tf": 1}, "src.ast_nodes.operations.RSHIFT.RSHIFT.__init__": {"tf": 1}, "src.ast_nodes.operations.RSHIFT.RSHIFT.instruction": {"tf": 1}, "src.ast_nodes.operations.SUB": {"tf": 1}, "src.ast_nodes.operations.SUB.SUB": {"tf": 1}, "src.ast_nodes.operations.SUB.SUB.__init__": {"tf": 1}, "src.ast_nodes.operations.SUB.SUB.instruction": {"tf": 1}, "src.ast_nodes.operations.operation": {"tf": 1}, "src.ast_nodes.operations.operation.Operation": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.__init__": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.lhs": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.rhs": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.supports_float": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.print": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 1}, "src.ast_nodes.variables": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.__init__": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.is_array": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.is_struct": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.variable": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.element": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.type": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.access_type": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.element_offset": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.add_context": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.__init__": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.active": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.struct_metadata": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_symbol": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_attribute_types": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.is_active": {"tf": 1}, "src.ast_nodes.variables.VAR": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.__init__": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.variable_metadata": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.id": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.type": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.get_metadata": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.add_context": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.__init__": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.variable_metadata": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.instruction": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.size": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.symbol": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.ast": {"tf": 1}, "src.runner.Charon.ast": {"tf": 1}, "src.runner.Charon.get_ast": {"tf": 1}}, "df": 250}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {"src.ast_nodes.operations.ASSIGN": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.ASSIGN.ASSIGN.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.ASSIGN.ASSIGN.instruction": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1.4142135623730951}}, "df": 5}}}}}, "d": {"docs": {}, "df": 0, "d": {"docs": {"src.ast_nodes.basic.PROG.PROG.add_child": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.add_child": {"tf": 1}, "src.ast_nodes.operations.ADD": {"tf": 1}, "src.ast_nodes.operations.ADD.ADD": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.ADD.ADD.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.ADD.ADD.instruction": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.add_context": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.add_context": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADD": {"tf": 1}}, "df": 9, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {"src.ast_nodes.functions.ARG": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.ARG.ARG.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.ARG.ARG.argument_value": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.ARG.ARG.parameter_type": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.ARG.ARG.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.ARG.ARG.print": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.ARG.ARG.certificate": {"tf": 1.4142135623730951}}, "df": 9, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.functions.ARG.ARG.argument_value": {"tf": 1}}, "df": 1, "s": {"docs": {"src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.arguments": {"tf": 1}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.is_array": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"src.ast_nodes.operations.AND": {"tf": 1}, "src.ast_nodes.operations.AND.AND": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.AND.AND.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.AND.AND.instruction": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}}, "df": 5}}, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.variables.ELEMENT_ACCESS": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.is_array": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.is_struct": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.variable": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.element": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.type": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.access_type": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.element_offset": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.add_context": {"tf": 1.4142135623730951}}, "df": 14}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.active": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.is_active": {"tf": 1}}, "df": 2}}}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_attribute_types": {"tf": 1}}, "df": 1}}}}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {"src.virtual_machine.VirtualMachine.ALLOC": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {"src.abstract_syntax_tree": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.__init__": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.source_code": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.root": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.current_symbol": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.current_value": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.current_statement_list": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.current_function_type": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.build": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_struct_definitions": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_global_variables": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_functions": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.print_tree": {"tf": 1.4142135623730951}, "src.abstract_syntax_tree.AbstractSyntaxTree.get_root": {"tf": 1}}, "df": 15}}, "u": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.conditionals.conditional.Conditional.statement_if_true": {"tf": 1}}, "df": 1}, "n": {"docs": {}, "df": 0, "c": {"docs": {"src.virtual_machine.VirtualMachine.TRUNC": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.certificators.backend.BackendCertificator.register_tracker": {"tf": 1}, "src.certificators.backend.BackendCertificator.variable_prime_tracker": {"tf": 1}}, "df": 2}}}}}}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.current_function_type": {"tf": 1}, "src.ast_nodes.node.Node.type": {"tf": 1}, "src.ast_nodes.node.Node.get_type": {"tf": 1}, "src.ast_nodes.basic.CST.CST.type": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.parameter_type": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.type": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.type": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.type": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.type": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.access_type": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.type": {"tf": 1}, "src.utils.type_cast": {"tf": 1}, "src.utils.TYPE_SYMBOLS_MAP": {"tf": 1}}, "df": 13, "s": {"docs": {"src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_attribute_types": {"tf": 1}, "src.lexer.Lexer.types": {"tf": 1}, "src.utils.builtin_types": {"tf": 1}}, "df": 3}}}}, "o": {"docs": {"src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1}, "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.__init__": {"tf": 1}, "src.ast_nodes.node.Node.__init__": {"tf": 1}, "src.ast_nodes.basic.CST.CST.__init__": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.__init__": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.__init__": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.__init__": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.__init__": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.__init__": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.__init__": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.__init__": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.__init__": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.__init__": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.__init__": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.__init__": {"tf": 1}, "src.ast_nodes.operations.ADD.ADD.__init__": {"tf": 1}, "src.ast_nodes.operations.AND.AND.__init__": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.__init__": {"tf": 1}, "src.ast_nodes.operations.BITAND.BITAND.__init__": {"tf": 1}, "src.ast_nodes.operations.BITOR.BITOR.__init__": {"tf": 1}, "src.ast_nodes.operations.DIFF.DIFF.__init__": {"tf": 1}, "src.ast_nodes.operations.DIV.DIV.__init__": {"tf": 1}, "src.ast_nodes.operations.EQUAL.EQUAL.__init__": {"tf": 1}, "src.ast_nodes.operations.GREATER.GREATER.__init__": {"tf": 1}, "src.ast_nodes.operations.LESS.LESS.__init__": {"tf": 1}, "src.ast_nodes.operations.LSHIFT.LSHIFT.__init__": {"tf": 1}, "src.ast_nodes.operations.MOD.MOD.__init__": {"tf": 1}, "src.ast_nodes.operations.MULT.MULT.__init__": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.__init__": {"tf": 1}, "src.ast_nodes.operations.OR.OR.__init__": {"tf": 1}, "src.ast_nodes.operations.RSHIFT.RSHIFT.__init__": {"tf": 1}, "src.ast_nodes.operations.SUB.SUB.__init__": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.__init__": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.__init__": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.__init__": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.__init__": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.__init__": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.__init__": {"tf": 1}, "src.certificators.backend.BackendCertificator.__init__": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.__init__": {"tf": 1}, "src.code_generator.CodeGenerator.__init__": {"tf": 1}, "src.lexer.Lexer.__init__": {"tf": 1}, "src.runner.Charon.__init__": {"tf": 1}, "src.virtual_machine.VirtualMachine.__init__": {"tf": 1}}, "df": 43, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.certificators.abstract_certificator.AbstractCertificator.initial_prime": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.initial_prime": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.ast_nodes.node.Node.instruction": {"tf": 1}, "src.ast_nodes.basic.CST.CST.instruction": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.instruction": {"tf": 1}, "src.ast_nodes.operations.ADD.ADD.instruction": {"tf": 1}, "src.ast_nodes.operations.AND.AND.instruction": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.instruction": {"tf": 1}, "src.ast_nodes.operations.BITAND.BITAND.instruction": {"tf": 1}, "src.ast_nodes.operations.BITOR.BITOR.instruction": {"tf": 1}, "src.ast_nodes.operations.DIFF.DIFF.instruction": {"tf": 1}, "src.ast_nodes.operations.DIV.DIV.instruction": {"tf": 1}, "src.ast_nodes.operations.EQUAL.EQUAL.instruction": {"tf": 1}, "src.ast_nodes.operations.GREATER.GREATER.instruction": {"tf": 1}, "src.ast_nodes.operations.LESS.LESS.instruction": {"tf": 1}, "src.ast_nodes.operations.LSHIFT.LSHIFT.instruction": {"tf": 1}, "src.ast_nodes.operations.MOD.MOD.instruction": {"tf": 1}, "src.ast_nodes.operations.MULT.MULT.instruction": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.instruction": {"tf": 1}, "src.ast_nodes.operations.OR.OR.instruction": {"tf": 1}, "src.ast_nodes.operations.RSHIFT.RSHIFT.instruction": {"tf": 1}, "src.ast_nodes.operations.SUB.SUB.instruction": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.instruction": {"tf": 1}, "src.certificators.backend.BackendCertificator.instruction_status": {"tf": 1}, "src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1}, "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING": {"tf": 1}}, "df": 24, "s": {"docs": {"src.certificators.backend.BackendCertificator.special_instructions_handlers": {"tf": 1}, "src.certificators.backend.BackendCertificator.grouped_instructions_handlers": {"tf": 1}, "src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}}, "df": 3}}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"src.runner.create_instance": {"tf": 1}}, "df": 1}}}}}}}, "f": {"docs": {"src.ast_nodes.conditionals.IF": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IF.IF.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE.statement_if_false": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.statement_if_true": {"tf": 1}}, "df": 6, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.conditionals.IFELSE": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE.statement_if_false": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE.print": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1.4142135623730951}}, "df": 8}}}}}, "s": {"docs": {"src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.is_array": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.is_struct": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.is_active": {"tf": 1}, "src.utils.is_prime": {"tf": 1}}, "df": 4}, "d": {"docs": {"src.ast_nodes.variables.VAR.VAR.id": {"tf": 1}}, "df": 1}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.source_code": {"tf": 1}, "src.ast_nodes.node.Node.generate_code": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1}, "src.code_generator": {"tf": 1}, "src.code_generator.CodeGenerator": {"tf": 1}, "src.code_generator.CodeGenerator.__init__": {"tf": 1}, "src.code_generator.CodeGenerator.root": {"tf": 1}, "src.code_generator.CodeGenerator.program": {"tf": 1}, "src.code_generator.CodeGenerator.register": {"tf": 1}, "src.code_generator.CodeGenerator.print": {"tf": 1}, "src.code_generator.CodeGenerator.generate_code": {"tf": 1.4142135623730951}, "src.code_generator.CodeGenerator.parse_struct_definitions": {"tf": 1}, "src.code_generator.CodeGenerator.parse_global_variables": {"tf": 1}, "src.code_generator.CodeGenerator.parse_functions": {"tf": 1}, "src.code_generator.CodeGenerator.get_program": {"tf": 1}, "src.lexer.Lexer.source_code": {"tf": 1}, "src.lexer.Lexer.parse_source_code": {"tf": 1}}, "df": 34, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.code_generator.CodeGenerator": {"tf": 1}, "src.code_generator.CodeGenerator.__init__": {"tf": 1}, "src.code_generator.CodeGenerator.root": {"tf": 1}, "src.code_generator.CodeGenerator.program": {"tf": 1}, "src.code_generator.CodeGenerator.register": {"tf": 1}, "src.code_generator.CodeGenerator.print": {"tf": 1}, "src.code_generator.CodeGenerator.generate_code": {"tf": 1}, "src.code_generator.CodeGenerator.parse_struct_definitions": {"tf": 1}, "src.code_generator.CodeGenerator.parse_global_variables": {"tf": 1}, "src.code_generator.CodeGenerator.parse_functions": {"tf": 1}, "src.code_generator.CodeGenerator.get_program": {"tf": 1}}, "df": 11}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.ast_nodes.conditionals.conditional": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.conditional.Conditional.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.conditional.Conditional.parenthesis_expression": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.conditional.Conditional.statement_if_true": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.conditional.Conditional.print": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 1.4142135623730951}}, "df": 8, "s": {"docs": {"src.ast_nodes.conditionals": {"tf": 1}, "src.ast_nodes.conditionals.DO": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.__init__": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 1}, "src.ast_nodes.conditionals.IF": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.__init__": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.__init__": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.statement_if_false": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.print": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1}, "src.ast_nodes.conditionals.WHILE": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.__init__": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.conditional": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.__init__": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.parenthesis_expression": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.statement_if_true": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.print": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 1}, "src.lexer.Lexer.conditionals": {"tf": 1}}, "df": 33}}}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.add_context": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.add_context": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.virtual_machine.VirtualMachine.CONSTANT": {"tf": 1}}, "df": 1}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.certificators.abstract_certificator.AbstractCertificator.computed_certificate": {"tf": 1}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.lexer.Lexer.variable_count": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.virtual_machine.VirtualMachine.program_counter": {"tf": 1}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.current_symbol": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.current_value": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.current_statement_list": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.current_function_type": {"tf": 1}, "src.certificators.backend.BackendCertificator.current_positional_prime": {"tf": 1}, "src.certificators.backend.BackendCertificator.current_variable_prime": {"tf": 1}}, "df": 6}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.node.Node.certificate_label": {"tf": 1}, "src.ast_nodes.node.Node.get_certificate_label": {"tf": 1}, "src.ast_nodes.node.Node.certificate": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.certificate": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.get_certificate_label": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.computed_certificate": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.certificate": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.get_certificate": {"tf": 1}, "src.certificators.backend.BackendCertificator.certificate": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.certificate": {"tf": 1}, "src.utils.get_certificate_symbol": {"tf": 1}}, "df": 32}, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.certificators.abstract_certificator": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.__init__": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.computed_certificate": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.initial_prime": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.certificate": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.get_certificate": {"tf": 1}, "src.runner.Charon.frontend_certificator": {"tf": 1}, "src.runner.Charon.backend_certificator": {"tf": 1}, "src.runner.Charon.get_frontend_certificator": {"tf": 1}, "src.runner.Charon.get_backend_certificator": {"tf": 1}}, "df": 11, "s": {"docs": {"src.certificators": {"tf": 1}, "src.certificators.abstract_certificator": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.__init__": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.computed_certificate": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.initial_prime": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.certificate": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.get_certificate": {"tf": 1}, "src.certificators.backend": {"tf": 1}, "src.certificators.backend.BackendCertificator": {"tf": 1}, "src.certificators.backend.BackendCertificator.__init__": {"tf": 1}, "src.certificators.backend.BackendCertificator.program": {"tf": 1}, "src.certificators.backend.BackendCertificator.bytecode_list": {"tf": 1}, "src.certificators.backend.BackendCertificator.register_tracker": {"tf": 1}, "src.certificators.backend.BackendCertificator.variable_prime_tracker": {"tf": 1}, "src.certificators.backend.BackendCertificator.current_positional_prime": {"tf": 1}, "src.certificators.backend.BackendCertificator.current_variable_prime": {"tf": 1}, "src.certificators.backend.BackendCertificator.functions_primes": {"tf": 1}, "src.certificators.backend.BackendCertificator.instruction_status": {"tf": 1}, "src.certificators.backend.BackendCertificator.special_instructions_handlers": {"tf": 1}, "src.certificators.backend.BackendCertificator.grouped_instructions_handlers": {"tf": 1}, "src.certificators.backend.BackendCertificator.certificate": {"tf": 1}, "src.certificators.frontend": {"tf": 1}, "src.certificators.frontend.FrontendCertificator": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.__init__": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.ast": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.initial_prime": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.certificate": {"tf": 1}}, "df": 28}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.basic.CST": {"tf": 1}, "src.ast_nodes.basic.CST.CST": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.CST.CST.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.CST.CST.type": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.CST.CST.instruction": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.CST.CST.symbol": {"tf": 1.4142135623730951}}, "df": 6}}, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"src.ast_nodes.basic.PROG.PROG.add_child": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.add_child": {"tf": 1}}, "df": 2, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"src.ast_nodes.basic.PROG.PROG.children": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.children": {"tf": 1}}, "df": 2}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.runner.Charon": {"tf": 1}, "src.runner.Charon.__init__": {"tf": 1}, "src.runner.Charon.parsed_source": {"tf": 1}, "src.runner.Charon.ast": {"tf": 1}, "src.runner.Charon.program": {"tf": 1}, "src.runner.Charon.vm": {"tf": 1}, "src.runner.Charon.frontend_certificator": {"tf": 1}, "src.runner.Charon.backend_certificator": {"tf": 1}, "src.runner.Charon.get_parsed_source": {"tf": 1}, "src.runner.Charon.get_ast": {"tf": 1}, "src.runner.Charon.get_program": {"tf": 1}, "src.runner.Charon.get_vm": {"tf": 1}, "src.runner.Charon.get_frontend_certificator": {"tf": 1}, "src.runner.Charon.get_backend_certificator": {"tf": 1}}, "df": 14}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"src.ast_nodes.functions.FUNC_CALL": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.function_call_metadata": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.arguments": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.type": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.symbol": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 1.4142135623730951}}, "df": 11}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"src.utils.type_cast": {"tf": 1}}, "df": 1}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}}, "df": 1}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"src.runner.create_instance": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.root": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.get_root": {"tf": 1}, "src.code_generator.CodeGenerator.root": {"tf": 1}}, "df": 3}}}, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.ast_nodes.node.Node.uses_register": {"tf": 1}, "src.certificators.backend.BackendCertificator.register_tracker": {"tf": 1}, "src.code_generator.CodeGenerator.register": {"tf": 1}}, "df": 3, "s": {"docs": {"src.virtual_machine.VirtualMachine.registers": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {"src.ast_nodes.functions.RET_SYM": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.RET_SYM.RET_SYM.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.RET_SYM.RET_SYM.returned_value": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.RET_SYM.RET_SYM.type": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.RET_SYM.RET_SYM.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 1.4142135623730951}}, "df": 9, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.ast_nodes.functions.RET_SYM.RET_SYM.returned_value": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.lexer.Lexer.reserved_words": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.operations.RSHIFT": {"tf": 1}, "src.ast_nodes.operations.RSHIFT.RSHIFT": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.RSHIFT.RSHIFT.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.RSHIFT.RSHIFT.instruction": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.RSHIFT": {"tf": 1}}, "df": 5}}}}}, "h": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.operations.operation.Operation.rhs": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "n": {"docs": {"src.virtual_machine.VirtualMachine.run": {"tf": 1}}, "df": 1, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.runner": {"tf": 1}, "src.runner.Charon": {"tf": 1}, "src.runner.Charon.__init__": {"tf": 1}, "src.runner.Charon.parsed_source": {"tf": 1}, "src.runner.Charon.ast": {"tf": 1}, "src.runner.Charon.program": {"tf": 1}, "src.runner.Charon.vm": {"tf": 1}, "src.runner.Charon.frontend_certificator": {"tf": 1}, "src.runner.Charon.backend_certificator": {"tf": 1}, "src.runner.Charon.get_parsed_source": {"tf": 1}, "src.runner.Charon.get_ast": {"tf": 1}, "src.runner.Charon.get_program": {"tf": 1}, "src.runner.Charon.get_vm": {"tf": 1}, "src.runner.Charon.get_frontend_certificator": {"tf": 1}, "src.runner.Charon.get_backend_certificator": {"tf": 1}, "src.runner.create_instance": {"tf": 1}}, "df": 16}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.current_value": {"tf": 1}, "src.ast_nodes.node.Node.value": {"tf": 1}, "src.ast_nodes.node.Node.get_value": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.argument_value": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.returned_value": {"tf": 1}}, "df": 5}}}, "r": {"docs": {"src.ast_nodes.variables.VAR": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR.VAR.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR.VAR.variable_metadata": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR.VAR.id": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR.VAR.type": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR.VAR.get_metadata": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR.VAR.add_context": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR_DEF": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.variable_metadata": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.instruction": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.size": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.symbol": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1.4142135623730951}}, "df": 18, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.variable": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.variable_metadata": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.variable_metadata": {"tf": 1}, "src.certificators.backend.BackendCertificator.variable_prime_tracker": {"tf": 1}, "src.certificators.backend.BackendCertificator.current_variable_prime": {"tf": 1}, "src.lexer.Lexer.variable_count": {"tf": 1}, "src.lexer.Lexer.variable_prime": {"tf": 1}, "src.utils.get_variable_size": {"tf": 1}}, "df": 8, "s": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.parse_global_variables": {"tf": 1}, "src.ast_nodes.variables": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.__init__": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.is_array": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.is_struct": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.variable": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.element": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.type": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.access_type": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.element_offset": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.add_context": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.__init__": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.active": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.struct_metadata": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_symbol": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_attribute_types": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.is_active": {"tf": 1}, "src.ast_nodes.variables.VAR": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.__init__": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.variable_metadata": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.id": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.type": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.get_metadata": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.add_context": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.__init__": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.variable_metadata": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.instruction": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.size": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.symbol": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1}, "src.code_generator.CodeGenerator.parse_global_variables": {"tf": 1}, "src.virtual_machine.VirtualMachine.variables": {"tf": 1}}, "df": 47}}}}}}}}, "m": {"docs": {"src.runner.Charon.vm": {"tf": 1}, "src.runner.Charon.get_vm": {"tf": 1}}, "df": 2}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.virtual_machine": {"tf": 1}, "src.virtual_machine.VirtualMachine": {"tf": 1}, "src.virtual_machine.VirtualMachine.__init__": {"tf": 1}, "src.virtual_machine.VirtualMachine.program": {"tf": 1}, "src.virtual_machine.VirtualMachine.memory": {"tf": 1}, "src.virtual_machine.VirtualMachine.memory_size": {"tf": 1}, "src.virtual_machine.VirtualMachine.memory_pointer": {"tf": 1}, "src.virtual_machine.VirtualMachine.program_counter": {"tf": 1}, "src.virtual_machine.VirtualMachine.registers": {"tf": 1}, "src.virtual_machine.VirtualMachine.variables": {"tf": 1}, "src.virtual_machine.VirtualMachine.get_memory": {"tf": 1}, "src.virtual_machine.VirtualMachine.print": {"tf": 1}, "src.virtual_machine.VirtualMachine.run": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 1}, "src.virtual_machine.VirtualMachine.ALLOC": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.CONSTANT": {"tf": 1}, "src.virtual_machine.VirtualMachine.DIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FDIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FMULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 1}, "src.virtual_machine.VirtualMachine.FSUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.HALT": {"tf": 1}, "src.virtual_machine.VirtualMachine.JAL": {"tf": 1}, "src.virtual_machine.VirtualMachine.JR": {"tf": 1}, "src.virtual_machine.VirtualMachine.JZ": {"tf": 1}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1}, "src.virtual_machine.VirtualMachine.LSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOD": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOV": {"tf": 1}, "src.virtual_machine.VirtualMachine.MULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}, "src.virtual_machine.VirtualMachine.RSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SITOFP": {"tf": 1}, "src.virtual_machine.VirtualMachine.STORE": {"tf": 1}, "src.virtual_machine.VirtualMachine.SUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.TRUNC": {"tf": 1}}, "df": 53, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"src.virtual_machine.VirtualMachine": {"tf": 1}, "src.virtual_machine.VirtualMachine.__init__": {"tf": 1}, "src.virtual_machine.VirtualMachine.program": {"tf": 1}, "src.virtual_machine.VirtualMachine.memory": {"tf": 1}, "src.virtual_machine.VirtualMachine.memory_size": {"tf": 1}, "src.virtual_machine.VirtualMachine.memory_pointer": {"tf": 1}, "src.virtual_machine.VirtualMachine.program_counter": {"tf": 1}, "src.virtual_machine.VirtualMachine.registers": {"tf": 1}, "src.virtual_machine.VirtualMachine.variables": {"tf": 1}, "src.virtual_machine.VirtualMachine.get_memory": {"tf": 1}, "src.virtual_machine.VirtualMachine.print": {"tf": 1}, "src.virtual_machine.VirtualMachine.run": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 1}, "src.virtual_machine.VirtualMachine.ALLOC": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.CONSTANT": {"tf": 1}, "src.virtual_machine.VirtualMachine.DIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FDIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FMULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 1}, "src.virtual_machine.VirtualMachine.FSUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.HALT": {"tf": 1}, "src.virtual_machine.VirtualMachine.JAL": {"tf": 1}, "src.virtual_machine.VirtualMachine.JR": {"tf": 1}, "src.virtual_machine.VirtualMachine.JZ": {"tf": 1}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1}, "src.virtual_machine.VirtualMachine.LSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOD": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOV": {"tf": 1}, "src.virtual_machine.VirtualMachine.MULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}, "src.virtual_machine.VirtualMachine.RSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SITOFP": {"tf": 1}, "src.virtual_machine.VirtualMachine.STORE": {"tf": 1}, "src.virtual_machine.VirtualMachine.SUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.TRUNC": {"tf": 1}}, "df": 52}}}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.current_statement_list": {"tf": 1}, "src.certificators.backend.BackendCertificator.bytecode_list": {"tf": 1}, "src.utils.primes_list": {"tf": 1}, "src.utils.flatten_list": {"tf": 1}}, "df": 4}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"src.ast_nodes.node.Node.certificate_label": {"tf": 1}, "src.ast_nodes.node.Node.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.get_certificate_label": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.get_certificate_label": {"tf": 1}}, "df": 13}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.operations.LESS": {"tf": 1}, "src.ast_nodes.operations.LESS.LESS": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.LESS.LESS.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.LESS.LESS.instruction": {"tf": 1.4142135623730951}}, "df": 4}}, "x": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.lexer": {"tf": 1}, "src.lexer.Lexer": {"tf": 1.4142135623730951}, "src.lexer.Lexer.__init__": {"tf": 1.4142135623730951}, "src.lexer.Lexer.conditionals": {"tf": 1.4142135623730951}, "src.lexer.Lexer.symbols": {"tf": 1.4142135623730951}, "src.lexer.Lexer.operators": {"tf": 1.4142135623730951}, "src.lexer.Lexer.types": {"tf": 1.4142135623730951}, "src.lexer.Lexer.reserved_words": {"tf": 1.4142135623730951}, "src.lexer.Lexer.source_code": {"tf": 1.4142135623730951}, "src.lexer.Lexer.functions": {"tf": 1.4142135623730951}, "src.lexer.Lexer.globals": {"tf": 1.4142135623730951}, "src.lexer.Lexer.variable_count": {"tf": 1.4142135623730951}, "src.lexer.Lexer.struct_prime": {"tf": 1.4142135623730951}, "src.lexer.Lexer.variable_prime": {"tf": 1.4142135623730951}, "src.lexer.Lexer.parse_source_code": {"tf": 1.4142135623730951}, "src.lexer.Lexer.split_source": {"tf": 1.4142135623730951}}, "df": 16}}}}, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.operations.LSHIFT": {"tf": 1}, "src.ast_nodes.operations.LSHIFT.LSHIFT": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.LSHIFT.LSHIFT.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.LSHIFT.LSHIFT.instruction": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.LSHIFT": {"tf": 1}}, "df": 5}}}}}, "h": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.operations.operation.Operation.lhs": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"src.virtual_machine.VirtualMachine.LOAD": {"tf": 1}}, "df": 1}}}, "t": {"docs": {"src.virtual_machine.VirtualMachine.LT": {"tf": 1}}, "df": 1}}, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"src.ast_nodes.functions.FUNC_CALL": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.function_call_metadata": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.arguments": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.type": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.symbol": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.parameters": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.statements": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.set_statements": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_function_name": {"tf": 1.4142135623730951}}, "df": 22, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.current_function_type": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.function_call_metadata": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_function_name": {"tf": 1}}, "df": 3, "s": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.parse_functions": {"tf": 1}, "src.ast_nodes.functions": {"tf": 1}, "src.ast_nodes.functions.ARG": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.__init__": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.argument_value": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.parameter_type": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.print": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.__init__": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.function_call_metadata": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.arguments": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.type": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.symbol": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.__init__": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.parameters": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.statements": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.set_statements": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_function_name": {"tf": 1}, "src.ast_nodes.functions.PARAM": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.__init__": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.__init__": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.returned_value": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.type": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 1}, "src.certificators.backend.BackendCertificator.functions_primes": {"tf": 1}, "src.code_generator.CodeGenerator.parse_functions": {"tf": 1}, "src.lexer.Lexer.functions": {"tf": 1}}, "df": 49}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.conditionals.IFELSE.IFELSE.statement_if_false": {"tf": 1}}, "df": 1}}}, "d": {"docs": {}, "df": 0, "d": {"docs": {"src.virtual_machine.VirtualMachine.FADD": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"src.virtual_machine.VirtualMachine.FAND": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.operations.operation.Operation.supports_float": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"src.utils.flatten_list": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {"src.virtual_machine.VirtualMachine.FLT": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"src.certificators.frontend": {"tf": 1}, "src.certificators.frontend.FrontendCertificator": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.__init__": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.ast": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.initial_prime": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.certificate": {"tf": 1}, "src.runner.Charon.frontend_certificator": {"tf": 1}, "src.runner.Charon.get_frontend_certificator": {"tf": 1}}, "df": 8, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.certificators.frontend.FrontendCertificator": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.__init__": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.ast": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.initial_prime": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.certificate": {"tf": 1}}, "df": 5}}}}}}}}}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {"src.virtual_machine.VirtualMachine.FDIV": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "q": {"docs": {"src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}}, "df": 1}}, "g": {"docs": {}, "df": 0, "t": {"docs": {"src.virtual_machine.VirtualMachine.FGT": {"tf": 1}}, "df": 1}}, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"src.virtual_machine.VirtualMachine.FMULT": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {"src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.virtual_machine.VirtualMachine.FOR": {"tf": 1}}, "df": 1}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {"src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "b": {"docs": {"src.virtual_machine.VirtualMachine.FSUB": {"tf": 1}}, "df": 1}}}}, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.build": {"tf": 1}}, "df": 1}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"src.utils.builtin_types": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"src.ast_nodes.basic": {"tf": 1}, "src.ast_nodes.basic.CST": {"tf": 1}, "src.ast_nodes.basic.CST.CST": {"tf": 1}, "src.ast_nodes.basic.CST.CST.__init__": {"tf": 1}, "src.ast_nodes.basic.CST.CST.type": {"tf": 1}, "src.ast_nodes.basic.CST.CST.instruction": {"tf": 1}, "src.ast_nodes.basic.CST.CST.symbol": {"tf": 1}, "src.ast_nodes.basic.PROG": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.instruction": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.children": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.add_child": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.print": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.certificate": {"tf": 1}, "src.ast_nodes.basic.SEQ": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.__init__": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.children": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.add_child": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.print": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1}}, "df": 25}}}, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"src.certificators.backend": {"tf": 1}, "src.certificators.backend.BackendCertificator": {"tf": 1}, "src.certificators.backend.BackendCertificator.__init__": {"tf": 1}, "src.certificators.backend.BackendCertificator.program": {"tf": 1}, "src.certificators.backend.BackendCertificator.bytecode_list": {"tf": 1}, "src.certificators.backend.BackendCertificator.register_tracker": {"tf": 1}, "src.certificators.backend.BackendCertificator.variable_prime_tracker": {"tf": 1}, "src.certificators.backend.BackendCertificator.current_positional_prime": {"tf": 1}, "src.certificators.backend.BackendCertificator.current_variable_prime": {"tf": 1}, "src.certificators.backend.BackendCertificator.functions_primes": {"tf": 1}, "src.certificators.backend.BackendCertificator.instruction_status": {"tf": 1}, "src.certificators.backend.BackendCertificator.special_instructions_handlers": {"tf": 1}, "src.certificators.backend.BackendCertificator.grouped_instructions_handlers": {"tf": 1}, "src.certificators.backend.BackendCertificator.certificate": {"tf": 1}, "src.runner.Charon.backend_certificator": {"tf": 1}, "src.runner.Charon.get_backend_certificator": {"tf": 1}}, "df": 16, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.certificators.backend.BackendCertificator": {"tf": 1}, "src.certificators.backend.BackendCertificator.__init__": {"tf": 1}, "src.certificators.backend.BackendCertificator.program": {"tf": 1}, "src.certificators.backend.BackendCertificator.bytecode_list": {"tf": 1}, "src.certificators.backend.BackendCertificator.register_tracker": {"tf": 1}, "src.certificators.backend.BackendCertificator.variable_prime_tracker": {"tf": 1}, "src.certificators.backend.BackendCertificator.current_positional_prime": {"tf": 1}, "src.certificators.backend.BackendCertificator.current_variable_prime": {"tf": 1}, "src.certificators.backend.BackendCertificator.functions_primes": {"tf": 1}, "src.certificators.backend.BackendCertificator.instruction_status": {"tf": 1}, "src.certificators.backend.BackendCertificator.special_instructions_handlers": {"tf": 1}, "src.certificators.backend.BackendCertificator.grouped_instructions_handlers": {"tf": 1}, "src.certificators.backend.BackendCertificator.certificate": {"tf": 1}}, "df": 13}}}}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"src.ast_nodes.operations.BITAND": {"tf": 1}, "src.ast_nodes.operations.BITAND.BITAND": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.BITAND.BITAND.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.BITAND.BITAND.instruction": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.BITAND": {"tf": 1}}, "df": 5}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.ast_nodes.operations.BITOR": {"tf": 1}, "src.ast_nodes.operations.BITOR.BITOR": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.BITOR.BITOR.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.BITOR.BITOR.instruction": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.BITOR": {"tf": 1}}, "df": 5}}}}, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"src.certificators.backend.BackendCertificator.bytecode_list": {"tf": 1}}, "df": 1}}}}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.parse_struct_definitions": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_global_variables": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_functions": {"tf": 1}, "src.code_generator.CodeGenerator.parse_struct_definitions": {"tf": 1}, "src.code_generator.CodeGenerator.parse_global_variables": {"tf": 1}, "src.code_generator.CodeGenerator.parse_functions": {"tf": 1}, "src.lexer.Lexer.parse_source_code": {"tf": 1}}, "df": 7, "d": {"docs": {"src.runner.Charon.parsed_source": {"tf": 1}, "src.runner.Charon.get_parsed_source": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.conditionals.conditional.Conditional.parenthesis_expression": {"tf": 1}}, "df": 1}}}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {"src.ast_nodes.functions.PARAM": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.PARAM.PARAM.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1.4142135623730951}}, "df": 4, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.ast_nodes.functions.ARG.ARG.parameter_type": {"tf": 1}}, "df": 1, "s": {"docs": {"src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.parameters": {"tf": 1}}, "df": 1}}}}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.print_tree": {"tf": 1}, "src.ast_nodes.node.Node.print": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.print": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.print": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.print": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.print": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.print": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.print": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 1}, "src.code_generator.CodeGenerator.print": {"tf": 1}, "src.virtual_machine.VirtualMachine.print": {"tf": 1}}, "df": 17}}, "m": {"docs": {}, "df": 0, "e": {"docs": {"src.certificators.abstract_certificator.AbstractCertificator.initial_prime": {"tf": 1}, "src.certificators.backend.BackendCertificator.variable_prime_tracker": {"tf": 1}, "src.certificators.backend.BackendCertificator.current_positional_prime": {"tf": 1}, "src.certificators.backend.BackendCertificator.current_variable_prime": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.initial_prime": {"tf": 1}, "src.lexer.Lexer.struct_prime": {"tf": 1}, "src.lexer.Lexer.variable_prime": {"tf": 1}, "src.utils.is_prime": {"tf": 1}, "src.utils.next_prime": {"tf": 1}, "src.utils.previous_prime": {"tf": 1}}, "df": 10, "s": {"docs": {"src.certificators.backend.BackendCertificator.functions_primes": {"tf": 1}, "src.utils.primes_list": {"tf": 1}}, "df": 2}}}}, "o": {"docs": {}, "df": 0, "g": {"docs": {"src.ast_nodes.basic.PROG": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.PROG.PROG.instruction": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.PROG.PROG.children": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.PROG.PROG.add_child": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.PROG.PROG.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.PROG.PROG.print": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.PROG.PROG.certificate": {"tf": 1.4142135623730951}}, "df": 9, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {"src.certificators.backend.BackendCertificator.program": {"tf": 1}, "src.code_generator.CodeGenerator.program": {"tf": 1}, "src.code_generator.CodeGenerator.get_program": {"tf": 1}, "src.runner.Charon.program": {"tf": 1}, "src.runner.Charon.get_program": {"tf": 1}, "src.virtual_machine.VirtualMachine.program": {"tf": 1}, "src.virtual_machine.VirtualMachine.program_counter": {"tf": 1}}, "df": 7}}}}}, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"src.utils.previous_prime": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.certificators.backend.BackendCertificator.current_positional_prime": {"tf": 1}}, "df": 1}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.virtual_machine.VirtualMachine.memory_pointer": {"tf": 1}}, "df": 1}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {"src.ast_nodes.functions.FUNC_DEF": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.parameters": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.statements": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.set_statements": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_function_name": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.active": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.struct_metadata": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_symbol": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_attribute_types": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.is_active": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR_DEF": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.variable_metadata": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.instruction": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.size": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.symbol": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1.4142135623730951}}, "df": 31, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.parse_struct_definitions": {"tf": 1}, "src.code_generator.CodeGenerator.parse_struct_definitions": {"tf": 1}}, "df": 2}}}}}}}}}}, "o": {"docs": {"src.ast_nodes.conditionals.DO": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.DO.DO.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.DO.DO.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 1.4142135623730951}}, "df": 6}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {"src.ast_nodes.operations.DIFF": {"tf": 1}, "src.ast_nodes.operations.DIFF.DIFF": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.DIFF.DIFF.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.DIFF.DIFF.instruction": {"tf": 1.4142135623730951}}, "df": 4}}, "v": {"docs": {"src.ast_nodes.operations.DIV": {"tf": 1}, "src.ast_nodes.operations.DIV.DIV": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.DIV.DIV.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.DIV.DIV.instruction": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.DIV": {"tf": 1}}, "df": 5}}}, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.parse_global_variables": {"tf": 1}, "src.code_generator.CodeGenerator.parse_global_variables": {"tf": 1}}, "df": 2, "s": {"docs": {"src.lexer.Lexer.globals": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.get_root": {"tf": 1}, "src.ast_nodes.node.Node.get_value": {"tf": 1}, "src.ast_nodes.node.Node.get_type": {"tf": 1}, "src.ast_nodes.node.Node.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_function_name": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.get_certificate_label": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.get_certificate_label": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_symbol": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_attribute_types": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.get_metadata": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.get_certificate": {"tf": 1}, "src.code_generator.CodeGenerator.get_program": {"tf": 1}, "src.runner.Charon.get_parsed_source": {"tf": 1}, "src.runner.Charon.get_ast": {"tf": 1}, "src.runner.Charon.get_program": {"tf": 1}, "src.runner.Charon.get_vm": {"tf": 1}, "src.runner.Charon.get_frontend_certificator": {"tf": 1}, "src.runner.Charon.get_backend_certificator": {"tf": 1}, "src.utils.get_variable_size": {"tf": 1}, "src.utils.get_certificate_symbol": {"tf": 1}, "src.virtual_machine.VirtualMachine.get_memory": {"tf": 1}}, "df": 30}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.node.Node.generate_code": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1}, "src.code_generator.CodeGenerator.generate_code": {"tf": 1}}, "df": 20}, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.code_generator": {"tf": 1}, "src.code_generator.CodeGenerator": {"tf": 1}, "src.code_generator.CodeGenerator.__init__": {"tf": 1}, "src.code_generator.CodeGenerator.root": {"tf": 1}, "src.code_generator.CodeGenerator.program": {"tf": 1}, "src.code_generator.CodeGenerator.register": {"tf": 1}, "src.code_generator.CodeGenerator.print": {"tf": 1}, "src.code_generator.CodeGenerator.generate_code": {"tf": 1}, "src.code_generator.CodeGenerator.parse_struct_definitions": {"tf": 1}, "src.code_generator.CodeGenerator.parse_global_variables": {"tf": 1}, "src.code_generator.CodeGenerator.parse_functions": {"tf": 1}, "src.code_generator.CodeGenerator.get_program": {"tf": 1}}, "df": 12}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.ast_nodes.operations.GREATER": {"tf": 1}, "src.ast_nodes.operations.GREATER.GREATER": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.GREATER.GREATER.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.GREATER.GREATER.instruction": {"tf": 1.4142135623730951}}, "df": 4}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.certificators.backend.BackendCertificator.grouped_instructions_handlers": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {"src.virtual_machine.VirtualMachine.GT": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.node": {"tf": 1}, "src.ast_nodes.node.Node": {"tf": 1.4142135623730951}, "src.ast_nodes.node.Node.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.node.Node.value": {"tf": 1.4142135623730951}, "src.ast_nodes.node.Node.type": {"tf": 1.4142135623730951}, "src.ast_nodes.node.Node.certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.node.Node.uses_register": {"tf": 1.4142135623730951}, "src.ast_nodes.node.Node.instruction": {"tf": 1.4142135623730951}, "src.ast_nodes.node.Node.symbol": {"tf": 1.4142135623730951}, "src.ast_nodes.node.Node.get_value": {"tf": 1.4142135623730951}, "src.ast_nodes.node.Node.get_type": {"tf": 1.4142135623730951}, "src.ast_nodes.node.Node.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.node.Node.print": {"tf": 1.4142135623730951}, "src.ast_nodes.node.Node.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.node.Node.certificate": {"tf": 1.4142135623730951}, "src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1}, "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING": {"tf": 1}}, "df": 17, "s": {"docs": {"src.ast_nodes": {"tf": 1}, "src.ast_nodes.node": {"tf": 1}, "src.ast_nodes.node.Node": {"tf": 1}, "src.ast_nodes.node.Node.__init__": {"tf": 1}, "src.ast_nodes.node.Node.value": {"tf": 1}, "src.ast_nodes.node.Node.type": {"tf": 1}, "src.ast_nodes.node.Node.certificate_label": {"tf": 1}, "src.ast_nodes.node.Node.uses_register": {"tf": 1}, "src.ast_nodes.node.Node.instruction": {"tf": 1}, "src.ast_nodes.node.Node.symbol": {"tf": 1}, "src.ast_nodes.node.Node.get_value": {"tf": 1}, "src.ast_nodes.node.Node.get_type": {"tf": 1}, "src.ast_nodes.node.Node.get_certificate_label": {"tf": 1}, "src.ast_nodes.node.Node.print": {"tf": 1}, "src.ast_nodes.node.Node.generate_code": {"tf": 1}, "src.ast_nodes.node.Node.certificate": {"tf": 1}, "src.ast_nodes.basic": {"tf": 1}, "src.ast_nodes.basic.CST": {"tf": 1}, "src.ast_nodes.basic.CST.CST": {"tf": 1}, "src.ast_nodes.basic.CST.CST.__init__": {"tf": 1}, "src.ast_nodes.basic.CST.CST.type": {"tf": 1}, "src.ast_nodes.basic.CST.CST.instruction": {"tf": 1}, "src.ast_nodes.basic.CST.CST.symbol": {"tf": 1}, "src.ast_nodes.basic.PROG": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.instruction": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.children": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.add_child": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.print": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.certificate": {"tf": 1}, "src.ast_nodes.basic.SEQ": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.__init__": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.children": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.add_child": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.print": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1}, "src.ast_nodes.conditionals": {"tf": 1}, "src.ast_nodes.conditionals.DO": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.__init__": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 1}, "src.ast_nodes.conditionals.IF": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.__init__": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.__init__": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.statement_if_false": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.print": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1}, "src.ast_nodes.conditionals.WHILE": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.__init__": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.conditional": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.__init__": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.parenthesis_expression": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.statement_if_true": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.print": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 1}, "src.ast_nodes.functions": {"tf": 1}, "src.ast_nodes.functions.ARG": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.__init__": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.argument_value": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.parameter_type": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.print": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.__init__": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.function_call_metadata": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.arguments": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.type": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.symbol": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.__init__": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.parameters": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.statements": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.set_statements": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_function_name": {"tf": 1}, "src.ast_nodes.functions.PARAM": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.__init__": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.__init__": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.returned_value": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.type": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 1}, "src.ast_nodes.operations": {"tf": 1}, "src.ast_nodes.operations.ADD": {"tf": 1}, "src.ast_nodes.operations.ADD.ADD": {"tf": 1}, "src.ast_nodes.operations.ADD.ADD.__init__": {"tf": 1}, "src.ast_nodes.operations.ADD.ADD.instruction": {"tf": 1}, "src.ast_nodes.operations.AND": {"tf": 1}, "src.ast_nodes.operations.AND.AND": {"tf": 1}, "src.ast_nodes.operations.AND.AND.__init__": {"tf": 1}, "src.ast_nodes.operations.AND.AND.instruction": {"tf": 1}, "src.ast_nodes.operations.ASSIGN": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.__init__": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.instruction": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}, "src.ast_nodes.operations.BITAND": {"tf": 1}, "src.ast_nodes.operations.BITAND.BITAND": {"tf": 1}, "src.ast_nodes.operations.BITAND.BITAND.__init__": {"tf": 1}, "src.ast_nodes.operations.BITAND.BITAND.instruction": {"tf": 1}, "src.ast_nodes.operations.BITOR": {"tf": 1}, "src.ast_nodes.operations.BITOR.BITOR": {"tf": 1}, "src.ast_nodes.operations.BITOR.BITOR.__init__": {"tf": 1}, "src.ast_nodes.operations.BITOR.BITOR.instruction": {"tf": 1}, "src.ast_nodes.operations.DIFF": {"tf": 1}, "src.ast_nodes.operations.DIFF.DIFF": {"tf": 1}, "src.ast_nodes.operations.DIFF.DIFF.__init__": {"tf": 1}, "src.ast_nodes.operations.DIFF.DIFF.instruction": {"tf": 1}, "src.ast_nodes.operations.DIV": {"tf": 1}, "src.ast_nodes.operations.DIV.DIV": {"tf": 1}, "src.ast_nodes.operations.DIV.DIV.__init__": {"tf": 1}, "src.ast_nodes.operations.DIV.DIV.instruction": {"tf": 1}, "src.ast_nodes.operations.EQUAL": {"tf": 1}, "src.ast_nodes.operations.EQUAL.EQUAL": {"tf": 1}, "src.ast_nodes.operations.EQUAL.EQUAL.__init__": {"tf": 1}, "src.ast_nodes.operations.EQUAL.EQUAL.instruction": {"tf": 1}, "src.ast_nodes.operations.GREATER": {"tf": 1}, "src.ast_nodes.operations.GREATER.GREATER": {"tf": 1}, "src.ast_nodes.operations.GREATER.GREATER.__init__": {"tf": 1}, "src.ast_nodes.operations.GREATER.GREATER.instruction": {"tf": 1}, "src.ast_nodes.operations.LESS": {"tf": 1}, "src.ast_nodes.operations.LESS.LESS": {"tf": 1}, "src.ast_nodes.operations.LESS.LESS.__init__": {"tf": 1}, "src.ast_nodes.operations.LESS.LESS.instruction": {"tf": 1}, "src.ast_nodes.operations.LSHIFT": {"tf": 1}, "src.ast_nodes.operations.LSHIFT.LSHIFT": {"tf": 1}, "src.ast_nodes.operations.LSHIFT.LSHIFT.__init__": {"tf": 1}, "src.ast_nodes.operations.LSHIFT.LSHIFT.instruction": {"tf": 1}, "src.ast_nodes.operations.MOD": {"tf": 1}, "src.ast_nodes.operations.MOD.MOD": {"tf": 1}, "src.ast_nodes.operations.MOD.MOD.__init__": {"tf": 1}, "src.ast_nodes.operations.MOD.MOD.instruction": {"tf": 1}, "src.ast_nodes.operations.MULT": {"tf": 1}, "src.ast_nodes.operations.MULT.MULT": {"tf": 1}, "src.ast_nodes.operations.MULT.MULT.__init__": {"tf": 1}, "src.ast_nodes.operations.MULT.MULT.instruction": {"tf": 1}, "src.ast_nodes.operations.NOT": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.__init__": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.expression": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.symbol": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.instruction": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.type": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.get_certificate_label": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.print": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1}, "src.ast_nodes.operations.OR": {"tf": 1}, "src.ast_nodes.operations.OR.OR": {"tf": 1}, "src.ast_nodes.operations.OR.OR.__init__": {"tf": 1}, "src.ast_nodes.operations.OR.OR.instruction": {"tf": 1}, "src.ast_nodes.operations.RSHIFT": {"tf": 1}, "src.ast_nodes.operations.RSHIFT.RSHIFT": {"tf": 1}, "src.ast_nodes.operations.RSHIFT.RSHIFT.__init__": {"tf": 1}, "src.ast_nodes.operations.RSHIFT.RSHIFT.instruction": {"tf": 1}, "src.ast_nodes.operations.SUB": {"tf": 1}, "src.ast_nodes.operations.SUB.SUB": {"tf": 1}, "src.ast_nodes.operations.SUB.SUB.__init__": {"tf": 1}, "src.ast_nodes.operations.SUB.SUB.instruction": {"tf": 1}, "src.ast_nodes.operations.operation": {"tf": 1}, "src.ast_nodes.operations.operation.Operation": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.__init__": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.lhs": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.rhs": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.supports_float": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.print": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 1}, "src.ast_nodes.variables": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.__init__": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.is_array": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.is_struct": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.variable": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.element": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.type": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.access_type": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.element_offset": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.add_context": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.__init__": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.active": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.struct_metadata": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_symbol": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_attribute_types": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.is_active": {"tf": 1}, "src.ast_nodes.variables.VAR": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.__init__": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.variable_metadata": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.id": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.type": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.get_metadata": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.add_context": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.__init__": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.variable_metadata": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.instruction": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.size": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.symbol": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1}}, "df": 247}}}, "t": {"docs": {"src.ast_nodes.operations.NOT": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.NOT.NOT.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.NOT.NOT.expression": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.NOT.NOT.symbol": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.NOT.NOT.instruction": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.NOT.NOT.type": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.NOT.NOT.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.NOT.NOT.print": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}}, "df": 11}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_function_name": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {"src.utils.next_prime": {"tf": 1}}, "df": 1}}, "q": {"docs": {"src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.node.Node.uses_register": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"src.utils": {"tf": 1}, "src.utils.builtin_types": {"tf": 1}, "src.utils.is_prime": {"tf": 1}, "src.utils.next_prime": {"tf": 1}, "src.utils.previous_prime": {"tf": 1}, "src.utils.primes_list": {"tf": 1}, "src.utils.type_cast": {"tf": 1}, "src.utils.get_variable_size": {"tf": 1}, "src.utils.flatten_list": {"tf": 1}, "src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1}, "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING": {"tf": 1}, "src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}, "src.utils.SYMBOLS_MAP": {"tf": 1}, "src.utils.TYPE_SYMBOLS_MAP": {"tf": 1}, "src.utils.get_certificate_symbol": {"tf": 1}}, "df": 15}}}}}, "w": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.conditionals.WHILE": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.WHILE.WHILE.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.WHILE.WHILE.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1.4142135623730951}}, "df": 5}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"src.lexer.Lexer.reserved_words": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.ast_nodes.conditionals.conditional.Conditional.parenthesis_expression": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.expression": {"tf": 1}}, "df": 2}}}}}}}}}, "q": {"docs": {"src.virtual_machine.VirtualMachine.EQ": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.ast_nodes.operations.EQUAL": {"tf": 1}, "src.ast_nodes.operations.EQUAL.EQUAL": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.EQUAL.EQUAL.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.EQUAL.EQUAL.instruction": {"tf": 1.4142135623730951}}, "df": 4}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.variables.ELEMENT_ACCESS": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.is_array": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.is_struct": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.variable": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.element": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.type": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.access_type": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.element_offset": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.add_context": {"tf": 1.4142135623730951}}, "df": 14}}}}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.function_call_metadata": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.struct_metadata": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.variable_metadata": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.get_metadata": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.variable_metadata": {"tf": 1}}, "df": 5}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"src.virtual_machine.VirtualMachine.memory": {"tf": 1}, "src.virtual_machine.VirtualMachine.memory_size": {"tf": 1}, "src.virtual_machine.VirtualMachine.memory_pointer": {"tf": 1}, "src.virtual_machine.VirtualMachine.get_memory": {"tf": 1}}, "df": 4}}}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {"src.ast_nodes.operations.MOD": {"tf": 1}, "src.ast_nodes.operations.MOD.MOD": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.MOD.MOD.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.MOD.MOD.instruction": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.MOD": {"tf": 1}}, "df": 5}, "v": {"docs": {"src.virtual_machine.VirtualMachine.MOV": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.operations.MULT": {"tf": 1}, "src.ast_nodes.operations.MULT.MULT": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.MULT.MULT.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.MULT.MULT.instruction": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.MULT": {"tf": 1}}, "df": 5}}}, "a": {"docs": {}, "df": 0, "p": {"docs": {"src.utils.SYMBOLS_MAP": {"tf": 1}, "src.utils.TYPE_SYMBOLS_MAP": {"tf": 1}}, "df": 2, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1}, "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING": {"tf": 1}}, "df": 2}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"src.virtual_machine": {"tf": 1}, "src.virtual_machine.VirtualMachine": {"tf": 1}, "src.virtual_machine.VirtualMachine.__init__": {"tf": 1}, "src.virtual_machine.VirtualMachine.program": {"tf": 1}, "src.virtual_machine.VirtualMachine.memory": {"tf": 1}, "src.virtual_machine.VirtualMachine.memory_size": {"tf": 1}, "src.virtual_machine.VirtualMachine.memory_pointer": {"tf": 1}, "src.virtual_machine.VirtualMachine.program_counter": {"tf": 1}, "src.virtual_machine.VirtualMachine.registers": {"tf": 1}, "src.virtual_machine.VirtualMachine.variables": {"tf": 1}, "src.virtual_machine.VirtualMachine.get_memory": {"tf": 1}, "src.virtual_machine.VirtualMachine.print": {"tf": 1}, "src.virtual_machine.VirtualMachine.run": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 1}, "src.virtual_machine.VirtualMachine.ALLOC": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.CONSTANT": {"tf": 1}, "src.virtual_machine.VirtualMachine.DIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FDIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FMULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 1}, "src.virtual_machine.VirtualMachine.FSUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.HALT": {"tf": 1}, "src.virtual_machine.VirtualMachine.JAL": {"tf": 1}, "src.virtual_machine.VirtualMachine.JR": {"tf": 1}, "src.virtual_machine.VirtualMachine.JZ": {"tf": 1}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1}, "src.virtual_machine.VirtualMachine.LSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOD": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOV": {"tf": 1}, "src.virtual_machine.VirtualMachine.MULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}, "src.virtual_machine.VirtualMachine.RSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SITOFP": {"tf": 1}, "src.virtual_machine.VirtualMachine.STORE": {"tf": 1}, "src.virtual_machine.VirtualMachine.SUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.TRUNC": {"tf": 1}}, "df": 53}}}}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.ast_nodes.operations.operation": {"tf": 1}, "src.ast_nodes.operations.operation.Operation": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.operation.Operation.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.operation.Operation.lhs": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.operation.Operation.rhs": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.operation.Operation.supports_float": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.operation.Operation.print": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 1.4142135623730951}, "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING": {"tf": 1}}, "df": 10, "s": {"docs": {"src.ast_nodes.operations": {"tf": 1}, "src.ast_nodes.operations.ADD": {"tf": 1}, "src.ast_nodes.operations.ADD.ADD": {"tf": 1}, "src.ast_nodes.operations.ADD.ADD.__init__": {"tf": 1}, "src.ast_nodes.operations.ADD.ADD.instruction": {"tf": 1}, "src.ast_nodes.operations.AND": {"tf": 1}, "src.ast_nodes.operations.AND.AND": {"tf": 1}, "src.ast_nodes.operations.AND.AND.__init__": {"tf": 1}, "src.ast_nodes.operations.AND.AND.instruction": {"tf": 1}, "src.ast_nodes.operations.ASSIGN": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.__init__": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.instruction": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}, "src.ast_nodes.operations.BITAND": {"tf": 1}, "src.ast_nodes.operations.BITAND.BITAND": {"tf": 1}, "src.ast_nodes.operations.BITAND.BITAND.__init__": {"tf": 1}, "src.ast_nodes.operations.BITAND.BITAND.instruction": {"tf": 1}, "src.ast_nodes.operations.BITOR": {"tf": 1}, "src.ast_nodes.operations.BITOR.BITOR": {"tf": 1}, "src.ast_nodes.operations.BITOR.BITOR.__init__": {"tf": 1}, "src.ast_nodes.operations.BITOR.BITOR.instruction": {"tf": 1}, "src.ast_nodes.operations.DIFF": {"tf": 1}, "src.ast_nodes.operations.DIFF.DIFF": {"tf": 1}, "src.ast_nodes.operations.DIFF.DIFF.__init__": {"tf": 1}, "src.ast_nodes.operations.DIFF.DIFF.instruction": {"tf": 1}, "src.ast_nodes.operations.DIV": {"tf": 1}, "src.ast_nodes.operations.DIV.DIV": {"tf": 1}, "src.ast_nodes.operations.DIV.DIV.__init__": {"tf": 1}, "src.ast_nodes.operations.DIV.DIV.instruction": {"tf": 1}, "src.ast_nodes.operations.EQUAL": {"tf": 1}, "src.ast_nodes.operations.EQUAL.EQUAL": {"tf": 1}, "src.ast_nodes.operations.EQUAL.EQUAL.__init__": {"tf": 1}, "src.ast_nodes.operations.EQUAL.EQUAL.instruction": {"tf": 1}, "src.ast_nodes.operations.GREATER": {"tf": 1}, "src.ast_nodes.operations.GREATER.GREATER": {"tf": 1}, "src.ast_nodes.operations.GREATER.GREATER.__init__": {"tf": 1}, "src.ast_nodes.operations.GREATER.GREATER.instruction": {"tf": 1}, "src.ast_nodes.operations.LESS": {"tf": 1}, "src.ast_nodes.operations.LESS.LESS": {"tf": 1}, "src.ast_nodes.operations.LESS.LESS.__init__": {"tf": 1}, "src.ast_nodes.operations.LESS.LESS.instruction": {"tf": 1}, "src.ast_nodes.operations.LSHIFT": {"tf": 1}, "src.ast_nodes.operations.LSHIFT.LSHIFT": {"tf": 1}, "src.ast_nodes.operations.LSHIFT.LSHIFT.__init__": {"tf": 1}, "src.ast_nodes.operations.LSHIFT.LSHIFT.instruction": {"tf": 1}, "src.ast_nodes.operations.MOD": {"tf": 1}, "src.ast_nodes.operations.MOD.MOD": {"tf": 1}, "src.ast_nodes.operations.MOD.MOD.__init__": {"tf": 1}, "src.ast_nodes.operations.MOD.MOD.instruction": {"tf": 1}, "src.ast_nodes.operations.MULT": {"tf": 1}, "src.ast_nodes.operations.MULT.MULT": {"tf": 1}, "src.ast_nodes.operations.MULT.MULT.__init__": {"tf": 1}, "src.ast_nodes.operations.MULT.MULT.instruction": {"tf": 1}, "src.ast_nodes.operations.NOT": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.__init__": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.expression": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.symbol": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.instruction": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.type": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.get_certificate_label": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.print": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1}, "src.ast_nodes.operations.OR": {"tf": 1}, "src.ast_nodes.operations.OR.OR": {"tf": 1}, "src.ast_nodes.operations.OR.OR.__init__": {"tf": 1}, "src.ast_nodes.operations.OR.OR.instruction": {"tf": 1}, "src.ast_nodes.operations.RSHIFT": {"tf": 1}, "src.ast_nodes.operations.RSHIFT.RSHIFT": {"tf": 1}, "src.ast_nodes.operations.RSHIFT.RSHIFT.__init__": {"tf": 1}, "src.ast_nodes.operations.RSHIFT.RSHIFT.instruction": {"tf": 1}, "src.ast_nodes.operations.SUB": {"tf": 1}, "src.ast_nodes.operations.SUB.SUB": {"tf": 1}, "src.ast_nodes.operations.SUB.SUB.__init__": {"tf": 1}, "src.ast_nodes.operations.SUB.SUB.instruction": {"tf": 1}, "src.ast_nodes.operations.operation": {"tf": 1}, "src.ast_nodes.operations.operation.Operation": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.__init__": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.lhs": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.rhs": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.supports_float": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.print": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 1}}, "df": 85}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"src.lexer.Lexer.operators": {"tf": 1}}, "df": 1}}}}}}}}, "r": {"docs": {"src.ast_nodes.operations.OR": {"tf": 1}, "src.ast_nodes.operations.OR.OR": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.OR.OR.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.OR.OR.instruction": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}}, "df": 5}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.element_offset": {"tf": 1}}, "df": 1}}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"src.certificators.backend.BackendCertificator.special_instructions_handlers": {"tf": 1}, "src.certificators.backend.BackendCertificator.grouped_instructions_handlers": {"tf": 1}}, "df": 2}}}}}}, "l": {"docs": {}, "df": 0, "t": {"docs": {"src.virtual_machine.VirtualMachine.HALT": {"tf": 1}}, "df": 1}}}}, "j": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.virtual_machine.VirtualMachine.JAL": {"tf": 1}}, "df": 1}}, "r": {"docs": {"src.virtual_machine.VirtualMachine.JR": {"tf": 1}}, "df": 1}, "z": {"docs": {"src.virtual_machine.VirtualMachine.JZ": {"tf": 1}}, "df": 1}}}}, "annotation": {"root": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.source_code": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.root": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.current_symbol": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.current_value": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.current_statement_list": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.current_function_type": {"tf": 1}, "src.ast_nodes.node.Node.value": {"tf": 1}, "src.ast_nodes.node.Node.type": {"tf": 1}, "src.ast_nodes.node.Node.certificate_label": {"tf": 1}, "src.ast_nodes.node.Node.uses_register": {"tf": 1}, "src.ast_nodes.node.Node.instruction": {"tf": 1}, "src.ast_nodes.node.Node.symbol": {"tf": 1}, "src.ast_nodes.basic.CST.CST.instruction": {"tf": 1}, "src.ast_nodes.basic.CST.CST.symbol": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.instruction": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.children": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.children": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.statement_if_false": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.parenthesis_expression": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.statement_if_true": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.argument_value": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.parameter_type": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.function_call_metadata": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.arguments": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.type": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.symbol": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.parameters": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.statements": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.returned_value": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.type": {"tf": 1}, "src.ast_nodes.operations.ADD.ADD.instruction": {"tf": 1}, "src.ast_nodes.operations.AND.AND.instruction": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.instruction": {"tf": 1}, "src.ast_nodes.operations.BITAND.BITAND.instruction": {"tf": 1}, "src.ast_nodes.operations.BITOR.BITOR.instruction": {"tf": 1}, "src.ast_nodes.operations.DIFF.DIFF.instruction": {"tf": 1}, "src.ast_nodes.operations.DIV.DIV.instruction": {"tf": 1}, "src.ast_nodes.operations.EQUAL.EQUAL.instruction": {"tf": 1}, "src.ast_nodes.operations.GREATER.GREATER.instruction": {"tf": 1}, "src.ast_nodes.operations.LESS.LESS.instruction": {"tf": 1}, "src.ast_nodes.operations.LSHIFT.LSHIFT.instruction": {"tf": 1}, "src.ast_nodes.operations.MOD.MOD.instruction": {"tf": 1}, "src.ast_nodes.operations.MULT.MULT.instruction": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.expression": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.symbol": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.instruction": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.type": {"tf": 1}, "src.ast_nodes.operations.OR.OR.instruction": {"tf": 1}, "src.ast_nodes.operations.RSHIFT.RSHIFT.instruction": {"tf": 1}, "src.ast_nodes.operations.SUB.SUB.instruction": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.lhs": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.rhs": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.supports_float": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.variable": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.element": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.type": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.access_type": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.element_offset": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.active": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.variable_metadata": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.id": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.variable_metadata": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.instruction": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.size": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.symbol": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.computed_certificate": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.initial_prime": {"tf": 1}, "src.certificators.backend.BackendCertificator.register_tracker": {"tf": 1}, "src.certificators.backend.BackendCertificator.variable_prime_tracker": {"tf": 1}, "src.certificators.backend.BackendCertificator.functions_primes": {"tf": 1}, "src.certificators.backend.BackendCertificator.instruction_status": {"tf": 1}, "src.certificators.backend.BackendCertificator.special_instructions_handlers": {"tf": 1}, "src.certificators.backend.BackendCertificator.grouped_instructions_handlers": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.ast": {"tf": 1}, "src.code_generator.CodeGenerator.root": {"tf": 1}, "src.code_generator.CodeGenerator.program": {"tf": 1}, "src.code_generator.CodeGenerator.register": {"tf": 1}, "src.lexer.Lexer.conditionals": {"tf": 1}, "src.lexer.Lexer.symbols": {"tf": 1}, "src.lexer.Lexer.operators": {"tf": 1}, "src.lexer.Lexer.types": {"tf": 1}, "src.lexer.Lexer.reserved_words": {"tf": 1}, "src.lexer.Lexer.source_code": {"tf": 1}, "src.lexer.Lexer.functions": {"tf": 1}, "src.lexer.Lexer.globals": {"tf": 1}, "src.lexer.Lexer.variable_count": {"tf": 1}, "src.lexer.Lexer.struct_prime": {"tf": 1}, "src.lexer.Lexer.variable_prime": {"tf": 1}, "src.utils.builtin_types": {"tf": 1}, "src.virtual_machine.VirtualMachine.program": {"tf": 1}, "src.virtual_machine.VirtualMachine.memory": {"tf": 1}, "src.virtual_machine.VirtualMachine.memory_size": {"tf": 1}, "src.virtual_machine.VirtualMachine.memory_pointer": {"tf": 1}, "src.virtual_machine.VirtualMachine.program_counter": {"tf": 1}, "src.virtual_machine.VirtualMachine.registers": {"tf": 1}, "src.virtual_machine.VirtualMachine.variables": {"tf": 1}}, "df": 96, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.source_code": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.current_value": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.current_statement_list": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.function_call_metadata": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.element_offset": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.variable_metadata": {"tf": 1}, "src.certificators.backend.BackendCertificator.register_tracker": {"tf": 1}, "src.certificators.backend.BackendCertificator.special_instructions_handlers": {"tf": 1}, "src.certificators.backend.BackendCertificator.grouped_instructions_handlers": {"tf": 1}, "src.code_generator.CodeGenerator.program": {"tf": 1}, "src.lexer.Lexer.functions": {"tf": 1}, "src.lexer.Lexer.globals": {"tf": 1}, "src.virtual_machine.VirtualMachine.program": {"tf": 1}}, "df": 13, "[": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.source_code": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.variable_metadata": {"tf": 1}, "src.certificators.backend.BackendCertificator.special_instructions_handlers": {"tf": 1}, "src.certificators.backend.BackendCertificator.grouped_instructions_handlers": {"tf": 1}, "src.code_generator.CodeGenerator.program": {"tf": 1}, "src.lexer.Lexer.conditionals": {"tf": 1}, "src.lexer.Lexer.symbols": {"tf": 1}, "src.lexer.Lexer.operators": {"tf": 1}, "src.lexer.Lexer.types": {"tf": 1}, "src.lexer.Lexer.reserved_words": {"tf": 1}, "src.lexer.Lexer.functions": {"tf": 1}, "src.lexer.Lexer.globals": {"tf": 1}, "src.utils.builtin_types": {"tf": 1}, "src.virtual_machine.VirtualMachine.program": {"tf": 1}, "src.virtual_machine.VirtualMachine.memory": {"tf": 1}}, "df": 15}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.certificators.backend.BackendCertificator.register_tracker": {"tf": 1}, "src.certificators.backend.BackendCertificator.variable_prime_tracker": {"tf": 1}, "src.certificators.backend.BackendCertificator.functions_primes": {"tf": 1}, "src.certificators.backend.BackendCertificator.instruction_status": {"tf": 1}, "src.virtual_machine.VirtualMachine.variables": {"tf": 1}}, "df": 5}}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"src.virtual_machine.VirtualMachine.registers": {"tf": 1}}, "df": 1}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.root": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.statement_if_false": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.parenthesis_expression": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.statement_if_true": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.argument_value": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.statements": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.returned_value": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.expression": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.lhs": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.rhs": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.variable": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.element": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.ast": {"tf": 1}, "src.code_generator.CodeGenerator.root": {"tf": 1}}, "df": 14}}, "t": {"docs": {}, "df": 0, "r": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.current_symbol": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.current_function_type": {"tf": 1}, "src.ast_nodes.node.Node.value": {"tf": 1}, "src.ast_nodes.node.Node.certificate_label": {"tf": 1}, "src.ast_nodes.node.Node.instruction": {"tf": 1}, "src.ast_nodes.node.Node.symbol": {"tf": 1}, "src.ast_nodes.basic.CST.CST.instruction": {"tf": 1}, "src.ast_nodes.basic.CST.CST.symbol": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.instruction": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.parameter_type": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.type": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.symbol": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.type": {"tf": 1}, "src.ast_nodes.operations.ADD.ADD.instruction": {"tf": 1}, "src.ast_nodes.operations.AND.AND.instruction": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.instruction": {"tf": 1}, "src.ast_nodes.operations.BITAND.BITAND.instruction": {"tf": 1}, "src.ast_nodes.operations.BITOR.BITOR.instruction": {"tf": 1}, "src.ast_nodes.operations.DIFF.DIFF.instruction": {"tf": 1}, "src.ast_nodes.operations.DIV.DIV.instruction": {"tf": 1}, "src.ast_nodes.operations.EQUAL.EQUAL.instruction": {"tf": 1}, "src.ast_nodes.operations.GREATER.GREATER.instruction": {"tf": 1}, "src.ast_nodes.operations.LESS.LESS.instruction": {"tf": 1}, "src.ast_nodes.operations.LSHIFT.LSHIFT.instruction": {"tf": 1}, "src.ast_nodes.operations.MOD.MOD.instruction": {"tf": 1}, "src.ast_nodes.operations.MULT.MULT.instruction": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.symbol": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.instruction": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.type": {"tf": 1}, "src.ast_nodes.operations.OR.OR.instruction": {"tf": 1}, "src.ast_nodes.operations.RSHIFT.RSHIFT.instruction": {"tf": 1}, "src.ast_nodes.operations.SUB.SUB.instruction": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.type": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.access_type": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.variable_metadata": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.instruction": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.symbol": {"tf": 1}, "src.lexer.Lexer.conditionals": {"tf": 1}, "src.lexer.Lexer.symbols": {"tf": 1}, "src.lexer.Lexer.operators": {"tf": 1}, "src.lexer.Lexer.types": {"tf": 1}, "src.lexer.Lexer.reserved_words": {"tf": 1}, "src.lexer.Lexer.source_code": {"tf": 1}, "src.virtual_machine.VirtualMachine.memory": {"tf": 1}, "src.virtual_machine.VirtualMachine.registers": {"tf": 1}, "src.virtual_machine.VirtualMachine.variables": {"tf": 1}}, "df": 46}}, "e": {"docs": {}, "df": 0, "q": {"docs": {"src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.statements": {"tf": 1.4142135623730951}}, "df": 1}}, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "x": {"docs": {"src.certificators.frontend.FrontendCertificator.ast": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.root": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.children": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.children": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.statement_if_false": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.parenthesis_expression": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.statement_if_true": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.argument_value": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.arguments": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.parameters": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.statements": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.returned_value": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.expression": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.lhs": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.rhs": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.variable": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.element": {"tf": 1.4142135623730951}, "src.code_generator.CodeGenerator.root": {"tf": 1}}, "df": 17}}, "r": {"docs": {}, "df": 0, "g": {"docs": {"src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.arguments": {"tf": 1.4142135623730951}}, "df": 1}}, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"src.certificators.frontend.FrontendCertificator.ast": {"tf": 1}}, "df": 1, "s": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {"src.certificators.frontend.FrontendCertificator.ast": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.basic.PROG.PROG.children": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.SEQ.SEQ.children": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE.statement_if_false": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.conditional.Conditional.parenthesis_expression": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.conditional.Conditional.statement_if_true": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.RET_SYM.RET_SYM.returned_value": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.NOT.NOT.expression": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.operation.Operation.lhs": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.operation.Operation.rhs": {"tf": 1.4142135623730951}}, "df": 9, "s": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.root": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.children": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.children": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.statement_if_false": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.parenthesis_expression": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.statement_if_true": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.argument_value": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.arguments": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.parameters": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.statements": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.returned_value": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.expression": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.lhs": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.rhs": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.variable": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.element": {"tf": 1.4142135623730951}, "src.code_generator.CodeGenerator.root": {"tf": 1}}, "df": 17}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.node.Node.value": {"tf": 1}, "src.virtual_machine.VirtualMachine.memory": {"tf": 1}}, "df": 2}}}}}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.root": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.argument_value": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.statements": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.element": {"tf": 1}, "src.code_generator.CodeGenerator.root": {"tf": 1}}, "df": 5}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"src.ast_nodes.node.Node.uses_register": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.supports_float": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.active": {"tf": 1}, "src.certificators.backend.BackendCertificator.instruction_status": {"tf": 1}}, "df": 4}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.root": {"tf": 1.4142135623730951}, "src.code_generator.CodeGenerator.root": {"tf": 1.4142135623730951}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {"src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.parameters": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.current_statement_list": {"tf": 1}}, "df": 1}}}}}}}}}, "s": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {"src.ast_nodes.basic.PROG.PROG.children": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.children": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.arguments": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.parameters": {"tf": 1}}, "df": 4}}, "t": {"docs": {}, "df": 0, "r": {"docs": {"src.certificators.abstract_certificator.AbstractCertificator.computed_certificate": {"tf": 1}}, "df": 1}}}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.node.Node.value": {"tf": 1}, "src.virtual_machine.VirtualMachine.memory": {"tf": 1}, "src.virtual_machine.VirtualMachine.registers": {"tf": 1.4142135623730951}}, "df": 3}}}, "s": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {"src.ast_nodes.functions.ARG.ARG.argument_value": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.element": {"tf": 1}}, "df": 2}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"src.code_generator.CodeGenerator.program": {"tf": 1}, "src.virtual_machine.VirtualMachine.program": {"tf": 1}}, "df": 2}}}}}}}}}}, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.node.Node.value": {"tf": 1}, "src.virtual_machine.VirtualMachine.memory": {"tf": 1}, "src.virtual_machine.VirtualMachine.registers": {"tf": 1}}, "df": 3}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.arguments": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.parameters": {"tf": 1}}, "df": 2}}}}}}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"src.ast_nodes.node.Node.type": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.functions.ARG.ARG.argument_value": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.element": {"tf": 1.4142135623730951}}, "df": 2}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"src.ast_nodes.functions.ARG.ARG.argument_value": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.variable": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.element": {"tf": 1.4142135623730951}}, "df": 3, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.functions.ARG.ARG.argument_value": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.variable": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.element": {"tf": 1}}, "df": 3}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.variables.VAR.VAR.id": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.size": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.initial_prime": {"tf": 1}, "src.certificators.backend.BackendCertificator.variable_prime_tracker": {"tf": 1}, "src.certificators.backend.BackendCertificator.functions_primes": {"tf": 1}, "src.code_generator.CodeGenerator.register": {"tf": 1}, "src.lexer.Lexer.variable_count": {"tf": 1}, "src.lexer.Lexer.struct_prime": {"tf": 1}, "src.lexer.Lexer.variable_prime": {"tf": 1}, "src.utils.builtin_types": {"tf": 1}, "src.virtual_machine.VirtualMachine.memory_size": {"tf": 1}, "src.virtual_machine.VirtualMachine.memory_pointer": {"tf": 1}, "src.virtual_machine.VirtualMachine.program_counter": {"tf": 1}}, "df": 13}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {"src.certificators.frontend.FrontendCertificator.ast": {"tf": 1}}, "df": 1}}}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"src.code_generator.CodeGenerator.program": {"tf": 1}, "src.virtual_machine.VirtualMachine.program": {"tf": 1}, "src.virtual_machine.VirtualMachine.memory": {"tf": 1}, "src.virtual_machine.VirtualMachine.registers": {"tf": 1}}, "df": 4}}}}}}}}, "default_value": {"root": {"1": {"0": {"1": {"docs": {"src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 1}, "3": {"docs": {"src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 1}, "7": {"docs": {"src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 1}, "9": {"docs": {"src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "1": {"3": {"docs": {"src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 1}, "docs": {"src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 1}, "3": {"docs": {"src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 1}, "7": {"docs": {"src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 1}, "9": {"docs": {"src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "2": {"3": {"docs": {"src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 1}, "9": {"docs": {"src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 1}, "docs": {"src.lexer.Lexer.types": {"tf": 1}, "src.lexer.Lexer.reserved_words": {"tf": 1}, "src.utils.builtin_types": {"tf": 1}, "src.utils.SYMBOLS_MAP": {"tf": 1}, "src.utils.TYPE_SYMBOLS_MAP": {"tf": 1}}, "df": 5}, "3": {"1": {"docs": {"src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 1}, "7": {"docs": {"src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 1}, "docs": {"src.lexer.Lexer.types": {"tf": 1}, "src.lexer.Lexer.reserved_words": {"tf": 1}, "src.utils.SYMBOLS_MAP": {"tf": 1}, "src.utils.TYPE_SYMBOLS_MAP": {"tf": 1}}, "df": 4}, "4": {"1": {"docs": {"src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 1}, "3": {"docs": {"src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 1}, "7": {"docs": {"src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 1}, "docs": {"src.utils.builtin_types": {"tf": 1.4142135623730951}}, "df": 1}, "5": {"3": {"docs": {"src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 1}, "9": {"docs": {"src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 1}, "docs": {"src.lexer.Lexer.types": {"tf": 1}, "src.lexer.Lexer.reserved_words": {"tf": 1}, "src.utils.SYMBOLS_MAP": {"tf": 1}, "src.utils.TYPE_SYMBOLS_MAP": {"tf": 1}}, "df": 4}, "6": {"1": {"docs": {"src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 1}, "7": {"docs": {"src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "7": {"1": {"docs": {"src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 1}, "3": {"docs": {"src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 1}, "9": {"docs": {"src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 1}, "docs": {"src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 1}, "8": {"3": {"docs": {"src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 1}, "9": {"docs": {"src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "9": {"7": {"docs": {"src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {"src.lexer.Lexer.conditionals": {"tf": 2.449489742783178}, "src.lexer.Lexer.symbols": {"tf": 3.7416573867739413}, "src.lexer.Lexer.operators": {"tf": 5.196152422706632}, "src.lexer.Lexer.types": {"tf": 2}, "src.lexer.Lexer.reserved_words": {"tf": 6.855654600401044}, "src.utils.builtin_types": {"tf": 2}, "src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 9.539392014169456}, "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING": {"tf": 5.385164807134504}, "src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 5}, "src.utils.SYMBOLS_MAP": {"tf": 5.656854249492381}, "src.utils.TYPE_SYMBOLS_MAP": {"tf": 4}}, "df": 11, "x": {"2": {"7": {"docs": {"src.lexer.Lexer.conditionals": {"tf": 4}, "src.lexer.Lexer.symbols": {"tf": 5.656854249492381}, "src.lexer.Lexer.operators": {"tf": 8.246211251235321}, "src.lexer.Lexer.types": {"tf": 2.449489742783178}, "src.lexer.Lexer.reserved_words": {"tf": 11.40175425099138}, "src.utils.builtin_types": {"tf": 2.449489742783178}, "src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 12.165525060596439}, "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING": {"tf": 10.392304845413264}, "src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 10.198039027185569}, "src.utils.SYMBOLS_MAP": {"tf": 10.954451150103322}, "src.utils.TYPE_SYMBOLS_MAP": {"tf": 4.898979485566356}}, "df": 11}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "d": {"docs": {}, "df": 0, "o": {"docs": {"src.lexer.Lexer.conditionals": {"tf": 1.4142135623730951}, "src.lexer.Lexer.reserved_words": {"tf": 1.4142135623730951}, "src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1}, "src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 4, "t": {"docs": {"src.lexer.Lexer.symbols": {"tf": 1}, "src.lexer.Lexer.reserved_words": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "v": {"docs": {"src.lexer.Lexer.operators": {"tf": 1}, "src.lexer.Lexer.reserved_words": {"tf": 1}, "src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1.4142135623730951}, "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING": {"tf": 1.7320508075688772}, "src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}, "src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 6}, "f": {"docs": {}, "df": 0, "f": {"docs": {"src.lexer.Lexer.operators": {"tf": 1}, "src.lexer.Lexer.reserved_words": {"tf": 1}, "src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1}, "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING": {"tf": 1.4142135623730951}, "src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 5}}}, "e": {"docs": {}, "df": 0, "f": {"docs": {"src.lexer.Lexer.reserved_words": {"tf": 1}, "src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1}, "src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 3}}}, "s": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "m": {"docs": {"src.lexer.Lexer.conditionals": {"tf": 2}, "src.lexer.Lexer.reserved_words": {"tf": 2.23606797749979}, "src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1}, "src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 4, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"src.utils.TYPE_SYMBOLS_MAP": {"tf": 1.7320508075688772}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {"src.lexer.Lexer.symbols": {"tf": 1}, "src.lexer.Lexer.reserved_words": {"tf": 1}}, "df": 2}}}, "u": {"docs": {}, "df": 0, "b": {"docs": {"src.lexer.Lexer.operators": {"tf": 1}, "src.lexer.Lexer.reserved_words": {"tf": 1}, "src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1.4142135623730951}, "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING": {"tf": 1.7320508075688772}, "src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}, "src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 6}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"src.lexer.Lexer.types": {"tf": 1}, "src.lexer.Lexer.reserved_words": {"tf": 1}, "src.utils.builtin_types": {"tf": 1}, "src.utils.TYPE_SYMBOLS_MAP": {"tf": 1}}, "df": 4}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"src.lexer.Lexer.reserved_words": {"tf": 1.4142135623730951}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1.4142135623730951}, "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING": {"tf": 1}, "src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1.4142135623730951}}, "df": 3}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {"src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "p": {"docs": {"src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}}, "df": 1}}}}}}, "w": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"src.lexer.Lexer.conditionals": {"tf": 1.4142135623730951}, "src.lexer.Lexer.reserved_words": {"tf": 1.4142135623730951}, "src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1}, "src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 4}}}}}, "i": {"docs": {}, "df": 0, "f": {"docs": {"src.lexer.Lexer.conditionals": {"tf": 1.4142135623730951}, "src.lexer.Lexer.reserved_words": {"tf": 1.4142135623730951}, "src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1}, "src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 4, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1}, "src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 2}}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.lexer.Lexer.types": {"tf": 1}, "src.lexer.Lexer.reserved_words": {"tf": 1}, "src.utils.builtin_types": {"tf": 1}, "src.utils.TYPE_SYMBOLS_MAP": {"tf": 1.7320508075688772}}, "df": 4}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"src.lexer.Lexer.conditionals": {"tf": 1.4142135623730951}, "src.lexer.Lexer.reserved_words": {"tf": 1.4142135623730951}}, "df": 2}}}, "q": {"docs": {"src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1}, "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING": {"tf": 1}, "src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}}, "df": 3, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.lexer.Lexer.operators": {"tf": 1}, "src.lexer.Lexer.reserved_words": {"tf": 1}, "src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1}, "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING": {"tf": 1.4142135623730951}, "src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 5}}}}, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"src.utils.TYPE_SYMBOLS_MAP": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}, "l": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {"src.lexer.Lexer.symbols": {"tf": 1}, "src.lexer.Lexer.reserved_words": {"tf": 1}}, "df": 2}}}}, "b": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {"src.lexer.Lexer.symbols": {"tf": 1}, "src.lexer.Lexer.reserved_words": {"tf": 1}}, "df": 2}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"src.lexer.Lexer.symbols": {"tf": 1}, "src.lexer.Lexer.reserved_words": {"tf": 1}}, "df": 2}}}, "t": {"docs": {"src.lexer.Lexer.operators": {"tf": 1.7320508075688772}, "src.lexer.Lexer.reserved_words": {"tf": 1.7320508075688772}, "src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1}, "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING": {"tf": 1}, "src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}, "src.utils.TYPE_SYMBOLS_MAP": {"tf": 1.7320508075688772}}, "df": 6}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"src.lexer.Lexer.operators": {"tf": 1}, "src.lexer.Lexer.reserved_words": {"tf": 1}, "src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1}, "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING": {"tf": 1.4142135623730951}, "src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 5}}}, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {"src.lexer.Lexer.operators": {"tf": 1}, "src.lexer.Lexer.reserved_words": {"tf": 1}, "src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1.4142135623730951}, "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING": {"tf": 1.4142135623730951}, "src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}, "src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 6}}}}}, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1}, "src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {"src.lexer.Lexer.symbols": {"tf": 1}, "src.lexer.Lexer.reserved_words": {"tf": 1}}, "df": 2}}}}, "b": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {"src.lexer.Lexer.symbols": {"tf": 1}, "src.lexer.Lexer.reserved_words": {"tf": 1}}, "df": 2}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"src.lexer.Lexer.symbols": {"tf": 1}, "src.lexer.Lexer.reserved_words": {"tf": 1}}, "df": 2}}}, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {"src.lexer.Lexer.operators": {"tf": 1}, "src.lexer.Lexer.reserved_words": {"tf": 1}, "src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1.4142135623730951}, "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING": {"tf": 1.4142135623730951}, "src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}, "src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 6}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"src.lexer.Lexer.reserved_words": {"tf": 1}, "src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1}, "src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 3, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"src.lexer.Lexer.reserved_words": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {"src.lexer.Lexer.operators": {"tf": 1}, "src.lexer.Lexer.reserved_words": {"tf": 1}, "src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1}, "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING": {"tf": 1}, "src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 5}}}}}, "d": {"docs": {}, "df": 0, "d": {"docs": {"src.lexer.Lexer.operators": {"tf": 1}, "src.lexer.Lexer.reserved_words": {"tf": 1}, "src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1.4142135623730951}, "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING": {"tf": 1.7320508075688772}, "src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}, "src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 6, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1.4142135623730951}, "src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}, "src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 3}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {"src.lexer.Lexer.operators": {"tf": 1.7320508075688772}, "src.lexer.Lexer.reserved_words": {"tf": 1.7320508075688772}}, "df": 2}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"src.lexer.Lexer.operators": {"tf": 1}, "src.lexer.Lexer.reserved_words": {"tf": 1}, "src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1.4142135623730951}, "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING": {"tf": 1.7320508075688772}, "src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}, "src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 6}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {"src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1.4142135623730951}, "src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1.4142135623730951}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {"src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1}, "src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 2}}}, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"src.lexer.Lexer.operators": {"tf": 1}, "src.lexer.Lexer.reserved_words": {"tf": 1}, "src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1.4142135623730951}, "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING": {"tf": 1.7320508075688772}, "src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}, "src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 6}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {"src.lexer.Lexer.operators": {"tf": 1}, "src.lexer.Lexer.reserved_words": {"tf": 1}, "src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1.4142135623730951}, "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING": {"tf": 1.4142135623730951}, "src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}, "src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 6}, "v": {"docs": {"src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1.7320508075688772}, "src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1.4142135623730951}}, "df": 2}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {"src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}}, "df": 1}}}}, "g": {"docs": {}, "df": 0, "t": {"docs": {"src.lexer.Lexer.operators": {"tf": 1.7320508075688772}, "src.lexer.Lexer.reserved_words": {"tf": 1.7320508075688772}, "src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1}, "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING": {"tf": 1}, "src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}, "src.utils.TYPE_SYMBOLS_MAP": {"tf": 1.7320508075688772}}, "df": 6}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.lexer.Lexer.operators": {"tf": 1}, "src.lexer.Lexer.reserved_words": {"tf": 1}, "src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1}, "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING": {"tf": 1.4142135623730951}, "src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 5}}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.lexer.Lexer.operators": {"tf": 1}, "src.lexer.Lexer.reserved_words": {"tf": 1}, "src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1.4142135623730951}, "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING": {"tf": 1.7320508075688772}, "src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}, "src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 6}}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"src.lexer.Lexer.operators": {"tf": 1}, "src.lexer.Lexer.reserved_words": {"tf": 1}, "src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1.4142135623730951}, "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING": {"tf": 1.4142135623730951}, "src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}, "src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 6}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.lexer.Lexer.operators": {"tf": 1}, "src.lexer.Lexer.reserved_words": {"tf": 1}, "src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1.4142135623730951}, "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING": {"tf": 1.4142135623730951}, "src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}, "src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 6}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "s": {"docs": {"src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}}, "df": 1}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"src.lexer.Lexer.operators": {"tf": 1}, "src.lexer.Lexer.reserved_words": {"tf": 1}, "src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1.7320508075688772}, "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING": {"tf": 1.4142135623730951}, "src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1.4142135623730951}, "src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 6}}, "e": {"docs": {}, "df": 0, "q": {"docs": {"src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1}, "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING": {"tf": 1}, "src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}}, "df": 3}}}, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"src.lexer.Lexer.types": {"tf": 1}, "src.lexer.Lexer.reserved_words": {"tf": 1}, "src.utils.builtin_types": {"tf": 1}, "src.utils.TYPE_SYMBOLS_MAP": {"tf": 1.4142135623730951}}, "df": 4}}}, "t": {"docs": {"src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1}, "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING": {"tf": 1}, "src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}}, "df": 3}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1}, "src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 2, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}}, "df": 1}}}}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "d": {"docs": {"src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1}, "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING": {"tf": 1}, "src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}}, "df": 3}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1}, "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING": {"tf": 1}, "src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}}, "df": 3}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "b": {"docs": {"src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1}, "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING": {"tf": 1}, "src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}}, "df": 3}}}, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1}, "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING": {"tf": 1}, "src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}}, "df": 3}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {"src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1}, "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING": {"tf": 1}, "src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}}, "df": 3}}}, "g": {"docs": {}, "df": 0, "t": {"docs": {"src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1}, "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING": {"tf": 1}, "src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}}, "df": 3}}, "e": {"docs": {}, "df": 0, "q": {"docs": {"src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1}, "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING": {"tf": 1}, "src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}}, "df": 3}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {"src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1}, "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING": {"tf": 1}, "src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}}, "df": 3}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1}, "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING": {"tf": 1}, "src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}}, "df": 3}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {"src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1}, "src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 2}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1}, "src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}}, "df": 2, "s": {"docs": {"src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}}, "df": 1}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1}, "src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 2}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"src.utils.TYPE_SYMBOLS_MAP": {"tf": 1.7320508075688772}}, "df": 1}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1.7320508075688772}, "src.utils.SYMBOLS_MAP": {"tf": 1.7320508075688772}}, "df": 2, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}}, "df": 1}}}}}}}, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1}, "src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 2}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {"src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1}, "src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {"src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1}, "src.utils.SYMBOLS_MAP": {"tf": 1}}, "df": 2}}}}, "j": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1}, "src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}}, "df": 2}}, "r": {"docs": {"src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1}, "src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}}, "df": 2}, "z": {"docs": {"src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 2}, "src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}}, "df": 2}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "s": {"docs": {"src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}}, "df": 1}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1}, "src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}}, "df": 2}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "s": {"docs": {"src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}, "src.utils.TYPE_SYMBOLS_MAP": {"tf": 1.7320508075688772}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1}}, "df": 1}}}}}}}, "signature": {"root": {"0": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.print_tree": {"tf": 1}, "src.ast_nodes.node.Node.print": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.print": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.print": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.print": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.print": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.print": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.print": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 1}}, "df": 15}, "1": {"0": {"2": {"4": {"docs": {"src.virtual_machine.VirtualMachine.__init__": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.__init__": {"tf": 4.69041575982343}, "src.abstract_syntax_tree.AbstractSyntaxTree.build": {"tf": 5.291502622129181}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_struct_definitions": {"tf": 3.4641016151377544}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_global_variables": {"tf": 3.4641016151377544}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_functions": {"tf": 3.4641016151377544}, "src.abstract_syntax_tree.AbstractSyntaxTree.print_tree": {"tf": 5.0990195135927845}, "src.abstract_syntax_tree.AbstractSyntaxTree.get_root": {"tf": 5.291502622129181}, "src.ast_nodes.node.Node.__init__": {"tf": 8.602325267042627}, "src.ast_nodes.node.Node.get_value": {"tf": 5.656854249492381}, "src.ast_nodes.node.Node.get_type": {"tf": 4.123105625617661}, "src.ast_nodes.node.Node.get_certificate_label": {"tf": 4.123105625617661}, "src.ast_nodes.node.Node.print": {"tf": 5.0990195135927845}, "src.ast_nodes.node.Node.generate_code": {"tf": 7.416198487095663}, "src.ast_nodes.node.Node.certificate": {"tf": 4.47213595499958}, "src.ast_nodes.basic.CST.CST.__init__": {"tf": 4.69041575982343}, "src.ast_nodes.basic.PROG.PROG.add_child": {"tf": 5.656854249492381}, "src.ast_nodes.basic.PROG.PROG.get_certificate_label": {"tf": 4.123105625617661}, "src.ast_nodes.basic.PROG.PROG.print": {"tf": 5.0990195135927845}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 7.745966692414834}, "src.ast_nodes.basic.PROG.PROG.certificate": {"tf": 4.47213595499958}, "src.ast_nodes.basic.SEQ.SEQ.__init__": {"tf": 3.1622776601683795}, "src.ast_nodes.basic.SEQ.SEQ.add_child": {"tf": 5.656854249492381}, "src.ast_nodes.basic.SEQ.SEQ.get_certificate_label": {"tf": 4.123105625617661}, "src.ast_nodes.basic.SEQ.SEQ.print": {"tf": 5.0990195135927845}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 7.745966692414834}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 4.47213595499958}, "src.ast_nodes.conditionals.DO.DO.__init__": {"tf": 6.782329983125268}, "src.ast_nodes.conditionals.DO.DO.get_certificate_label": {"tf": 4.123105625617661}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 7.416198487095663}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 4.47213595499958}, "src.ast_nodes.conditionals.IF.IF.__init__": {"tf": 6.782329983125268}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 7.416198487095663}, "src.ast_nodes.conditionals.IFELSE.IFELSE.__init__": {"tf": 8.18535277187245}, "src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label": {"tf": 4.123105625617661}, "src.ast_nodes.conditionals.IFELSE.IFELSE.print": {"tf": 5.0990195135927845}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 7.416198487095663}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 4.47213595499958}, "src.ast_nodes.conditionals.WHILE.WHILE.__init__": {"tf": 6.782329983125268}, "src.ast_nodes.conditionals.WHILE.WHILE.get_certificate_label": {"tf": 4.123105625617661}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 7.416198487095663}, "src.ast_nodes.conditionals.conditional.Conditional.__init__": {"tf": 6.782329983125268}, "src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label": {"tf": 4.123105625617661}, "src.ast_nodes.conditionals.conditional.Conditional.print": {"tf": 5.0990195135927845}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 4.47213595499958}, "src.ast_nodes.functions.ARG.ARG.__init__": {"tf": 8}, "src.ast_nodes.functions.ARG.ARG.get_certificate_label": {"tf": 4.123105625617661}, "src.ast_nodes.functions.ARG.ARG.print": {"tf": 5.0990195135927845}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 7.745966692414834}, "src.ast_nodes.functions.ARG.ARG.certificate": {"tf": 4.47213595499958}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.__init__": {"tf": 3.4641016151377544}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.get_certificate_label": {"tf": 4.123105625617661}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"tf": 5.0990195135927845}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 7.745966692414834}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 4.47213595499958}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.__init__": {"tf": 6.6332495807108}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.set_statements": {"tf": 6}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 4.123105625617661}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"tf": 5.0990195135927845}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 7.416198487095663}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 4.47213595499958}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_function_name": {"tf": 3.4641016151377544}, "src.ast_nodes.functions.PARAM.PARAM.__init__": {"tf": 3.4641016151377544}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 7.416198487095663}, "src.ast_nodes.functions.RET_SYM.RET_SYM.__init__": {"tf": 5.656854249492381}, "src.ast_nodes.functions.RET_SYM.RET_SYM.get_certificate_label": {"tf": 4.123105625617661}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"tf": 5.0990195135927845}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 7.745966692414834}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 4.47213595499958}, "src.ast_nodes.operations.ADD.ADD.__init__": {"tf": 7.0710678118654755}, "src.ast_nodes.operations.AND.AND.__init__": {"tf": 7.0710678118654755}, "src.ast_nodes.operations.ASSIGN.ASSIGN.__init__": {"tf": 6.6332495807108}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 7.745966692414834}, "src.ast_nodes.operations.BITAND.BITAND.__init__": {"tf": 7.0710678118654755}, "src.ast_nodes.operations.BITOR.BITOR.__init__": {"tf": 7.0710678118654755}, "src.ast_nodes.operations.DIFF.DIFF.__init__": {"tf": 7.0710678118654755}, "src.ast_nodes.operations.DIV.DIV.__init__": {"tf": 7.0710678118654755}, "src.ast_nodes.operations.EQUAL.EQUAL.__init__": {"tf": 7.0710678118654755}, "src.ast_nodes.operations.GREATER.GREATER.__init__": {"tf": 7.0710678118654755}, "src.ast_nodes.operations.LESS.LESS.__init__": {"tf": 7.0710678118654755}, "src.ast_nodes.operations.LSHIFT.LSHIFT.__init__": {"tf": 7.0710678118654755}, "src.ast_nodes.operations.MOD.MOD.__init__": {"tf": 7.0710678118654755}, "src.ast_nodes.operations.MULT.MULT.__init__": {"tf": 7.0710678118654755}, "src.ast_nodes.operations.NOT.NOT.__init__": {"tf": 5.477225575051661}, "src.ast_nodes.operations.NOT.NOT.get_certificate_label": {"tf": 4.123105625617661}, "src.ast_nodes.operations.NOT.NOT.print": {"tf": 5.0990195135927845}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 7.745966692414834}, "src.ast_nodes.operations.OR.OR.__init__": {"tf": 7.0710678118654755}, "src.ast_nodes.operations.RSHIFT.RSHIFT.__init__": {"tf": 7.0710678118654755}, "src.ast_nodes.operations.SUB.SUB.__init__": {"tf": 7.0710678118654755}, "src.ast_nodes.operations.operation.Operation.__init__": {"tf": 9.1104335791443}, "src.ast_nodes.operations.operation.Operation.print": {"tf": 5.0990195135927845}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 7.745966692414834}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 4.47213595499958}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.__init__": {"tf": 8.94427190999916}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 5.0990195135927845}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 7.416198487095663}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 4.47213595499958}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.add_context": {"tf": 5.477225575051661}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.__init__": {"tf": 5.477225575051661}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 5.0990195135927845}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 4.47213595499958}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 7.416198487095663}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_symbol": {"tf": 3.4641016151377544}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_attribute_types": {"tf": 4.123105625617661}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.is_active": {"tf": 3.4641016151377544}, "src.ast_nodes.variables.VAR.VAR.__init__": {"tf": 4.69041575982343}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 7.416198487095663}, "src.ast_nodes.variables.VAR.VAR.get_metadata": {"tf": 4.69041575982343}, "src.ast_nodes.variables.VAR.VAR.add_context": {"tf": 5.477225575051661}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.__init__": {"tf": 3.4641016151377544}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 5.0990195135927845}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 7.416198487095663}, "src.certificators.abstract_certificator.AbstractCertificator.__init__": {"tf": 3.1622776601683795}, "src.certificators.abstract_certificator.AbstractCertificator.certificate": {"tf": 4.795831523312719}, "src.certificators.abstract_certificator.AbstractCertificator.get_certificate": {"tf": 4.123105625617661}, "src.certificators.backend.BackendCertificator.__init__": {"tf": 4.69041575982343}, "src.certificators.backend.BackendCertificator.certificate": {"tf": 4.795831523312719}, "src.certificators.frontend.FrontendCertificator.__init__": {"tf": 4.47213595499958}, "src.certificators.frontend.FrontendCertificator.certificate": {"tf": 4.795831523312719}, "src.code_generator.CodeGenerator.__init__": {"tf": 5.291502622129181}, "src.code_generator.CodeGenerator.print": {"tf": 3.4641016151377544}, "src.code_generator.CodeGenerator.generate_code": {"tf": 4.69041575982343}, "src.code_generator.CodeGenerator.parse_struct_definitions": {"tf": 3.4641016151377544}, "src.code_generator.CodeGenerator.parse_global_variables": {"tf": 3.4641016151377544}, "src.code_generator.CodeGenerator.parse_functions": {"tf": 3.4641016151377544}, "src.code_generator.CodeGenerator.get_program": {"tf": 4.69041575982343}, "src.lexer.Lexer.__init__": {"tf": 3.4641016151377544}, "src.lexer.Lexer.parse_source_code": {"tf": 4.69041575982343}, "src.lexer.Lexer.split_source": {"tf": 4.123105625617661}, "src.runner.Charon.__init__": {"tf": 10.862780491200215}, "src.runner.Charon.get_parsed_source": {"tf": 4.69041575982343}, "src.runner.Charon.get_ast": {"tf": 4.47213595499958}, "src.runner.Charon.get_program": {"tf": 4.69041575982343}, "src.runner.Charon.get_vm": {"tf": 4.47213595499958}, "src.runner.Charon.get_frontend_certificator": {"tf": 4.898979485566356}, "src.runner.Charon.get_backend_certificator": {"tf": 4.898979485566356}, "src.runner.create_instance": {"tf": 4.898979485566356}, "src.utils.is_prime": {"tf": 4}, "src.utils.next_prime": {"tf": 4}, "src.utils.previous_prime": {"tf": 4}, "src.utils.primes_list": {"tf": 4.58257569495584}, "src.utils.type_cast": {"tf": 7.483314773547883}, "src.utils.get_variable_size": {"tf": 4}, "src.utils.flatten_list": {"tf": 5.916079783099616}, "src.utils.get_certificate_symbol": {"tf": 3.4641016151377544}, "src.virtual_machine.VirtualMachine.__init__": {"tf": 7.0710678118654755}, "src.virtual_machine.VirtualMachine.get_memory": {"tf": 6.244997998398398}, "src.virtual_machine.VirtualMachine.print": {"tf": 3.4641016151377544}, "src.virtual_machine.VirtualMachine.run": {"tf": 3.4641016151377544}, "src.virtual_machine.VirtualMachine.ADD": {"tf": 7}, "src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 7}, "src.virtual_machine.VirtualMachine.ALLOC": {"tf": 7}, "src.virtual_machine.VirtualMachine.AND": {"tf": 7}, "src.virtual_machine.VirtualMachine.BITAND": {"tf": 7}, "src.virtual_machine.VirtualMachine.BITOR": {"tf": 7}, "src.virtual_machine.VirtualMachine.CONSTANT": {"tf": 7}, "src.virtual_machine.VirtualMachine.DIV": {"tf": 7}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 7}, "src.virtual_machine.VirtualMachine.FADD": {"tf": 7}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 7}, "src.virtual_machine.VirtualMachine.FDIV": {"tf": 7}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 7}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 7}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 7}, "src.virtual_machine.VirtualMachine.FMULT": {"tf": 7}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 7}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 7}, "src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 7}, "src.virtual_machine.VirtualMachine.FSUB": {"tf": 7}, "src.virtual_machine.VirtualMachine.GT": {"tf": 7}, "src.virtual_machine.VirtualMachine.HALT": {"tf": 7}, "src.virtual_machine.VirtualMachine.JAL": {"tf": 7}, "src.virtual_machine.VirtualMachine.JR": {"tf": 7}, "src.virtual_machine.VirtualMachine.JZ": {"tf": 7}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 7}, "src.virtual_machine.VirtualMachine.LSHIFT": {"tf": 7}, "src.virtual_machine.VirtualMachine.LT": {"tf": 7}, "src.virtual_machine.VirtualMachine.MOD": {"tf": 7}, "src.virtual_machine.VirtualMachine.MOV": {"tf": 7}, "src.virtual_machine.VirtualMachine.MULT": {"tf": 7}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 7}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 7}, "src.virtual_machine.VirtualMachine.OR": {"tf": 7}, "src.virtual_machine.VirtualMachine.RSHIFT": {"tf": 7}, "src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 7}, "src.virtual_machine.VirtualMachine.SITOFP": {"tf": 7}, "src.virtual_machine.VirtualMachine.STORE": {"tf": 7}, "src.virtual_machine.VirtualMachine.SUB": {"tf": 7}, "src.virtual_machine.VirtualMachine.TRUNC": {"tf": 7}}, "df": 189, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.__init__": {"tf": 1}, "src.lexer.Lexer.__init__": {"tf": 1}, "src.runner.Charon.__init__": {"tf": 1}, "src.runner.create_instance": {"tf": 1}}, "df": 4}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.__init__": {"tf": 1}, "src.ast_nodes.node.Node.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.node.Node.get_value": {"tf": 1}, "src.ast_nodes.node.Node.get_type": {"tf": 1}, "src.ast_nodes.node.Node.get_certificate_label": {"tf": 1}, "src.ast_nodes.node.Node.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.CST.CST.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.PROG.PROG.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.SEQ.SEQ.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.DO.DO.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.WHILE.WHILE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.__init__": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.__init__": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_function_name": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.RET_SYM.RET_SYM.__init__": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.NOT.NOT.get_certificate_label": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.operation.Operation.__init__": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.add_context": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_symbol": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_attribute_types": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR.VAR.get_metadata": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR.VAR.add_context": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1.4142135623730951}, "src.certificators.abstract_certificator.AbstractCertificator.certificate": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.get_certificate": {"tf": 1}, "src.certificators.backend.BackendCertificator.__init__": {"tf": 1}, "src.certificators.backend.BackendCertificator.certificate": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.certificate": {"tf": 1}, "src.code_generator.CodeGenerator.generate_code": {"tf": 1}, "src.code_generator.CodeGenerator.get_program": {"tf": 1}, "src.lexer.Lexer.__init__": {"tf": 1}, "src.lexer.Lexer.parse_source_code": {"tf": 1}, "src.lexer.Lexer.split_source": {"tf": 1}, "src.runner.Charon.__init__": {"tf": 1.4142135623730951}, "src.runner.Charon.get_parsed_source": {"tf": 1}, "src.runner.Charon.get_program": {"tf": 1}, "src.runner.create_instance": {"tf": 1}, "src.utils.type_cast": {"tf": 2}, "src.utils.get_certificate_symbol": {"tf": 1}, "src.virtual_machine.VirtualMachine.__init__": {"tf": 1}, "src.virtual_machine.VirtualMachine.get_memory": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.ADD": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.ALLOC": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.BITAND": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.BITOR": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.CONSTANT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.DIV": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FADD": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FDIV": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FMULT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FSUB": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.HALT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.JAL": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.JR": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.JZ": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.LSHIFT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.MOD": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.MOV": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.MULT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.RSHIFT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.SITOFP": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.STORE": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.SUB": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.TRUNC": {"tf": 1.4142135623730951}}, "df": 106, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.__init__": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.conditionals.IF.IF.__init__": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.conditional.Conditional.__init__": {"tf": 1}}, "df": 3, "s": {"docs": {"src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.set_statements": {"tf": 1}}, "df": 1}}}}}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "f": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.build": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_struct_definitions": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_global_variables": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_functions": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.print_tree": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.get_root": {"tf": 1}, "src.ast_nodes.node.Node.get_value": {"tf": 1}, "src.ast_nodes.node.Node.get_type": {"tf": 1}, "src.ast_nodes.node.Node.get_certificate_label": {"tf": 1}, "src.ast_nodes.node.Node.print": {"tf": 1}, "src.ast_nodes.node.Node.generate_code": {"tf": 1}, "src.ast_nodes.node.Node.certificate": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.add_child": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.print": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.certificate": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.add_child": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.print": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.print": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.print": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.print": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.set_statements": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_function_name": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.get_certificate_label": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.print": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.print": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.add_context": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_symbol": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_attribute_types": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.is_active": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.get_metadata": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.add_context": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.certificate": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.get_certificate": {"tf": 1}, "src.certificators.backend.BackendCertificator.certificate": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.certificate": {"tf": 1}, "src.code_generator.CodeGenerator.print": {"tf": 1}, "src.code_generator.CodeGenerator.generate_code": {"tf": 1}, "src.code_generator.CodeGenerator.parse_struct_definitions": {"tf": 1}, "src.code_generator.CodeGenerator.parse_global_variables": {"tf": 1}, "src.code_generator.CodeGenerator.parse_functions": {"tf": 1}, "src.code_generator.CodeGenerator.get_program": {"tf": 1}, "src.lexer.Lexer.parse_source_code": {"tf": 1}, "src.lexer.Lexer.split_source": {"tf": 1}, "src.runner.Charon.get_parsed_source": {"tf": 1}, "src.runner.Charon.get_ast": {"tf": 1}, "src.runner.Charon.get_program": {"tf": 1}, "src.runner.Charon.get_vm": {"tf": 1}, "src.runner.Charon.get_frontend_certificator": {"tf": 1}, "src.runner.Charon.get_backend_certificator": {"tf": 1}, "src.virtual_machine.VirtualMachine.get_memory": {"tf": 1}, "src.virtual_machine.VirtualMachine.print": {"tf": 1}, "src.virtual_machine.VirtualMachine.run": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 1}, "src.virtual_machine.VirtualMachine.ALLOC": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.CONSTANT": {"tf": 1}, "src.virtual_machine.VirtualMachine.DIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FDIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FMULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 1}, "src.virtual_machine.VirtualMachine.FSUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.HALT": {"tf": 1}, "src.virtual_machine.VirtualMachine.JAL": {"tf": 1}, "src.virtual_machine.VirtualMachine.JR": {"tf": 1}, "src.virtual_machine.VirtualMachine.JZ": {"tf": 1}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1}, "src.virtual_machine.VirtualMachine.LSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOD": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOV": {"tf": 1}, "src.virtual_machine.VirtualMachine.MULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}, "src.virtual_machine.VirtualMachine.RSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SITOFP": {"tf": 1}, "src.virtual_machine.VirtualMachine.STORE": {"tf": 1}, "src.virtual_machine.VirtualMachine.SUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.TRUNC": {"tf": 1}}, "df": 137}}, "q": {"docs": {"src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.set_statements": {"tf": 1.4142135623730951}}, "df": 1}}, "r": {"docs": {}, "df": 0, "c": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.build": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.get_root": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.add_child": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.add_child": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IF.IF.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE.__init__": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.WHILE.WHILE.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.conditional.Conditional.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.ARG.ARG.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.set_statements": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.__init__": {"tf": 1}, "src.ast_nodes.operations.ADD.ADD.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.AND.AND.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.ASSIGN.ASSIGN.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.BITAND.BITAND.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.BITOR.BITOR.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.DIFF.DIFF.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.DIV.DIV.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.EQUAL.EQUAL.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.GREATER.GREATER.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.LESS.LESS.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.LSHIFT.LSHIFT.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.MOD.MOD.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.MULT.MULT.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.NOT.NOT.__init__": {"tf": 1}, "src.ast_nodes.operations.OR.OR.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.RSHIFT.RSHIFT.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.SUB.SUB.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.operation.Operation.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.__init__": {"tf": 1.7320508075688772}, "src.certificators.frontend.FrontendCertificator.__init__": {"tf": 1}, "src.code_generator.CodeGenerator.__init__": {"tf": 1}, "src.runner.Charon.__init__": {"tf": 2}, "src.runner.Charon.get_ast": {"tf": 1}, "src.runner.Charon.get_vm": {"tf": 1}, "src.runner.Charon.get_frontend_certificator": {"tf": 1}, "src.runner.Charon.get_backend_certificator": {"tf": 1}, "src.runner.create_instance": {"tf": 1}}, "df": 39}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.operations.operation.Operation.__init__": {"tf": 1}}, "df": 1}}}}}}}, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "x": {"docs": {"src.certificators.frontend.FrontendCertificator.__init__": {"tf": 1}, "src.runner.Charon.__init__": {"tf": 1}, "src.runner.Charon.get_ast": {"tf": 1}}, "df": 3}}}}}, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"src.virtual_machine.VirtualMachine.__init__": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.__init__": {"tf": 1}, "src.lexer.Lexer.__init__": {"tf": 1}, "src.runner.create_instance": {"tf": 1}}, "df": 3}}, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.basic.CST.CST.__init__": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.add_context": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.add_context": {"tf": 1}}, "df": 2}}}}}}, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"src.ast_nodes.basic.PROG.PROG.add_child": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.add_child": {"tf": 1}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.runner.create_instance": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.functions.ARG.ARG.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.__init__": {"tf": 1.4142135623730951}}, "df": 2}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.__init__": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.runner.Charon.__init__": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"src.runner.Charon.__init__": {"tf": 1.4142135623730951}, "src.runner.Charon.get_frontend_certificator": {"tf": 1}, "src.runner.Charon.get_backend_certificator": {"tf": 1}}, "df": 3}}}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.node.Node.generate_code": {"tf": 1}, "src.ast_nodes.basic.CST.CST.__init__": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.__init__": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.__init__": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.add_context": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.__init__": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.__init__": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.get_metadata": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.add_context": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.__init__": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1}, "src.certificators.backend.BackendCertificator.__init__": {"tf": 1.4142135623730951}, "src.code_generator.CodeGenerator.generate_code": {"tf": 1.4142135623730951}, "src.code_generator.CodeGenerator.get_program": {"tf": 1.4142135623730951}, "src.lexer.Lexer.parse_source_code": {"tf": 1.4142135623730951}, "src.runner.Charon.__init__": {"tf": 2}, "src.runner.Charon.get_parsed_source": {"tf": 1.4142135623730951}, "src.runner.Charon.get_program": {"tf": 1.4142135623730951}, "src.utils.type_cast": {"tf": 1}, "src.utils.get_variable_size": {"tf": 1}, "src.virtual_machine.VirtualMachine.__init__": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.get_memory": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 1}, "src.virtual_machine.VirtualMachine.ALLOC": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.CONSTANT": {"tf": 1}, "src.virtual_machine.VirtualMachine.DIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FDIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FMULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 1}, "src.virtual_machine.VirtualMachine.FSUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.HALT": {"tf": 1}, "src.virtual_machine.VirtualMachine.JAL": {"tf": 1}, "src.virtual_machine.VirtualMachine.JR": {"tf": 1}, "src.virtual_machine.VirtualMachine.JZ": {"tf": 1}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1}, "src.virtual_machine.VirtualMachine.LSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOD": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOV": {"tf": 1}, "src.virtual_machine.VirtualMachine.MULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}, "src.virtual_machine.VirtualMachine.RSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SITOFP": {"tf": 1}, "src.virtual_machine.VirtualMachine.STORE": {"tf": 1}, "src.virtual_machine.VirtualMachine.SUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.TRUNC": {"tf": 1}}, "df": 81}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"src.utils.flatten_list": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"src.utils.flatten_list": {"tf": 1}}, "df": 1}}}}}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.build": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.get_root": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.add_child": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.add_child": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IF.IF.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE.__init__": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.WHILE.WHILE.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.conditional.Conditional.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.ARG.ARG.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.set_statements": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.__init__": {"tf": 1}, "src.ast_nodes.operations.ADD.ADD.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.AND.AND.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.ASSIGN.ASSIGN.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.BITAND.BITAND.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.BITOR.BITOR.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.DIFF.DIFF.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.DIV.DIV.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.EQUAL.EQUAL.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.GREATER.GREATER.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.LESS.LESS.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.LSHIFT.LSHIFT.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.MOD.MOD.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.MULT.MULT.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.NOT.NOT.__init__": {"tf": 1}, "src.ast_nodes.operations.OR.OR.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.RSHIFT.RSHIFT.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.SUB.SUB.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.operation.Operation.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.__init__": {"tf": 1.7320508075688772}, "src.certificators.frontend.FrontendCertificator.__init__": {"tf": 1}, "src.code_generator.CodeGenerator.__init__": {"tf": 1}, "src.runner.Charon.__init__": {"tf": 1}}, "df": 34}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.functions.ARG.ARG.__init__": {"tf": 1}}, "df": 1}}}}}}}, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"src.certificators.frontend.FrontendCertificator.__init__": {"tf": 1}, "src.runner.Charon.__init__": {"tf": 1}, "src.runner.Charon.get_ast": {"tf": 1}}, "df": 3, "s": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {"src.certificators.frontend.FrontendCertificator.__init__": {"tf": 1}, "src.runner.Charon.__init__": {"tf": 1}, "src.runner.Charon.get_ast": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.basic.PROG.PROG.add_child": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.SEQ.SEQ.add_child": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.DO.DO.__init__": {"tf": 2}, "src.ast_nodes.conditionals.IF.IF.__init__": {"tf": 2}, "src.ast_nodes.conditionals.IFELSE.IFELSE.__init__": {"tf": 2.449489742783178}, "src.ast_nodes.conditionals.WHILE.WHILE.__init__": {"tf": 2}, "src.ast_nodes.conditionals.conditional.Conditional.__init__": {"tf": 2}, "src.ast_nodes.functions.RET_SYM.RET_SYM.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.ADD.ADD.__init__": {"tf": 2}, "src.ast_nodes.operations.AND.AND.__init__": {"tf": 2}, "src.ast_nodes.operations.ASSIGN.ASSIGN.__init__": {"tf": 2}, "src.ast_nodes.operations.BITAND.BITAND.__init__": {"tf": 2}, "src.ast_nodes.operations.BITOR.BITOR.__init__": {"tf": 2}, "src.ast_nodes.operations.DIFF.DIFF.__init__": {"tf": 2}, "src.ast_nodes.operations.DIV.DIV.__init__": {"tf": 2}, "src.ast_nodes.operations.EQUAL.EQUAL.__init__": {"tf": 2}, "src.ast_nodes.operations.GREATER.GREATER.__init__": {"tf": 2}, "src.ast_nodes.operations.LESS.LESS.__init__": {"tf": 2}, "src.ast_nodes.operations.LSHIFT.LSHIFT.__init__": {"tf": 2}, "src.ast_nodes.operations.MOD.MOD.__init__": {"tf": 2}, "src.ast_nodes.operations.MULT.MULT.__init__": {"tf": 2}, "src.ast_nodes.operations.NOT.NOT.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.OR.OR.__init__": {"tf": 2}, "src.ast_nodes.operations.RSHIFT.RSHIFT.__init__": {"tf": 2}, "src.ast_nodes.operations.SUB.SUB.__init__": {"tf": 2}, "src.ast_nodes.operations.operation.Operation.__init__": {"tf": 2}}, "df": 26, "s": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.build": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.get_root": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.add_child": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.add_child": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IF.IF.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE.__init__": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.WHILE.WHILE.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.conditional.Conditional.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.ARG.ARG.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.set_statements": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.__init__": {"tf": 1}, "src.ast_nodes.operations.ADD.ADD.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.AND.AND.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.ASSIGN.ASSIGN.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.BITAND.BITAND.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.BITOR.BITOR.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.DIFF.DIFF.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.DIV.DIV.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.EQUAL.EQUAL.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.GREATER.GREATER.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.LESS.LESS.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.LSHIFT.LSHIFT.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.MOD.MOD.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.MULT.MULT.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.NOT.NOT.__init__": {"tf": 1}, "src.ast_nodes.operations.OR.OR.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.RSHIFT.RSHIFT.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.SUB.SUB.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.operation.Operation.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.__init__": {"tf": 1.7320508075688772}, "src.code_generator.CodeGenerator.__init__": {"tf": 1}}, "df": 32}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.parse_struct_definitions": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_global_variables": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_functions": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.print_tree": {"tf": 1}, "src.ast_nodes.node.Node.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.node.Node.print": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.add_child": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.print": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.add_child": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.print": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.print": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.print": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.set_statements": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.print": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.__init__": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.print": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.add_context": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.add_context": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 1}, "src.code_generator.CodeGenerator.print": {"tf": 1}, "src.code_generator.CodeGenerator.parse_struct_definitions": {"tf": 1}, "src.code_generator.CodeGenerator.parse_global_variables": {"tf": 1}, "src.code_generator.CodeGenerator.parse_functions": {"tf": 1}, "src.virtual_machine.VirtualMachine.print": {"tf": 1}, "src.virtual_machine.VirtualMachine.run": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 1}, "src.virtual_machine.VirtualMachine.ALLOC": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.CONSTANT": {"tf": 1}, "src.virtual_machine.VirtualMachine.DIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FDIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FMULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 1}, "src.virtual_machine.VirtualMachine.FSUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.HALT": {"tf": 1}, "src.virtual_machine.VirtualMachine.JAL": {"tf": 1}, "src.virtual_machine.VirtualMachine.JR": {"tf": 1}, "src.virtual_machine.VirtualMachine.JZ": {"tf": 1}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1}, "src.virtual_machine.VirtualMachine.LSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOD": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOV": {"tf": 1}, "src.virtual_machine.VirtualMachine.MULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}, "src.virtual_machine.VirtualMachine.RSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SITOFP": {"tf": 1}, "src.virtual_machine.VirtualMachine.STORE": {"tf": 1}, "src.virtual_machine.VirtualMachine.SUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.TRUNC": {"tf": 1}}, "df": 71, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.node.Node.__init__": {"tf": 1}, "src.ast_nodes.node.Node.get_value": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1}}, "df": 10}}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.__init__": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.utils.is_prime": {"tf": 1}, "src.utils.next_prime": {"tf": 1}, "src.utils.previous_prime": {"tf": 1}}, "df": 3}}}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.build": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.get_root": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.__init__": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.set_statements": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.__init__": {"tf": 1}, "src.code_generator.CodeGenerator.__init__": {"tf": 1}}, "df": 6}}}, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"src.runner.Charon.__init__": {"tf": 1.4142135623730951}, "src.runner.Charon.get_backend_certificator": {"tf": 1}}, "df": 2, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.runner.Charon.__init__": {"tf": 1}, "src.runner.Charon.get_backend_certificator": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"src.ast_nodes.node.Node.__init__": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.__init__": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.is_active": {"tf": 1}, "src.utils.is_prime": {"tf": 1}, "src.utils.flatten_list": {"tf": 1}}, "df": 5}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.build": {"tf": 1.4142135623730951}, "src.abstract_syntax_tree.AbstractSyntaxTree.get_root": {"tf": 1.4142135623730951}, "src.code_generator.CodeGenerator.__init__": {"tf": 1.4142135623730951}}, "df": 3, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {"src.certificators.backend.BackendCertificator.__init__": {"tf": 1}, "src.runner.Charon.__init__": {"tf": 1}, "src.virtual_machine.VirtualMachine.__init__": {"tf": 1}}, "df": 3}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.node.Node.certificate": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.certificate": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1}}, "df": 13}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.ast_nodes.node.Node.certificate": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.certificate": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1}}, "df": 13}}}}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.conditionals.DO.DO.__init__": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.__init__": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.__init__": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.__init__": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.__init__": {"tf": 1}}, "df": 5}}}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.ast_nodes.functions.ARG.ARG.__init__": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {"src.virtual_machine.VirtualMachine.ADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 1}, "src.virtual_machine.VirtualMachine.ALLOC": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.CONSTANT": {"tf": 1}, "src.virtual_machine.VirtualMachine.DIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FDIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FMULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 1}, "src.virtual_machine.VirtualMachine.FSUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.HALT": {"tf": 1}, "src.virtual_machine.VirtualMachine.JAL": {"tf": 1}, "src.virtual_machine.VirtualMachine.JR": {"tf": 1}, "src.virtual_machine.VirtualMachine.JZ": {"tf": 1}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1}, "src.virtual_machine.VirtualMachine.LSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOD": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOV": {"tf": 1}, "src.virtual_machine.VirtualMachine.MULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}, "src.virtual_machine.VirtualMachine.RSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SITOFP": {"tf": 1}, "src.virtual_machine.VirtualMachine.STORE": {"tf": 1}, "src.virtual_machine.VirtualMachine.SUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.TRUNC": {"tf": 1}}, "df": 40}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.runner.Charon.__init__": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.print_tree": {"tf": 1}, "src.ast_nodes.node.Node.print": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.print": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.print": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.print": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.print": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.print": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.print": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 1}}, "df": 15}}}}, "t": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.print_tree": {"tf": 1}, "src.ast_nodes.node.Node.__init__": {"tf": 1}, "src.ast_nodes.node.Node.get_value": {"tf": 1}, "src.ast_nodes.node.Node.print": {"tf": 1}, "src.ast_nodes.node.Node.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.node.Node.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.PROG.PROG.print": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.basic.PROG.PROG.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.SEQ.SEQ.print": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.IFELSE.IFELSE.print": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.conditional.Conditional.print": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.ARG.ARG.print": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.ARG.ARG.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.NOT.NOT.print": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.operation.Operation.print": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1.7320508075688772}, "src.utils.is_prime": {"tf": 1}, "src.utils.next_prime": {"tf": 1.4142135623730951}, "src.utils.previous_prime": {"tf": 1.4142135623730951}, "src.utils.primes_list": {"tf": 1.4142135623730951}, "src.utils.type_cast": {"tf": 1.4142135623730951}, "src.utils.get_variable_size": {"tf": 1}, "src.virtual_machine.VirtualMachine.__init__": {"tf": 1}, "src.virtual_machine.VirtualMachine.get_memory": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 1}, "src.virtual_machine.VirtualMachine.ALLOC": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.CONSTANT": {"tf": 1}, "src.virtual_machine.VirtualMachine.DIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FDIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FMULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 1}, "src.virtual_machine.VirtualMachine.FSUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.HALT": {"tf": 1}, "src.virtual_machine.VirtualMachine.JAL": {"tf": 1}, "src.virtual_machine.VirtualMachine.JR": {"tf": 1}, "src.virtual_machine.VirtualMachine.JZ": {"tf": 1}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1}, "src.virtual_machine.VirtualMachine.LSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOD": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOV": {"tf": 1}, "src.virtual_machine.VirtualMachine.MULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}, "src.virtual_machine.VirtualMachine.RSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SITOFP": {"tf": 1}, "src.virtual_machine.VirtualMachine.STORE": {"tf": 1}, "src.virtual_machine.VirtualMachine.SUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.TRUNC": {"tf": 1}}, "df": 97}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.virtual_machine.VirtualMachine.ADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 1}, "src.virtual_machine.VirtualMachine.ALLOC": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.CONSTANT": {"tf": 1}, "src.virtual_machine.VirtualMachine.DIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FDIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FMULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 1}, "src.virtual_machine.VirtualMachine.FSUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.HALT": {"tf": 1}, "src.virtual_machine.VirtualMachine.JAL": {"tf": 1}, "src.virtual_machine.VirtualMachine.JR": {"tf": 1}, "src.virtual_machine.VirtualMachine.JZ": {"tf": 1}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1}, "src.virtual_machine.VirtualMachine.LSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOD": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOV": {"tf": 1}, "src.virtual_machine.VirtualMachine.MULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}, "src.virtual_machine.VirtualMachine.RSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SITOFP": {"tf": 1}, "src.virtual_machine.VirtualMachine.STORE": {"tf": 1}, "src.virtual_machine.VirtualMachine.SUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.TRUNC": {"tf": 1}}, "df": 40}}}}}}}}}}, "f": {"docs": {"src.ast_nodes.conditionals.IF.IF.__init__": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.conditional.Conditional.__init__": {"tf": 1}}, "df": 3}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.node.Node.__init__": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.__init__": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.__init__": {"tf": 1}}, "df": 3}}}, "r": {"docs": {"src.ast_nodes.functions.ARG.ARG.__init__": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.__init__": {"tf": 2}}, "df": 2, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.functions.PARAM.PARAM.__init__": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.__init__": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.__init__": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.__init__": {"tf": 1}, "src.utils.get_variable_size": {"tf": 1}}, "df": 5, "s": {"docs": {"src.ast_nodes.functions.ARG.ARG.__init__": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.__init__": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}, "m": {"docs": {"src.runner.Charon.__init__": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.runner.Charon.__init__": {"tf": 1}, "src.runner.Charon.get_vm": {"tf": 1}}, "df": 2, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"src.runner.Charon.__init__": {"tf": 1}, "src.runner.Charon.get_vm": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.ast_nodes.node.Node.__init__": {"tf": 1}, "src.ast_nodes.node.Node.get_value": {"tf": 1}, "src.ast_nodes.node.Node.generate_code": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.__init__": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.__init__": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.__init__": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1}, "src.virtual_machine.VirtualMachine.__init__": {"tf": 1}, "src.virtual_machine.VirtualMachine.get_memory": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 1}, "src.virtual_machine.VirtualMachine.ALLOC": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.CONSTANT": {"tf": 1}, "src.virtual_machine.VirtualMachine.DIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FDIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FMULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 1}, "src.virtual_machine.VirtualMachine.FSUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.HALT": {"tf": 1}, "src.virtual_machine.VirtualMachine.JAL": {"tf": 1}, "src.virtual_machine.VirtualMachine.JR": {"tf": 1}, "src.virtual_machine.VirtualMachine.JZ": {"tf": 1}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1}, "src.virtual_machine.VirtualMachine.LSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOD": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOV": {"tf": 1}, "src.virtual_machine.VirtualMachine.MULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}, "src.virtual_machine.VirtualMachine.RSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SITOFP": {"tf": 1}, "src.virtual_machine.VirtualMachine.STORE": {"tf": 1}, "src.virtual_machine.VirtualMachine.SUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.TRUNC": {"tf": 1}}, "df": 66}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.node.Node.__init__": {"tf": 1}}, "df": 1}}}}, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.node.Node.__init__": {"tf": 1}, "src.ast_nodes.node.Node.get_value": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.__init__": {"tf": 1}, "src.virtual_machine.VirtualMachine.get_memory": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 1}, "src.virtual_machine.VirtualMachine.ALLOC": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.CONSTANT": {"tf": 1}, "src.virtual_machine.VirtualMachine.DIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FDIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FMULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 1}, "src.virtual_machine.VirtualMachine.FSUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.HALT": {"tf": 1}, "src.virtual_machine.VirtualMachine.JAL": {"tf": 1}, "src.virtual_machine.VirtualMachine.JR": {"tf": 1}, "src.virtual_machine.VirtualMachine.JZ": {"tf": 1}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1}, "src.virtual_machine.VirtualMachine.LSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOD": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOV": {"tf": 1}, "src.virtual_machine.VirtualMachine.MULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}, "src.virtual_machine.VirtualMachine.RSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SITOFP": {"tf": 1}, "src.virtual_machine.VirtualMachine.STORE": {"tf": 1}, "src.virtual_machine.VirtualMachine.SUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.TRUNC": {"tf": 1}}, "df": 44}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.conditionals.IFELSE.IFELSE.__init__": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.__init__": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.__init__": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"src.runner.Charon.__init__": {"tf": 1.4142135623730951}, "src.runner.Charon.get_frontend_certificator": {"tf": 1}}, "df": 2, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.runner.Charon.__init__": {"tf": 1}, "src.runner.Charon.get_frontend_certificator": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.node.Node.__init__": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.__init__": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.__init__": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.__init__": {"tf": 1}, "src.utils.type_cast": {"tf": 1.4142135623730951}}, "df": 5}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"src.ast_nodes.node.Node.generate_code": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.__init__": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1}, "src.virtual_machine.VirtualMachine.__init__": {"tf": 1}, "src.virtual_machine.VirtualMachine.get_memory": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 1}, "src.virtual_machine.VirtualMachine.ALLOC": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.CONSTANT": {"tf": 1}, "src.virtual_machine.VirtualMachine.DIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FDIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FMULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 1}, "src.virtual_machine.VirtualMachine.FSUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.HALT": {"tf": 1}, "src.virtual_machine.VirtualMachine.JAL": {"tf": 1}, "src.virtual_machine.VirtualMachine.JR": {"tf": 1}, "src.virtual_machine.VirtualMachine.JZ": {"tf": 1}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1}, "src.virtual_machine.VirtualMachine.LSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOD": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOV": {"tf": 1}, "src.virtual_machine.VirtualMachine.MULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}, "src.virtual_machine.VirtualMachine.RSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SITOFP": {"tf": 1}, "src.virtual_machine.VirtualMachine.STORE": {"tf": 1}, "src.virtual_machine.VirtualMachine.SUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.TRUNC": {"tf": 1}}, "df": 62}}}}}, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.node.Node.__init__": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.__init__": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.__init__": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.__init__": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.__init__": {"tf": 1}, "src.utils.flatten_list": {"tf": 1}}, "df": 6}}, "e": {"docs": {}, "df": 0, "e": {"docs": {"src.certificators.frontend.FrontendCertificator.__init__": {"tf": 1}, "src.runner.Charon.__init__": {"tf": 1}, "src.runner.Charon.get_ast": {"tf": 1}}, "df": 3}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.node.Node.generate_code": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1}, "src.utils.type_cast": {"tf": 1}}, "df": 20}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"src.utils.type_cast": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.ast_nodes.node.Node.__init__": {"tf": 1}, "src.ast_nodes.node.Node.get_type": {"tf": 1}}, "df": 2}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.utils.get_certificate_symbol": {"tf": 1}}, "df": 1}}}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.utils.type_cast": {"tf": 1}}, "df": 1}}}}}}}, "f": {"docs": {"src.utils.flatten_list": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.ast_nodes.node.Node.__init__": {"tf": 1}, "src.ast_nodes.node.Node.generate_code": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1}, "src.utils.type_cast": {"tf": 1}}, "df": 21}}}}}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.ast_nodes.functions.RET_SYM.RET_SYM.__init__": {"tf": 1}}, "df": 1}}}}}}}, "h": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.operations.ADD.ADD.__init__": {"tf": 1}, "src.ast_nodes.operations.AND.AND.__init__": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.__init__": {"tf": 1}, "src.ast_nodes.operations.BITAND.BITAND.__init__": {"tf": 1}, "src.ast_nodes.operations.BITOR.BITOR.__init__": {"tf": 1}, "src.ast_nodes.operations.DIFF.DIFF.__init__": {"tf": 1}, "src.ast_nodes.operations.DIV.DIV.__init__": {"tf": 1}, "src.ast_nodes.operations.EQUAL.EQUAL.__init__": {"tf": 1}, "src.ast_nodes.operations.GREATER.GREATER.__init__": {"tf": 1}, "src.ast_nodes.operations.LESS.LESS.__init__": {"tf": 1}, "src.ast_nodes.operations.LSHIFT.LSHIFT.__init__": {"tf": 1}, "src.ast_nodes.operations.MOD.MOD.__init__": {"tf": 1}, "src.ast_nodes.operations.MULT.MULT.__init__": {"tf": 1}, "src.ast_nodes.operations.OR.OR.__init__": {"tf": 1}, "src.ast_nodes.operations.RSHIFT.RSHIFT.__init__": {"tf": 1}, "src.ast_nodes.operations.SUB.SUB.__init__": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.__init__": {"tf": 1}}, "df": 17}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"src.code_generator.CodeGenerator.__init__": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.runner.create_instance": {"tf": 1}}, "df": 1}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.node.Node.get_certificate_label": {"tf": 1}, "src.ast_nodes.node.Node.generate_code": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.get_certificate_label": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_attribute_types": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.certificate": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.get_certificate": {"tf": 1}, "src.certificators.backend.BackendCertificator.certificate": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.certificate": {"tf": 1}, "src.lexer.Lexer.split_source": {"tf": 1}, "src.utils.primes_list": {"tf": 1}, "src.utils.type_cast": {"tf": 1}, "src.utils.flatten_list": {"tf": 2}, "src.virtual_machine.VirtualMachine.__init__": {"tf": 1}}, "df": 41, "s": {"docs": {"src.utils.flatten_list": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"src.ast_nodes.conditionals.DO.DO.__init__": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.__init__": {"tf": 1}}, "df": 2}}}, "h": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.operations.ADD.ADD.__init__": {"tf": 1}, "src.ast_nodes.operations.AND.AND.__init__": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.__init__": {"tf": 1}, "src.ast_nodes.operations.BITAND.BITAND.__init__": {"tf": 1}, "src.ast_nodes.operations.BITOR.BITOR.__init__": {"tf": 1}, "src.ast_nodes.operations.DIFF.DIFF.__init__": {"tf": 1}, "src.ast_nodes.operations.DIV.DIV.__init__": {"tf": 1}, "src.ast_nodes.operations.EQUAL.EQUAL.__init__": {"tf": 1}, "src.ast_nodes.operations.GREATER.GREATER.__init__": {"tf": 1}, "src.ast_nodes.operations.LESS.LESS.__init__": {"tf": 1}, "src.ast_nodes.operations.LSHIFT.LSHIFT.__init__": {"tf": 1}, "src.ast_nodes.operations.MOD.MOD.__init__": {"tf": 1}, "src.ast_nodes.operations.MULT.MULT.__init__": {"tf": 1}, "src.ast_nodes.operations.OR.OR.__init__": {"tf": 1}, "src.ast_nodes.operations.RSHIFT.RSHIFT.__init__": {"tf": 1}, "src.ast_nodes.operations.SUB.SUB.__init__": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.__init__": {"tf": 1}}, "df": 17}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"src.utils.primes_list": {"tf": 1}}, "df": 1}}}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"src.ast_nodes.basic.CST.CST.__init__": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.__init__": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.__init__": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.__init__": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.__init__": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.__init__": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.__init__": {"tf": 1}, "src.utils.get_variable_size": {"tf": 1}}, "df": 8}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"src.virtual_machine.VirtualMachine.__init__": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"src.runner.Charon.__init__": {"tf": 1}, "src.runner.Charon.get_vm": {"tf": 1}}, "df": 2}}}}}}}, "k": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.basic.SEQ.SEQ.__init__": {"tf": 1}, "src.ast_nodes.operations.ADD.ADD.__init__": {"tf": 1}, "src.ast_nodes.operations.AND.AND.__init__": {"tf": 1}, "src.ast_nodes.operations.BITAND.BITAND.__init__": {"tf": 1}, "src.ast_nodes.operations.BITOR.BITOR.__init__": {"tf": 1}, "src.ast_nodes.operations.DIFF.DIFF.__init__": {"tf": 1}, "src.ast_nodes.operations.DIV.DIV.__init__": {"tf": 1}, "src.ast_nodes.operations.EQUAL.EQUAL.__init__": {"tf": 1}, "src.ast_nodes.operations.GREATER.GREATER.__init__": {"tf": 1}, "src.ast_nodes.operations.LESS.LESS.__init__": {"tf": 1}, "src.ast_nodes.operations.LSHIFT.LSHIFT.__init__": {"tf": 1}, "src.ast_nodes.operations.MOD.MOD.__init__": {"tf": 1}, "src.ast_nodes.operations.MULT.MULT.__init__": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.__init__": {"tf": 1}, "src.ast_nodes.operations.OR.OR.__init__": {"tf": 1}, "src.ast_nodes.operations.RSHIFT.RSHIFT.__init__": {"tf": 1}, "src.ast_nodes.operations.SUB.SUB.__init__": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.__init__": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.__init__": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator.certificate": {"tf": 1}, "src.certificators.backend.BackendCertificator.certificate": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.certificate": {"tf": 1}}, "df": 22}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.ast_nodes.conditionals.DO.DO.__init__": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.__init__": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.__init__": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.__init__": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.__init__": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.__init__": {"tf": 1}}, "df": 6}}}}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.__init__": {"tf": 1}}, "df": 1}}}}}}}}}, "bases": {"root": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {"src.ast_nodes.basic.CST.CST": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM": {"tf": 1}, "src.ast_nodes.operations.ADD.ADD": {"tf": 1}, "src.ast_nodes.operations.AND.AND": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN": {"tf": 1}, "src.ast_nodes.operations.BITAND.BITAND": {"tf": 1}, "src.ast_nodes.operations.BITOR.BITOR": {"tf": 1}, "src.ast_nodes.operations.DIFF.DIFF": {"tf": 1}, "src.ast_nodes.operations.DIV.DIV": {"tf": 1}, "src.ast_nodes.operations.EQUAL.EQUAL": {"tf": 1}, "src.ast_nodes.operations.GREATER.GREATER": {"tf": 1}, "src.ast_nodes.operations.LESS.LESS": {"tf": 1}, "src.ast_nodes.operations.LSHIFT.LSHIFT": {"tf": 1}, "src.ast_nodes.operations.MOD.MOD": {"tf": 1}, "src.ast_nodes.operations.MULT.MULT": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT": {"tf": 1}, "src.ast_nodes.operations.OR.OR": {"tf": 1}, "src.ast_nodes.operations.RSHIFT.RSHIFT": {"tf": 1}, "src.ast_nodes.operations.SUB.SUB": {"tf": 1}, "src.ast_nodes.operations.operation.Operation": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF": {"tf": 1}, "src.certificators.backend.BackendCertificator": {"tf": 1}, "src.certificators.frontend.FrontendCertificator": {"tf": 1}}, "df": 37}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.basic.CST.CST": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM": {"tf": 1}, "src.ast_nodes.operations.ADD.ADD": {"tf": 1}, "src.ast_nodes.operations.AND.AND": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN": {"tf": 1}, "src.ast_nodes.operations.BITAND.BITAND": {"tf": 1}, "src.ast_nodes.operations.BITOR.BITOR": {"tf": 1}, "src.ast_nodes.operations.DIFF.DIFF": {"tf": 1}, "src.ast_nodes.operations.DIV.DIV": {"tf": 1}, "src.ast_nodes.operations.EQUAL.EQUAL": {"tf": 1}, "src.ast_nodes.operations.GREATER.GREATER": {"tf": 1}, "src.ast_nodes.operations.LESS.LESS": {"tf": 1}, "src.ast_nodes.operations.LSHIFT.LSHIFT": {"tf": 1}, "src.ast_nodes.operations.MOD.MOD": {"tf": 1}, "src.ast_nodes.operations.MULT.MULT": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT": {"tf": 1}, "src.ast_nodes.operations.OR.OR": {"tf": 1}, "src.ast_nodes.operations.RSHIFT.RSHIFT": {"tf": 1}, "src.ast_nodes.operations.SUB.SUB": {"tf": 1}, "src.ast_nodes.operations.operation.Operation": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF": {"tf": 1}}, "df": 35}}, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"src.certificators.backend.BackendCertificator": {"tf": 1}, "src.certificators.frontend.FrontendCertificator": {"tf": 1}}, "df": 2, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.certificators.backend.BackendCertificator": {"tf": 1}, "src.certificators.frontend.FrontendCertificator": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.basic.CST.CST": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.PROG.PROG": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.SEQ.SEQ": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.conditional.Conditional": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.ARG.ARG": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.RET_SYM.RET_SYM": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.NOT.NOT": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.operation.Operation": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR.VAR": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF": {"tf": 1.4142135623730951}}, "df": 14, "s": {"docs": {"src.ast_nodes.basic.CST.CST": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM": {"tf": 1}, "src.ast_nodes.operations.ADD.ADD": {"tf": 1}, "src.ast_nodes.operations.AND.AND": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN": {"tf": 1}, "src.ast_nodes.operations.BITAND.BITAND": {"tf": 1}, "src.ast_nodes.operations.BITOR.BITOR": {"tf": 1}, "src.ast_nodes.operations.DIFF.DIFF": {"tf": 1}, "src.ast_nodes.operations.DIV.DIV": {"tf": 1}, "src.ast_nodes.operations.EQUAL.EQUAL": {"tf": 1}, "src.ast_nodes.operations.GREATER.GREATER": {"tf": 1}, "src.ast_nodes.operations.LESS.LESS": {"tf": 1}, "src.ast_nodes.operations.LSHIFT.LSHIFT": {"tf": 1}, "src.ast_nodes.operations.MOD.MOD": {"tf": 1}, "src.ast_nodes.operations.MULT.MULT": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT": {"tf": 1}, "src.ast_nodes.operations.OR.OR": {"tf": 1}, "src.ast_nodes.operations.RSHIFT.RSHIFT": {"tf": 1}, "src.ast_nodes.operations.SUB.SUB": {"tf": 1}, "src.ast_nodes.operations.operation.Operation": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF": {"tf": 1}}, "df": 35}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.ast_nodes.conditionals.DO.DO": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IF.IF": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.WHILE.WHILE": {"tf": 1.4142135623730951}}, "df": 4, "s": {"docs": {"src.ast_nodes.conditionals.DO.DO": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE": {"tf": 1}}, "df": 4}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.certificators.backend.BackendCertificator": {"tf": 1}, "src.certificators.frontend.FrontendCertificator": {"tf": 1}}, "df": 2, "s": {"docs": {"src.certificators.backend.BackendCertificator": {"tf": 1}, "src.certificators.frontend.FrontendCertificator": {"tf": 1}}, "df": 2}}}}}}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"src.ast_nodes.functions.PARAM.PARAM": {"tf": 1.4142135623730951}}, "df": 1, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.functions.PARAM.PARAM": {"tf": 1}}, "df": 1}}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {"src.ast_nodes.functions.PARAM.PARAM": {"tf": 1.4142135623730951}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.ast_nodes.operations.ADD.ADD": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.AND.AND": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.ASSIGN.ASSIGN": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.BITAND.BITAND": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.BITOR.BITOR": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.DIFF.DIFF": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.DIV.DIV": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.EQUAL.EQUAL": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.GREATER.GREATER": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.LESS.LESS": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.LSHIFT.LSHIFT": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.MOD.MOD": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.MULT.MULT": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.OR.OR": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.RSHIFT.RSHIFT": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.SUB.SUB": {"tf": 1.4142135623730951}}, "df": 16, "s": {"docs": {"src.ast_nodes.operations.ADD.ADD": {"tf": 1}, "src.ast_nodes.operations.AND.AND": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN": {"tf": 1}, "src.ast_nodes.operations.BITAND.BITAND": {"tf": 1}, "src.ast_nodes.operations.BITOR.BITOR": {"tf": 1}, "src.ast_nodes.operations.DIFF.DIFF": {"tf": 1}, "src.ast_nodes.operations.DIV.DIV": {"tf": 1}, "src.ast_nodes.operations.EQUAL.EQUAL": {"tf": 1}, "src.ast_nodes.operations.GREATER.GREATER": {"tf": 1}, "src.ast_nodes.operations.LESS.LESS": {"tf": 1}, "src.ast_nodes.operations.LSHIFT.LSHIFT": {"tf": 1}, "src.ast_nodes.operations.MOD.MOD": {"tf": 1}, "src.ast_nodes.operations.MULT.MULT": {"tf": 1}, "src.ast_nodes.operations.OR.OR": {"tf": 1}, "src.ast_nodes.operations.RSHIFT.RSHIFT": {"tf": 1}, "src.ast_nodes.operations.SUB.SUB": {"tf": 1}}, "df": 16}}}}}}}}}}}}, "doc": {"root": {"0": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.print_tree": {"tf": 1.4142135623730951}, "src.ast_nodes.node.Node.print": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.print": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.print": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.print": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.print": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.print": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.print": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}}, "df": 29}, "1": {"0": {"2": {"4": {"docs": {"src.virtual_machine.VirtualMachine": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "6": {"docs": {"src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1}, "src.virtual_machine.VirtualMachine.TRUNC": {"tf": 1}}, "df": 2}, "docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.print_tree": {"tf": 1}, "src.ast_nodes.node.Node.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}}, "df": 16}, "2": {"docs": {"src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}, "src.utils.primes_list": {"tf": 1}}, "df": 2}, "3": {"2": {"docs": {"src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1}, "src.virtual_machine.VirtualMachine.TRUNC": {"tf": 1}}, "df": 2}, "docs": {"src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}}, "df": 1}, "docs": {"src": {"tf": 1.7320508075688772}, "src.abstract_syntax_tree": {"tf": 1.7320508075688772}, "src.abstract_syntax_tree.AbstractSyntaxTree": {"tf": 3.872983346207417}, "src.abstract_syntax_tree.AbstractSyntaxTree.__init__": {"tf": 1.7320508075688772}, "src.abstract_syntax_tree.AbstractSyntaxTree.source_code": {"tf": 1.7320508075688772}, "src.abstract_syntax_tree.AbstractSyntaxTree.root": {"tf": 1.7320508075688772}, "src.abstract_syntax_tree.AbstractSyntaxTree.current_symbol": {"tf": 1.7320508075688772}, "src.abstract_syntax_tree.AbstractSyntaxTree.current_value": {"tf": 1.7320508075688772}, "src.abstract_syntax_tree.AbstractSyntaxTree.current_statement_list": {"tf": 1.7320508075688772}, "src.abstract_syntax_tree.AbstractSyntaxTree.current_function_type": {"tf": 1.7320508075688772}, "src.abstract_syntax_tree.AbstractSyntaxTree.build": {"tf": 3}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_struct_definitions": {"tf": 1.7320508075688772}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_global_variables": {"tf": 1.7320508075688772}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_functions": {"tf": 1.7320508075688772}, "src.abstract_syntax_tree.AbstractSyntaxTree.print_tree": {"tf": 3.3166247903554}, "src.abstract_syntax_tree.AbstractSyntaxTree.get_root": {"tf": 3}, "src.ast_nodes": {"tf": 2.449489742783178}, "src.ast_nodes.node": {"tf": 1.7320508075688772}, "src.ast_nodes.node.Node": {"tf": 3.605551275463989}, "src.ast_nodes.node.Node.__init__": {"tf": 1.7320508075688772}, "src.ast_nodes.node.Node.value": {"tf": 1.7320508075688772}, "src.ast_nodes.node.Node.type": {"tf": 1.7320508075688772}, "src.ast_nodes.node.Node.certificate_label": {"tf": 1.7320508075688772}, "src.ast_nodes.node.Node.uses_register": {"tf": 1.7320508075688772}, "src.ast_nodes.node.Node.instruction": {"tf": 1.7320508075688772}, "src.ast_nodes.node.Node.symbol": {"tf": 1.7320508075688772}, "src.ast_nodes.node.Node.get_value": {"tf": 3}, "src.ast_nodes.node.Node.get_type": {"tf": 3}, "src.ast_nodes.node.Node.get_certificate_label": {"tf": 4.242640687119285}, "src.ast_nodes.node.Node.print": {"tf": 4}, "src.ast_nodes.node.Node.generate_code": {"tf": 7.14142842854285}, "src.ast_nodes.node.Node.certificate": {"tf": 4.358898943540674}, "src.ast_nodes.basic": {"tf": 1.7320508075688772}, "src.ast_nodes.basic.CST": {"tf": 1.7320508075688772}, "src.ast_nodes.basic.CST.CST": {"tf": 4.242640687119285}, "src.ast_nodes.basic.CST.CST.__init__": {"tf": 1.7320508075688772}, "src.ast_nodes.basic.CST.CST.type": {"tf": 1.7320508075688772}, "src.ast_nodes.basic.CST.CST.instruction": {"tf": 1.7320508075688772}, "src.ast_nodes.basic.CST.CST.symbol": {"tf": 1.7320508075688772}, "src.ast_nodes.basic.PROG": {"tf": 1.7320508075688772}, "src.ast_nodes.basic.PROG.PROG": {"tf": 1.7320508075688772}, "src.ast_nodes.basic.PROG.PROG.instruction": {"tf": 1.7320508075688772}, "src.ast_nodes.basic.PROG.PROG.children": {"tf": 1.7320508075688772}, "src.ast_nodes.basic.PROG.PROG.add_child": {"tf": 3.3166247903554}, "src.ast_nodes.basic.PROG.PROG.get_certificate_label": {"tf": 4.69041575982343}, "src.ast_nodes.basic.PROG.PROG.print": {"tf": 4}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 6.164414002968976}, "src.ast_nodes.basic.PROG.PROG.certificate": {"tf": 5.291502622129181}, "src.ast_nodes.basic.SEQ": {"tf": 1.7320508075688772}, "src.ast_nodes.basic.SEQ.SEQ": {"tf": 2.8284271247461903}, "src.ast_nodes.basic.SEQ.SEQ.__init__": {"tf": 1.7320508075688772}, "src.ast_nodes.basic.SEQ.SEQ.children": {"tf": 1.7320508075688772}, "src.ast_nodes.basic.SEQ.SEQ.add_child": {"tf": 3.3166247903554}, "src.ast_nodes.basic.SEQ.SEQ.get_certificate_label": {"tf": 4.69041575982343}, "src.ast_nodes.basic.SEQ.SEQ.print": {"tf": 4}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 4.898979485566356}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 5.291502622129181}, "src.ast_nodes.conditionals": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.DO": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.DO.DO": {"tf": 4}, "src.ast_nodes.conditionals.DO.DO.__init__": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.DO.DO.get_certificate_label": {"tf": 5.0990195135927845}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 5.744562646538029}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 5.477225575051661}, "src.ast_nodes.conditionals.IF": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.IF.IF": {"tf": 3.7416573867739413}, "src.ast_nodes.conditionals.IF.IF.__init__": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 5.830951894845301}, "src.ast_nodes.conditionals.IFELSE": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.IFELSE.IFELSE": {"tf": 4.358898943540674}, "src.ast_nodes.conditionals.IFELSE.IFELSE.__init__": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.IFELSE.IFELSE.statement_if_false": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label": {"tf": 4.898979485566356}, "src.ast_nodes.conditionals.IFELSE.IFELSE.print": {"tf": 4}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 6.164414002968976}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 5.830951894845301}, "src.ast_nodes.conditionals.WHILE": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.WHILE.WHILE": {"tf": 5}, "src.ast_nodes.conditionals.WHILE.WHILE.__init__": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.WHILE.WHILE.get_certificate_label": {"tf": 5.0990195135927845}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 6.164414002968976}, "src.ast_nodes.conditionals.conditional": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.conditional.Conditional": {"tf": 3.7416573867739413}, "src.ast_nodes.conditionals.conditional.Conditional.__init__": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.conditional.Conditional.parenthesis_expression": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.conditional.Conditional.statement_if_true": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label": {"tf": 4.898979485566356}, "src.ast_nodes.conditionals.conditional.Conditional.print": {"tf": 4}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 5.477225575051661}, "src.ast_nodes.functions": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.ARG": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.ARG.ARG": {"tf": 3.1622776601683795}, "src.ast_nodes.functions.ARG.ARG.__init__": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.ARG.ARG.argument_value": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.ARG.ARG.parameter_type": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.ARG.ARG.get_certificate_label": {"tf": 4.69041575982343}, "src.ast_nodes.functions.ARG.ARG.print": {"tf": 4.242640687119285}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 5.656854249492381}, "src.ast_nodes.functions.ARG.ARG.certificate": {"tf": 5.291502622129181}, "src.ast_nodes.functions.FUNC_CALL": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL": {"tf": 3}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.__init__": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.function_call_metadata": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.arguments": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.type": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.symbol": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.get_certificate_label": {"tf": 4.69041575982343}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"tf": 4}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 5.291502622129181}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 5.291502622129181}, "src.ast_nodes.functions.FUNC_DEF": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 4.69041575982343}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.__init__": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.parameters": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.statements": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.set_statements": {"tf": 3.605551275463989}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 4.898979485566356}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"tf": 4}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 5.477225575051661}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 5.291502622129181}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_function_name": {"tf": 3}, "src.ast_nodes.functions.PARAM": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.PARAM.PARAM": {"tf": 3.7416573867739413}, "src.ast_nodes.functions.PARAM.PARAM.__init__": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 5.291502622129181}, "src.ast_nodes.functions.RET_SYM": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.RET_SYM.RET_SYM": {"tf": 3.4641016151377544}, "src.ast_nodes.functions.RET_SYM.RET_SYM.__init__": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.RET_SYM.RET_SYM.returned_value": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.RET_SYM.RET_SYM.type": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.RET_SYM.RET_SYM.get_certificate_label": {"tf": 4.69041575982343}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"tf": 4.242640687119285}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 5.916079783099616}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 5.291502622129181}, "src.ast_nodes.operations": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.ADD": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.ADD.ADD": {"tf": 3.1622776601683795}, "src.ast_nodes.operations.ADD.ADD.__init__": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.ADD.ADD.instruction": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.AND": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.AND.AND": {"tf": 3.1622776601683795}, "src.ast_nodes.operations.AND.AND.__init__": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.AND.AND.instruction": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.ASSIGN": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.ASSIGN.ASSIGN": {"tf": 4.795831523312719}, "src.ast_nodes.operations.ASSIGN.ASSIGN.__init__": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.ASSIGN.ASSIGN.instruction": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 5.830951894845301}, "src.ast_nodes.operations.BITAND": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.BITAND.BITAND": {"tf": 3.1622776601683795}, "src.ast_nodes.operations.BITAND.BITAND.__init__": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.BITAND.BITAND.instruction": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.BITOR": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.BITOR.BITOR": {"tf": 3.3166247903554}, "src.ast_nodes.operations.BITOR.BITOR.__init__": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.BITOR.BITOR.instruction": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.DIFF": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.DIFF.DIFF": {"tf": 3.3166247903554}, "src.ast_nodes.operations.DIFF.DIFF.__init__": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.DIFF.DIFF.instruction": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.DIV": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.DIV.DIV": {"tf": 3.1622776601683795}, "src.ast_nodes.operations.DIV.DIV.__init__": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.DIV.DIV.instruction": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.EQUAL": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.EQUAL.EQUAL": {"tf": 3.1622776601683795}, "src.ast_nodes.operations.EQUAL.EQUAL.__init__": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.EQUAL.EQUAL.instruction": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.GREATER": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.GREATER.GREATER": {"tf": 3.1622776601683795}, "src.ast_nodes.operations.GREATER.GREATER.__init__": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.GREATER.GREATER.instruction": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.LESS": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.LESS.LESS": {"tf": 3.1622776601683795}, "src.ast_nodes.operations.LESS.LESS.__init__": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.LESS.LESS.instruction": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.LSHIFT": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.LSHIFT.LSHIFT": {"tf": 3.1622776601683795}, "src.ast_nodes.operations.LSHIFT.LSHIFT.__init__": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.LSHIFT.LSHIFT.instruction": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.MOD": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.MOD.MOD": {"tf": 3.1622776601683795}, "src.ast_nodes.operations.MOD.MOD.__init__": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.MOD.MOD.instruction": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.MULT": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.MULT.MULT": {"tf": 3.1622776601683795}, "src.ast_nodes.operations.MULT.MULT.__init__": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.MULT.MULT.instruction": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.NOT": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.NOT.NOT": {"tf": 3}, "src.ast_nodes.operations.NOT.NOT.__init__": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.NOT.NOT.expression": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.NOT.NOT.symbol": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.NOT.NOT.instruction": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.NOT.NOT.type": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.NOT.NOT.get_certificate_label": {"tf": 4.69041575982343}, "src.ast_nodes.operations.NOT.NOT.print": {"tf": 4}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 4.898979485566356}, "src.ast_nodes.operations.OR": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.OR.OR": {"tf": 3.1622776601683795}, "src.ast_nodes.operations.OR.OR.__init__": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.OR.OR.instruction": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.RSHIFT": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.RSHIFT.RSHIFT": {"tf": 3.1622776601683795}, "src.ast_nodes.operations.RSHIFT.RSHIFT.__init__": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.RSHIFT.RSHIFT.instruction": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.SUB": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.SUB.SUB": {"tf": 3.1622776601683795}, "src.ast_nodes.operations.SUB.SUB.__init__": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.SUB.SUB.instruction": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.operation": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.operation.Operation": {"tf": 3.3166247903554}, "src.ast_nodes.operations.operation.Operation.__init__": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.operation.Operation.lhs": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.operation.Operation.rhs": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.operation.Operation.supports_float": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.operation.Operation.print": {"tf": 4}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 4.898979485566356}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 5.477225575051661}, "src.ast_nodes.variables": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.ELEMENT_ACCESS": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 5.385164807134504}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.__init__": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.is_array": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.is_struct": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.variable": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.element": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.type": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.access_type": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.element_offset": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 4}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 5.477225575051661}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 6.4031242374328485}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.add_context": {"tf": 3.7416573867739413}, "src.ast_nodes.variables.STRUCT_DEF": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF": {"tf": 3}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.__init__": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.active": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.struct_metadata": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 4}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 4.898979485566356}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 5}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_symbol": {"tf": 3.872983346207417}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_attribute_types": {"tf": 3.4641016151377544}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.is_active": {"tf": 4}, "src.ast_nodes.variables.VAR": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.VAR.VAR": {"tf": 3}, "src.ast_nodes.variables.VAR.VAR.__init__": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.VAR.VAR.variable_metadata": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.VAR.VAR.id": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.VAR.VAR.type": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 6.164414002968976}, "src.ast_nodes.variables.VAR.VAR.get_metadata": {"tf": 3.3166247903554}, "src.ast_nodes.variables.VAR.VAR.add_context": {"tf": 4.58257569495584}, "src.ast_nodes.variables.VAR_DEF": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF": {"tf": 3}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.__init__": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.variable_metadata": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.instruction": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.size": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.symbol": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 4}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 5.0990195135927845}, "src.certificators": {"tf": 2.449489742783178}, "src.certificators.abstract_certificator": {"tf": 1.7320508075688772}, "src.certificators.abstract_certificator.AbstractCertificator": {"tf": 1.7320508075688772}, "src.certificators.abstract_certificator.AbstractCertificator.__init__": {"tf": 1.7320508075688772}, "src.certificators.abstract_certificator.AbstractCertificator.computed_certificate": {"tf": 1.7320508075688772}, "src.certificators.abstract_certificator.AbstractCertificator.initial_prime": {"tf": 1.7320508075688772}, "src.certificators.abstract_certificator.AbstractCertificator.certificate": {"tf": 1.7320508075688772}, "src.certificators.abstract_certificator.AbstractCertificator.get_certificate": {"tf": 1.7320508075688772}, "src.certificators.backend": {"tf": 1.7320508075688772}, "src.certificators.backend.BackendCertificator": {"tf": 3}, "src.certificators.backend.BackendCertificator.__init__": {"tf": 1.7320508075688772}, "src.certificators.backend.BackendCertificator.program": {"tf": 1.7320508075688772}, "src.certificators.backend.BackendCertificator.bytecode_list": {"tf": 1.7320508075688772}, "src.certificators.backend.BackendCertificator.register_tracker": {"tf": 1.7320508075688772}, "src.certificators.backend.BackendCertificator.variable_prime_tracker": {"tf": 1.7320508075688772}, "src.certificators.backend.BackendCertificator.current_positional_prime": {"tf": 1.7320508075688772}, "src.certificators.backend.BackendCertificator.current_variable_prime": {"tf": 1.7320508075688772}, "src.certificators.backend.BackendCertificator.functions_primes": {"tf": 1.7320508075688772}, "src.certificators.backend.BackendCertificator.instruction_status": {"tf": 1.7320508075688772}, "src.certificators.backend.BackendCertificator.special_instructions_handlers": {"tf": 1.7320508075688772}, "src.certificators.backend.BackendCertificator.grouped_instructions_handlers": {"tf": 1.7320508075688772}, "src.certificators.backend.BackendCertificator.certificate": {"tf": 3.4641016151377544}, "src.certificators.frontend": {"tf": 1.7320508075688772}, "src.certificators.frontend.FrontendCertificator": {"tf": 3}, "src.certificators.frontend.FrontendCertificator.__init__": {"tf": 1.7320508075688772}, "src.certificators.frontend.FrontendCertificator.ast": {"tf": 1.7320508075688772}, "src.certificators.frontend.FrontendCertificator.initial_prime": {"tf": 1.7320508075688772}, "src.certificators.frontend.FrontendCertificator.certificate": {"tf": 3.4641016151377544}, "src.code_generator": {"tf": 1.7320508075688772}, "src.code_generator.CodeGenerator": {"tf": 3.605551275463989}, "src.code_generator.CodeGenerator.__init__": {"tf": 1.7320508075688772}, "src.code_generator.CodeGenerator.root": {"tf": 1.7320508075688772}, "src.code_generator.CodeGenerator.program": {"tf": 1.7320508075688772}, "src.code_generator.CodeGenerator.register": {"tf": 1.7320508075688772}, "src.code_generator.CodeGenerator.print": {"tf": 1.7320508075688772}, "src.code_generator.CodeGenerator.generate_code": {"tf": 3.7416573867739413}, "src.code_generator.CodeGenerator.parse_struct_definitions": {"tf": 2.449489742783178}, "src.code_generator.CodeGenerator.parse_global_variables": {"tf": 1.7320508075688772}, "src.code_generator.CodeGenerator.parse_functions": {"tf": 1.7320508075688772}, "src.code_generator.CodeGenerator.get_program": {"tf": 3}, "src.lexer": {"tf": 1.7320508075688772}, "src.lexer.Lexer": {"tf": 1.7320508075688772}, "src.lexer.Lexer.__init__": {"tf": 3}, "src.lexer.Lexer.conditionals": {"tf": 1.7320508075688772}, "src.lexer.Lexer.symbols": {"tf": 1.7320508075688772}, "src.lexer.Lexer.operators": {"tf": 1.7320508075688772}, "src.lexer.Lexer.types": {"tf": 1.7320508075688772}, "src.lexer.Lexer.reserved_words": {"tf": 1.7320508075688772}, "src.lexer.Lexer.source_code": {"tf": 1.7320508075688772}, "src.lexer.Lexer.functions": {"tf": 1.7320508075688772}, "src.lexer.Lexer.globals": {"tf": 1.7320508075688772}, "src.lexer.Lexer.variable_count": {"tf": 1.7320508075688772}, "src.lexer.Lexer.struct_prime": {"tf": 1.7320508075688772}, "src.lexer.Lexer.variable_prime": {"tf": 1.7320508075688772}, "src.lexer.Lexer.parse_source_code": {"tf": 5.916079783099616}, "src.lexer.Lexer.split_source": {"tf": 3.4641016151377544}, "src.runner": {"tf": 1.7320508075688772}, "src.runner.Charon": {"tf": 5.830951894845301}, "src.runner.Charon.__init__": {"tf": 1.7320508075688772}, "src.runner.Charon.parsed_source": {"tf": 1.7320508075688772}, "src.runner.Charon.ast": {"tf": 1.7320508075688772}, "src.runner.Charon.program": {"tf": 1.7320508075688772}, "src.runner.Charon.vm": {"tf": 1.7320508075688772}, "src.runner.Charon.frontend_certificator": {"tf": 1.7320508075688772}, "src.runner.Charon.backend_certificator": {"tf": 1.7320508075688772}, "src.runner.Charon.get_parsed_source": {"tf": 2.23606797749979}, "src.runner.Charon.get_ast": {"tf": 2.23606797749979}, "src.runner.Charon.get_program": {"tf": 2.23606797749979}, "src.runner.Charon.get_vm": {"tf": 2.23606797749979}, "src.runner.Charon.get_frontend_certificator": {"tf": 2.23606797749979}, "src.runner.Charon.get_backend_certificator": {"tf": 2.23606797749979}, "src.runner.create_instance": {"tf": 4.123105625617661}, "src.utils": {"tf": 1.7320508075688772}, "src.utils.builtin_types": {"tf": 1.7320508075688772}, "src.utils.is_prime": {"tf": 4.123105625617661}, "src.utils.next_prime": {"tf": 4.358898943540674}, "src.utils.previous_prime": {"tf": 4.358898943540674}, "src.utils.primes_list": {"tf": 4.47213595499958}, "src.utils.type_cast": {"tf": 7.615773105863909}, "src.utils.get_variable_size": {"tf": 3.872983346207417}, "src.utils.flatten_list": {"tf": 4}, "src.utils.NODE_TO_INSTRUCTION_MAPPING": {"tf": 1.7320508075688772}, "src.utils.INSTRUCTION_OPERATION_TO_NODE_MAPPING": {"tf": 1.7320508075688772}, "src.utils.INSTRUCTIONS_CATEGORIES": {"tf": 1.7320508075688772}, "src.utils.SYMBOLS_MAP": {"tf": 1.7320508075688772}, "src.utils.TYPE_SYMBOLS_MAP": {"tf": 1.7320508075688772}, "src.utils.get_certificate_symbol": {"tf": 3.872983346207417}, "src.virtual_machine": {"tf": 1.7320508075688772}, "src.virtual_machine.VirtualMachine": {"tf": 3.7416573867739413}, "src.virtual_machine.VirtualMachine.__init__": {"tf": 1.7320508075688772}, "src.virtual_machine.VirtualMachine.program": {"tf": 1.7320508075688772}, "src.virtual_machine.VirtualMachine.memory": {"tf": 1.7320508075688772}, "src.virtual_machine.VirtualMachine.memory_size": {"tf": 1.7320508075688772}, "src.virtual_machine.VirtualMachine.memory_pointer": {"tf": 1.7320508075688772}, "src.virtual_machine.VirtualMachine.program_counter": {"tf": 1.7320508075688772}, "src.virtual_machine.VirtualMachine.registers": {"tf": 1.7320508075688772}, "src.virtual_machine.VirtualMachine.variables": {"tf": 1.7320508075688772}, "src.virtual_machine.VirtualMachine.get_memory": {"tf": 4.242640687119285}, "src.virtual_machine.VirtualMachine.print": {"tf": 1.7320508075688772}, "src.virtual_machine.VirtualMachine.run": {"tf": 1.7320508075688772}, "src.virtual_machine.VirtualMachine.ADD": {"tf": 4.358898943540674}, "src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 4.123105625617661}, "src.virtual_machine.VirtualMachine.ALLOC": {"tf": 4.358898943540674}, "src.virtual_machine.VirtualMachine.AND": {"tf": 6}, "src.virtual_machine.VirtualMachine.BITAND": {"tf": 4.358898943540674}, "src.virtual_machine.VirtualMachine.BITOR": {"tf": 4.358898943540674}, "src.virtual_machine.VirtualMachine.CONSTANT": {"tf": 3.7416573867739413}, "src.virtual_machine.VirtualMachine.DIV": {"tf": 4.358898943540674}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 6}, "src.virtual_machine.VirtualMachine.FADD": {"tf": 3.7416573867739413}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 5.5677643628300215}, "src.virtual_machine.VirtualMachine.FDIV": {"tf": 3.7416573867739413}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 5.5677643628300215}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 5.5677643628300215}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 5.5677643628300215}, "src.virtual_machine.VirtualMachine.FMULT": {"tf": 3.7416573867739413}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 5.5677643628300215}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 5.5677643628300215}, "src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 3.7416573867739413}, "src.virtual_machine.VirtualMachine.FSUB": {"tf": 3.7416573867739413}, "src.virtual_machine.VirtualMachine.GT": {"tf": 6}, "src.virtual_machine.VirtualMachine.HALT": {"tf": 3.1622776601683795}, "src.virtual_machine.VirtualMachine.JAL": {"tf": 3.7416573867739413}, "src.virtual_machine.VirtualMachine.JR": {"tf": 3.7416573867739413}, "src.virtual_machine.VirtualMachine.JZ": {"tf": 3.7416573867739413}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 4.358898943540674}, "src.virtual_machine.VirtualMachine.LSHIFT": {"tf": 4.358898943540674}, "src.virtual_machine.VirtualMachine.LT": {"tf": 6}, "src.virtual_machine.VirtualMachine.MOD": {"tf": 4.358898943540674}, "src.virtual_machine.VirtualMachine.MOV": {"tf": 3.7416573867739413}, "src.virtual_machine.VirtualMachine.MULT": {"tf": 4.358898943540674}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 6}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 6}, "src.virtual_machine.VirtualMachine.OR": {"tf": 6}, "src.virtual_machine.VirtualMachine.RSHIFT": {"tf": 4.358898943540674}, "src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 3.7416573867739413}, "src.virtual_machine.VirtualMachine.SITOFP": {"tf": 3.7416573867739413}, "src.virtual_machine.VirtualMachine.STORE": {"tf": 3.7416573867739413}, "src.virtual_machine.VirtualMachine.SUB": {"tf": 4.358898943540674}, "src.virtual_machine.VirtualMachine.TRUNC": {"tf": 3.7416573867739413}}, "df": 403, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"src": {"tf": 1}}, "df": 1}}}}, "g": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.build": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.get_root": {"tf": 1}, "src.ast_nodes.basic.PROG": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.PROG.PROG.print": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.certificate": {"tf": 1.7320508075688772}, "src.code_generator.CodeGenerator": {"tf": 1}}, "df": 8, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {"src.ast_nodes.basic.PROG.PROG": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.certificators.backend.BackendCertificator": {"tf": 1.7320508075688772}, "src.certificators.frontend.FrontendCertificator": {"tf": 1.4142135623730951}, "src.code_generator.CodeGenerator.generate_code": {"tf": 2}, "src.code_generator.CodeGenerator.parse_struct_definitions": {"tf": 1}, "src.code_generator.CodeGenerator.parse_global_variables": {"tf": 1}, "src.code_generator.CodeGenerator.parse_functions": {"tf": 1}, "src.code_generator.CodeGenerator.get_program": {"tf": 1.7320508075688772}, "src.runner.Charon": {"tf": 2.23606797749979}, "src.runner.Charon.get_program": {"tf": 1}, "src.runner.create_instance": {"tf": 1}, "src.virtual_machine.VirtualMachine": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.run": {"tf": 1}, "src.virtual_machine.VirtualMachine.HALT": {"tf": 1}}, "df": 15, "s": {"docs": {"src": {"tf": 1}, "src.certificators.backend": {"tf": 1}, "src.certificators.frontend": {"tf": 1}, "src.runner": {"tf": 1}}, "df": 4}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {"src.runner.Charon": {"tf": 1}}, "df": 1}}}}, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"src.virtual_machine.VirtualMachine.LOAD": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.print_tree": {"tf": 1}, "src.ast_nodes.node.Node.print": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.print": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.print": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.print": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.print": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.print": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.print": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 1}, "src.code_generator.CodeGenerator.print": {"tf": 1}, "src.virtual_machine.VirtualMachine.print": {"tf": 1}}, "df": 17, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.print_tree": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.ast_nodes.node.Node.print": {"tf": 1}}, "df": 1}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.node.Node.certificate": {"tf": 2}, "src.ast_nodes.basic.PROG.PROG.certificate": {"tf": 2}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 2}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 2}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 2}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 2}, "src.ast_nodes.functions.ARG.ARG.certificate": {"tf": 2}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 2}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 2}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 2}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 2}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 2.449489742783178}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1.7320508075688772}, "src.utils.is_prime": {"tf": 1}, "src.utils.next_prime": {"tf": 1.4142135623730951}, "src.utils.previous_prime": {"tf": 1.4142135623730951}, "src.utils.primes_list": {"tf": 1}}, "df": 17, "s": {"docs": {"src.utils.primes_list": {"tf": 1.4142135623730951}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.print_tree": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}}, "df": 3}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {"src.ast_nodes.functions.PARAM": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.ast_nodes.node.Node.generate_code": {"tf": 1}, "src.ast_nodes.basic.CST.CST": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.PARAM.PARAM": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.ASSIGN.ASSIGN": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1}}, "df": 8, "s": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.print_tree": {"tf": 1}, "src.ast_nodes.node.Node": {"tf": 1}, "src.ast_nodes.node.Node.print": {"tf": 1}, "src.ast_nodes.node.Node.generate_code": {"tf": 1}, "src.ast_nodes.node.Node.certificate": {"tf": 1}, "src.ast_nodes.basic.CST.CST": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.add_child": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.print": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.certificate": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.add_child": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.print": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.print": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.print": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.print": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.set_statements": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.PARAM.PARAM": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 1}, "src.ast_nodes.operations.ADD.ADD": {"tf": 1}, "src.ast_nodes.operations.AND.AND": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}, "src.ast_nodes.operations.BITAND.BITAND": {"tf": 1}, "src.ast_nodes.operations.BITOR.BITOR": {"tf": 1}, "src.ast_nodes.operations.DIFF.DIFF": {"tf": 1}, "src.ast_nodes.operations.DIV.DIV": {"tf": 1}, "src.ast_nodes.operations.EQUAL.EQUAL": {"tf": 1}, "src.ast_nodes.operations.GREATER.GREATER": {"tf": 1}, "src.ast_nodes.operations.LESS.LESS": {"tf": 1}, "src.ast_nodes.operations.LSHIFT.LSHIFT": {"tf": 1}, "src.ast_nodes.operations.MOD.MOD": {"tf": 1}, "src.ast_nodes.operations.MULT.MULT": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.print": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1}, "src.ast_nodes.operations.OR.OR": {"tf": 1}, "src.ast_nodes.operations.RSHIFT.RSHIFT": {"tf": 1}, "src.ast_nodes.operations.SUB.SUB": {"tf": 1}, "src.ast_nodes.operations.operation.Operation": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.print": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.add_context": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.add_context": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1}, "src.certificators.backend.BackendCertificator": {"tf": 1}, "src.certificators.frontend.FrontendCertificator": {"tf": 1}, "src.code_generator.CodeGenerator": {"tf": 1}, "src.lexer.Lexer.__init__": {"tf": 1}, "src.lexer.Lexer.parse_source_code": {"tf": 1}, "src.runner.Charon": {"tf": 1}, "src.runner.create_instance": {"tf": 1}, "src.utils.is_prime": {"tf": 1}, "src.utils.next_prime": {"tf": 1}, "src.utils.previous_prime": {"tf": 1}, "src.utils.primes_list": {"tf": 1}, "src.utils.type_cast": {"tf": 1}, "src.utils.get_variable_size": {"tf": 1}, "src.utils.flatten_list": {"tf": 1}, "src.utils.get_certificate_symbol": {"tf": 1}, "src.virtual_machine.VirtualMachine": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 1}, "src.virtual_machine.VirtualMachine.ALLOC": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.CONSTANT": {"tf": 1}, "src.virtual_machine.VirtualMachine.DIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FDIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FMULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 1}, "src.virtual_machine.VirtualMachine.FSUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.JAL": {"tf": 1}, "src.virtual_machine.VirtualMachine.JR": {"tf": 1}, "src.virtual_machine.VirtualMachine.JZ": {"tf": 1}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1}, "src.virtual_machine.VirtualMachine.LSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOD": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOV": {"tf": 1}, "src.virtual_machine.VirtualMachine.MULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}, "src.virtual_machine.VirtualMachine.RSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SITOFP": {"tf": 1}, "src.virtual_machine.VirtualMachine.STORE": {"tf": 1}, "src.virtual_machine.VirtualMachine.SUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.TRUNC": {"tf": 1}}, "df": 141}}}}}, "s": {"docs": {"src.virtual_machine.VirtualMachine.ADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 1}, "src.virtual_machine.VirtualMachine.ALLOC": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.CONSTANT": {"tf": 1}, "src.virtual_machine.VirtualMachine.DIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FDIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FMULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 1}, "src.virtual_machine.VirtualMachine.FSUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.HALT": {"tf": 1}, "src.virtual_machine.VirtualMachine.JAL": {"tf": 1}, "src.virtual_machine.VirtualMachine.JR": {"tf": 1}, "src.virtual_machine.VirtualMachine.JZ": {"tf": 1}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1}, "src.virtual_machine.VirtualMachine.LSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOD": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOV": {"tf": 1}, "src.virtual_machine.VirtualMachine.MULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}, "src.virtual_machine.VirtualMachine.RSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SITOFP": {"tf": 1}, "src.virtual_machine.VirtualMachine.STORE": {"tf": 1}, "src.virtual_machine.VirtualMachine.SUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.TRUNC": {"tf": 1}}, "df": 40}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.parse_struct_definitions": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_global_variables": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_functions": {"tf": 1}, "src.code_generator.CodeGenerator.parse_struct_definitions": {"tf": 1}, "src.lexer.Lexer.parse_source_code": {"tf": 1}, "src.runner.create_instance": {"tf": 1}}, "df": 6, "d": {"docs": {"src.lexer.Lexer.parse_source_code": {"tf": 1.4142135623730951}, "src.runner.Charon": {"tf": 1.7320508075688772}, "src.runner.Charon.get_parsed_source": {"tf": 1}}, "df": 3}}}, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.ast_nodes.node.Node.print": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.conditionals.DO.DO": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.DO.DO.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.WHILE.WHILE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.conditional.Conditional": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 1}}, "df": 15}}}}}}}}}, "d": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"src.ast_nodes.node.Node.print": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.print": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.print": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.print": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.print": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.print": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.print": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 1}}, "df": 14}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.ast_nodes.basic.PROG.PROG.print": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.print": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.print": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.print": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.print": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.print": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 1}}, "df": 13}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.ast_nodes.node.Node.generate_code": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.ast_nodes.node.Node.certificate": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.certificate": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1}, "src.certificators.backend.BackendCertificator.certificate": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.certificate": {"tf": 1}, "src.lexer.Lexer.parse_source_code": {"tf": 1}}, "df": 16, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.ast_nodes.node.Node.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.PROG.PROG.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.ARG.ARG.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1}}, "df": 13}}}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"src.utils.type_cast": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.operations.operation.Operation": {"tf": 1}, "src.virtual_machine.VirtualMachine.FADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FDIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FMULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 1}, "src.virtual_machine.VirtualMachine.FSUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.SITOFP": {"tf": 1}}, "df": 13}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.basic.SEQ.SEQ": {"tf": 1}, "src.utils": {"tf": 1}}, "df": 2}}}}}}, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}, "src.virtual_machine.VirtualMachine.SITOFP": {"tf": 1}}, "df": 6}}}}}}, "c": {"docs": {"src": {"tf": 1}, "src.certificators.backend": {"tf": 1}, "src.certificators.frontend": {"tf": 1}, "src.lexer": {"tf": 1}}, "df": 4, "]": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src": {"tf": 1}, "src.lexer.Lexer.__init__": {"tf": 1}, "src.runner.Charon": {"tf": 1}, "src.runner.create_instance": {"tf": 1}}, "df": 4}}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"src": {"tf": 1}, "src.ast_nodes.node.Node.generate_code": {"tf": 1}}, "df": 2}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.basic.CST.CST": {"tf": 2}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}, "src.virtual_machine.VirtualMachine.CONSTANT": {"tf": 1.4142135623730951}}, "df": 3}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1}, "src.utils.type_cast": {"tf": 1}, "src.virtual_machine.VirtualMachine.get_memory": {"tf": 1}}, "df": 3, "s": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.CST.CST": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1}, "src.lexer.Lexer.parse_source_code": {"tf": 1.4142135623730951}}, "df": 5}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"src.ast_nodes.node.Node.get_certificate_label": {"tf": 1}, "src.ast_nodes.node.Node.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.CST.CST": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.get_certificate_label": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_attribute_types": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1}, "src.lexer.Lexer.parse_source_code": {"tf": 1}, "src.utils.primes_list": {"tf": 1}}, "df": 34}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.node.Node.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.get_certificate_label": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.get_certificate_label": {"tf": 1}, "src.certificators.backend.BackendCertificator.certificate": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.certificate": {"tf": 1}}, "df": 14}}}, "x": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.add_context": {"tf": 2}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.add_context": {"tf": 2}, "src.lexer.Lexer.parse_source_code": {"tf": 1}}, "df": 5}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.ast_nodes.basic.SEQ.SEQ.print": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.print": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.conditional.Conditional.print": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 1.7320508075688772}, "src.virtual_machine.VirtualMachine.JZ": {"tf": 1}}, "df": 14, "s": {"docs": {"src.ast_nodes.conditionals.conditional": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional": {"tf": 1}}, "df": 2}}}}}}}}}, "j": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.ast_nodes.operations.AND.AND": {"tf": 1}}, "df": 1}}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 1}, "src.virtual_machine.VirtualMachine.SITOFP": {"tf": 1}}, "df": 2}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree": {"tf": 1.7320508075688772}, "src.abstract_syntax_tree.AbstractSyntaxTree.build": {"tf": 1}, "src.ast_nodes.node.Node": {"tf": 1.4142135623730951}, "src.ast_nodes.node.Node.generate_code": {"tf": 3}, "src.ast_nodes.node.Node.certificate": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 2.6457513110645907}, "src.ast_nodes.basic.PROG.PROG.certificate": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 2.23606797749979}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 2.23606797749979}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 2.449489742783178}, "src.ast_nodes.conditionals.IFELSE.IFELSE": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 2.6457513110645907}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 2.449489742783178}, "src.ast_nodes.conditionals.conditional.Conditional": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 2.23606797749979}, "src.ast_nodes.functions.ARG.ARG.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 2.23606797749979}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 2.23606797749979}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 2}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 2.449489742783178}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 2.449489742783178}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 2.23606797749979}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 2.23606797749979}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 2.23606797749979}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 2}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.is_active": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 2.23606797749979}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 2.23606797749979}, "src.certificators.backend.BackendCertificator.certificate": {"tf": 1.4142135623730951}, "src.certificators.frontend.FrontendCertificator.certificate": {"tf": 1}, "src.code_generator": {"tf": 1}, "src.code_generator.CodeGenerator": {"tf": 1.4142135623730951}, "src.code_generator.CodeGenerator.generate_code": {"tf": 1}, "src.code_generator.CodeGenerator.parse_global_variables": {"tf": 1}, "src.code_generator.CodeGenerator.parse_functions": {"tf": 1}, "src.lexer.Lexer.__init__": {"tf": 1.4142135623730951}, "src.lexer.Lexer.parse_source_code": {"tf": 2}, "src.lexer.Lexer.split_source": {"tf": 1.7320508075688772}, "src.runner.Charon": {"tf": 1}, "src.runner.create_instance": {"tf": 1.7320508075688772}, "src.utils.type_cast": {"tf": 2}, "src.virtual_machine": {"tf": 1}, "src.virtual_machine.VirtualMachine": {"tf": 1}}, "df": 57, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.code_generator.CodeGenerator.print": {"tf": 1}, "src.virtual_machine.VirtualMachine": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.ast_nodes.node.Node.get_certificate_label": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1.7320508075688772}}, "df": 2}}}}}, "e": {"docs": {"src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label": {"tf": 1}, "src.certificators.backend.BackendCertificator.certificate": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.certificate": {"tf": 1}}, "df": 3, "d": {"docs": {"src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}, "src.runner.Charon": {"tf": 1}}, "df": 2}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.node.Node.certificate": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.certificate": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1}, "src.utils.next_prime": {"tf": 1}, "src.utils.previous_prime": {"tf": 1}, "src.utils.primes_list": {"tf": 1}, "src.utils.type_cast": {"tf": 1}}, "df": 17, "d": {"docs": {"src.certificators.backend.BackendCertificator.certificate": {"tf": 1.4142135623730951}, "src.certificators.frontend.FrontendCertificator.certificate": {"tf": 1.4142135623730951}}, "df": 2}, "s": {"docs": {"src.virtual_machine": {"tf": 1}, "src.virtual_machine.VirtualMachine": {"tf": 1}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.ast_nodes.operations.DIFF.DIFF": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.EQUAL.EQUAL": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.GREATER.GREATER": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.LESS.LESS": {"tf": 1.7320508075688772}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}}, "df": 12}}}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.lexer": {"tf": 1}}, "df": 1}, "d": {"docs": {"src.runner.Charon": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.node.Node.certificate": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.certificate": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}}, "df": 12}}}, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"src.virtual_machine.VirtualMachine.MOV": {"tf": 1}}, "df": 1}, "d": {"docs": {"src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"src.runner.create_instance": {"tf": 1}}, "df": 1, "d": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree": {"tf": 1}}, "df": 1}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.node": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE": {"tf": 1.4142135623730951}, "src.certificators.abstract_certificator": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator": {"tf": 1}, "src.code_generator.CodeGenerator": {"tf": 1.4142135623730951}, "src.runner.Charon": {"tf": 1.4142135623730951}}, "df": 6, "e": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes": {"tf": 1}, "src.ast_nodes.node": {"tf": 1}, "src.certificators": {"tf": 1}, "src.certificators.abstract_certificator": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator": {"tf": 1}}, "df": 5}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.node": {"tf": 1}, "src.ast_nodes.basic.CST": {"tf": 1}}, "df": 2}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.node.Node.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.node.Node.certificate": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.get_certificate_label": {"tf": 1.7320508075688772}, "src.ast_nodes.basic.PROG.PROG.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.SEQ.SEQ": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.get_certificate_label": {"tf": 2}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.DO.DO.get_certificate_label": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label": {"tf": 2}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.WHILE.WHILE.get_certificate_label": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.ARG.ARG.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.ARG.ARG.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 2}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.RET_SYM.RET_SYM.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.NOT.NOT.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1.7320508075688772}, "src.certificators.backend.BackendCertificator": {"tf": 1}, "src.certificators.backend.BackendCertificator.certificate": {"tf": 1.7320508075688772}, "src.certificators.frontend.FrontendCertificator": {"tf": 1.4142135623730951}, "src.certificators.frontend.FrontendCertificator.certificate": {"tf": 1.7320508075688772}, "src.utils.get_certificate_symbol": {"tf": 1.7320508075688772}}, "df": 32, "s": {"docs": {"src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.get_certificate_label": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.get_certificate_label": {"tf": 1}, "src.runner.create_instance": {"tf": 1}}, "df": 7}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.certificators.abstract_certificator": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator": {"tf": 1}, "src.certificators.backend": {"tf": 1}, "src.certificators.frontend": {"tf": 1}, "src.runner.Charon": {"tf": 1.4142135623730951}, "src.runner.Charon.get_frontend_certificator": {"tf": 1}, "src.runner.Charon.get_backend_certificator": {"tf": 1}}, "df": 7, "s": {"docs": {"src.certificators": {"tf": 1}, "src.runner.Charon": {"tf": 1}}, "df": 2}}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1}}, "df": 1}}}}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"src.runner.Charon": {"tf": 1}}, "df": 1}}}}}}}}}, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"src.ast_nodes.basic.PROG.PROG.add_child": {"tf": 1.7320508075688772}, "src.ast_nodes.basic.PROG.PROG.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.add_child": {"tf": 1.7320508075688772}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 1}}, "df": 8, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"src.ast_nodes.node.Node.get_certificate_label": {"tf": 1}, "src.ast_nodes.node.Node.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.PROG.PROG.add_child": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.print": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.add_child": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.print": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.print": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.print": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.print": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.print": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1}}, "df": 22}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.variables.VAR.VAR.add_context": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"src.lexer.Lexer.split_source": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.runner": {"tf": 1}, "src.runner.create_instance": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"src.utils.is_prime": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.node.Node.certificate": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}}, "df": 9, "l": {"docs": {}, "df": 0, "y": {"docs": {"src.ast_nodes.basic.CST.CST": {"tf": 1}}, "df": 1}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.RET_SYM.RET_SYM": {"tf": 1.4142135623730951}}, "df": 8, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.virtual_machine.VirtualMachine.ALLOC": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1}, "src.utils.type_cast": {"tf": 2}}, "df": 2, "s": {"docs": {"src.utils.type_cast": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 1}, "src.virtual_machine.VirtualMachine.SITOFP": {"tf": 1}}, "df": 3}}, "e": {"docs": {"src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1.4142135623730951}, "src.lexer.Lexer.parse_source_code": {"tf": 1}, "src.utils.type_cast": {"tf": 1}}, "df": 3}}}}, "i": {"docs": {"src.ast_nodes.node.Node": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.set_statements": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.certificators.abstract_certificator": {"tf": 1}, "src.runner.Charon": {"tf": 1}, "src.virtual_machine.VirtualMachine.get_memory": {"tf": 1}}, "df": 13, "n": {"docs": {"src": {"tf": 1.4142135623730951}, "src.abstract_syntax_tree.AbstractSyntaxTree": {"tf": 1}, "src.ast_nodes.node.Node.get_certificate_label": {"tf": 1}, "src.ast_nodes.node.Node.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.node.Node.certificate": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.certificate": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.PARAM.PARAM": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_attribute_types": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.is_active": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.code_generator.CodeGenerator": {"tf": 1}, "src.code_generator.CodeGenerator.generate_code": {"tf": 1}, "src.code_generator.CodeGenerator.parse_struct_definitions": {"tf": 1}, "src.lexer.Lexer.parse_source_code": {"tf": 1}, "src.lexer.Lexer.split_source": {"tf": 1}, "src.runner.Charon": {"tf": 1.4142135623730951}, "src.utils.type_cast": {"tf": 1}, "src.utils.get_variable_size": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.CONSTANT": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.JR": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1.4142135623730951}}, "df": 50, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.print_tree": {"tf": 1}, "src.ast_nodes.node.Node.print": {"tf": 1.7320508075688772}, "src.ast_nodes.basic.PROG.PROG.print": {"tf": 1.7320508075688772}, "src.ast_nodes.basic.SEQ.SEQ.print": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.IFELSE.IFELSE.print": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.conditional.Conditional.print": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.ARG.ARG.print": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.NOT.NOT.print": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.operation.Operation.print": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 1.7320508075688772}}, "df": 15, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.print_tree": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.ast_nodes.node.Node.print": {"tf": 1}}, "df": 1}}}}, "x": {"docs": {"src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1}}, "df": 1}, "d": {"docs": {"src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1.4142135623730951}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.add_context": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.add_context": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"src.lexer.Lexer.parse_source_code": {"tf": 1}}, "df": 1}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.lexer.Lexer.split_source": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "t": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.print_tree": {"tf": 1}, "src.ast_nodes.node.Node": {"tf": 1}, "src.ast_nodes.node.Node.print": {"tf": 1}, "src.ast_nodes.node.Node.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.node.Node.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.PROG.PROG.print": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.PROG.PROG.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.SEQ.SEQ.print": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE.print": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.conditional.Conditional.print": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.ARG.ARG.print": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.ARG.ARG.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.NOT.NOT.print": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.operation.Operation.print": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1.4142135623730951}, "src.utils.is_prime": {"tf": 1}, "src.utils.next_prime": {"tf": 1.4142135623730951}, "src.utils.previous_prime": {"tf": 1.4142135623730951}, "src.utils.primes_list": {"tf": 1}, "src.utils.type_cast": {"tf": 2.6457513110645907}, "src.utils.get_variable_size": {"tf": 1}, "src.virtual_machine.VirtualMachine": {"tf": 1}}, "df": 55, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.ast_nodes.node.Node.generate_code": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SITOFP": {"tf": 1}}, "df": 4, "s": {"docs": {"src.utils.primes_list": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.DIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOD": {"tf": 1}, "src.virtual_machine.VirtualMachine.MULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}, "src.virtual_machine.VirtualMachine.RSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SUB": {"tf": 1}}, "df": 16}}}}, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.conditionals.WHILE.WHILE": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.lexer.Lexer.split_source": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {"src.ast_nodes.functions.PARAM.PARAM": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1}, "src.utils.flatten_list": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 1}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOV": {"tf": 1}, "src.virtual_machine.VirtualMachine.STORE": {"tf": 1}}, "df": 7}}, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.print_tree": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1}}, "df": 1}}}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.ast_nodes.node.Node.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.SEQ.SEQ": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.PARAM.PARAM": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR.VAR.add_context": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1.4142135623730951}, "src.certificators.backend.BackendCertificator.certificate": {"tf": 1}, "src.utils.type_cast": {"tf": 2}, "src.virtual_machine.VirtualMachine.ADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 1}, "src.virtual_machine.VirtualMachine.ALLOC": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.CONSTANT": {"tf": 1}, "src.virtual_machine.VirtualMachine.DIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FDIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FMULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 1}, "src.virtual_machine.VirtualMachine.FSUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.HALT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.JAL": {"tf": 1}, "src.virtual_machine.VirtualMachine.JR": {"tf": 1}, "src.virtual_machine.VirtualMachine.JZ": {"tf": 1}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1}, "src.virtual_machine.VirtualMachine.LSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOD": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOV": {"tf": 1}, "src.virtual_machine.VirtualMachine.MULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}, "src.virtual_machine.VirtualMachine.RSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SITOFP": {"tf": 1}, "src.virtual_machine.VirtualMachine.STORE": {"tf": 1}, "src.virtual_machine.VirtualMachine.SUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.TRUNC": {"tf": 1}}, "df": 65, "s": {"docs": {"src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.code_generator.CodeGenerator": {"tf": 1}, "src.utils.type_cast": {"tf": 1}, "src.virtual_machine.VirtualMachine": {"tf": 1}, "src.virtual_machine.VirtualMachine.JAL": {"tf": 1}, "src.virtual_machine.VirtualMachine.JZ": {"tf": 1}}, "df": 9}}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.code_generator.CodeGenerator": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {"src.runner.Charon": {"tf": 2.23606797749979}, "src.runner.create_instance": {"tf": 1.7320508075688772}}, "df": 2}}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1}}, "df": 3}}}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {"src.lexer.Lexer.__init__": {"tf": 1}}, "df": 1}}}}}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"src.runner.create_instance": {"tf": 1}}, "df": 1}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.abstract_syntax_tree": {"tf": 1}, "src.ast_nodes.node.Node": {"tf": 1}, "src.ast_nodes.basic.CST.CST": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM": {"tf": 1}, "src.ast_nodes.operations.ADD.ADD": {"tf": 1}, "src.ast_nodes.operations.AND.AND": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN": {"tf": 1}, "src.ast_nodes.operations.BITAND.BITAND": {"tf": 1}, "src.ast_nodes.operations.BITOR.BITOR": {"tf": 1}, "src.ast_nodes.operations.DIFF.DIFF": {"tf": 1}, "src.ast_nodes.operations.DIV.DIV": {"tf": 1}, "src.ast_nodes.operations.EQUAL.EQUAL": {"tf": 1}, "src.ast_nodes.operations.GREATER.GREATER": {"tf": 1}, "src.ast_nodes.operations.LESS.LESS": {"tf": 1}, "src.ast_nodes.operations.LSHIFT.LSHIFT": {"tf": 1}, "src.ast_nodes.operations.MOD.MOD": {"tf": 1}, "src.ast_nodes.operations.MULT.MULT": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT": {"tf": 1}, "src.ast_nodes.operations.OR.OR": {"tf": 1}, "src.ast_nodes.operations.RSHIFT.RSHIFT": {"tf": 1}, "src.ast_nodes.operations.SUB.SUB": {"tf": 1}, "src.ast_nodes.operations.operation.Operation": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF": {"tf": 1}, "src.code_generator": {"tf": 1}, "src.lexer": {"tf": 1}, "src.virtual_machine": {"tf": 1}}, "df": 40}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes": {"tf": 1}, "src.certificators": {"tf": 1}}, "df": 2}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"src.ast_nodes.node.Node.certificate": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.certificate": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}, "src.utils.next_prime": {"tf": 1}, "src.utils.previous_prime": {"tf": 1}}, "df": 14}}}}}}}}}}, "t": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.parse_struct_definitions": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_global_variables": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_functions": {"tf": 1}, "src.ast_nodes.node.Node.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.VAR.VAR": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1}, "src.code_generator.CodeGenerator.parse_struct_definitions": {"tf": 1}, "src.code_generator.CodeGenerator.parse_global_variables": {"tf": 1}, "src.code_generator.CodeGenerator.parse_functions": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 1}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1}}, "df": 20, "s": {"docs": {"src.ast_nodes.node.Node.generate_code": {"tf": 2}, "src.ast_nodes.basic.PROG.PROG.print": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.print": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.print": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.print": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.print": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.is_active": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 1}, "src.certificators.backend.BackendCertificator.certificate": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.certificate": {"tf": 1}, "src.utils.get_variable_size": {"tf": 1}}, "df": 21, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "f": {"docs": {"src.ast_nodes.node.Node.get_certificate_label": {"tf": 1}, "src.ast_nodes.node.Node.generate_code": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.print": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.certificate": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.print": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.print": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.print": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.print": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.NOT.NOT.get_certificate_label": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.print": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.print": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 1}}, "df": 47}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"src.certificators.backend.BackendCertificator.certificate": {"tf": 1}}, "df": 1}}}}}, "m": {"docs": {"src.utils.type_cast": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.print_tree": {"tf": 1}, "src.ast_nodes.node.Node.print": {"tf": 1}, "src.ast_nodes.basic.CST.CST": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.print": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.print": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.print": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.print": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.print": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN": {"tf": 1}, "src.ast_nodes.operations.DIFF.DIFF": {"tf": 1}, "src.ast_nodes.operations.EQUAL.EQUAL": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.print": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.print": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 2}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 2}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.add_context": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.is_active": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.add_context": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1.4142135623730951}, "src.lexer.Lexer.parse_source_code": {"tf": 1}, "src.lexer.Lexer.split_source": {"tf": 1}, "src.runner.Charon": {"tf": 1.4142135623730951}, "src.utils.is_prime": {"tf": 1}, "src.utils.type_cast": {"tf": 1}, "src.virtual_machine.VirtualMachine.ALLOC": {"tf": 1.7320508075688772}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.HALT": {"tf": 1}, "src.virtual_machine.VirtualMachine.JZ": {"tf": 1}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}, "src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1}}, "df": 57, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"src.lexer.Lexer.split_source": {"tf": 1}}, "df": 1}}}}}, "f": {"docs": {"src.ast_nodes.node.Node": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.CST.CST": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IF": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 2.23606797749979}, "src.ast_nodes.conditionals.IFELSE.IFELSE": {"tf": 2}, "src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 2.23606797749979}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.WHILE.WHILE": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.is_active": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 1}, "src.virtual_machine.VirtualMachine.ALLOC": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.JZ": {"tf": 1}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}}, "df": 39, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.conditionals.IFELSE": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1.7320508075688772}}, "df": 4}}}}}, "d": {"docs": {"src.ast_nodes.variables.VAR.VAR": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}}, "df": 1}}}}}}}}}, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.code_generator.CodeGenerator": {"tf": 1}, "src.virtual_machine.VirtualMachine.HALT": {"tf": 1}}, "df": 2}}}}}}}, "a": {"docs": {"src": {"tf": 1.4142135623730951}, "src.abstract_syntax_tree.AbstractSyntaxTree": {"tf": 1.4142135623730951}, "src.ast_nodes.node.Node": {"tf": 1.4142135623730951}, "src.ast_nodes.node.Node.get_certificate_label": {"tf": 1.7320508075688772}, "src.ast_nodes.node.Node.generate_code": {"tf": 2}, "src.ast_nodes.node.Node.certificate": {"tf": 1}, "src.ast_nodes.basic.CST.CST": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.PROG.PROG": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.add_child": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.PROG.PROG.certificate": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.SEQ.SEQ.add_child": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.ARG.ARG.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 2}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.set_statements": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.PARAM.PARAM": {"tf": 2}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 1}, "src.ast_nodes.operations.AND.AND": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.BITAND.BITAND": {"tf": 1}, "src.ast_nodes.operations.BITOR.BITOR": {"tf": 1}, "src.ast_nodes.operations.DIFF.DIFF": {"tf": 1}, "src.ast_nodes.operations.DIV.DIV": {"tf": 1}, "src.ast_nodes.operations.EQUAL.EQUAL": {"tf": 1}, "src.ast_nodes.operations.GREATER.GREATER": {"tf": 1}, "src.ast_nodes.operations.LESS.LESS": {"tf": 1}, "src.ast_nodes.operations.LSHIFT.LSHIFT": {"tf": 1}, "src.ast_nodes.operations.MULT.MULT": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.get_certificate_label": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1}, "src.ast_nodes.operations.OR.OR": {"tf": 1}, "src.ast_nodes.operations.RSHIFT.RSHIFT": {"tf": 1}, "src.ast_nodes.operations.SUB.SUB": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 2}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_attribute_types": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.is_active": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1}, "src.certificators.backend.BackendCertificator": {"tf": 1.4142135623730951}, "src.code_generator": {"tf": 1}, "src.code_generator.CodeGenerator.generate_code": {"tf": 1.7320508075688772}, "src.lexer": {"tf": 1}, "src.lexer.Lexer.parse_source_code": {"tf": 2}, "src.lexer.Lexer.split_source": {"tf": 1}, "src.runner": {"tf": 1}, "src.runner.Charon": {"tf": 1.7320508075688772}, "src.utils.is_prime": {"tf": 1}, "src.utils.primes_list": {"tf": 1.7320508075688772}, "src.utils.type_cast": {"tf": 2}, "src.utils.get_variable_size": {"tf": 1}, "src.utils.flatten_list": {"tf": 1.4142135623730951}, "src.virtual_machine": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 1.7320508075688772}, "src.virtual_machine.VirtualMachine.ALLOC": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.CONSTANT": {"tf": 1}, "src.virtual_machine.VirtualMachine.DIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FDIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FMULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FSUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.HALT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.JAL": {"tf": 1}, "src.virtual_machine.VirtualMachine.JR": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.JZ": {"tf": 1}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 2}, "src.virtual_machine.VirtualMachine.LSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOD": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOV": {"tf": 1}, "src.virtual_machine.VirtualMachine.MULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}, "src.virtual_machine.VirtualMachine.RSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.SITOFP": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.STORE": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.SUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.TRUNC": {"tf": 1.4142135623730951}}, "df": 137, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"src.abstract_syntax_tree": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.build": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_struct_definitions": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_global_variables": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_functions": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.get_root": {"tf": 1}, "src.ast_nodes.basic.CST": {"tf": 1}, "src.ast_nodes.basic.PROG": {"tf": 1}, "src.ast_nodes.basic.SEQ": {"tf": 1}, "src.ast_nodes.conditionals.DO": {"tf": 1}, "src.ast_nodes.conditionals.IF": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE": {"tf": 1}, "src.ast_nodes.conditionals.WHILE": {"tf": 1}, "src.ast_nodes.conditionals.conditional": {"tf": 1}, "src.ast_nodes.functions.ARG": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF": {"tf": 1}, "src.ast_nodes.functions.PARAM": {"tf": 1}, "src.ast_nodes.functions.RET_SYM": {"tf": 1}, "src.ast_nodes.operations.ADD": {"tf": 1}, "src.ast_nodes.operations.AND": {"tf": 1}, "src.ast_nodes.operations.ASSIGN": {"tf": 1}, "src.ast_nodes.operations.BITAND": {"tf": 1}, "src.ast_nodes.operations.BITOR": {"tf": 1}, "src.ast_nodes.operations.DIFF": {"tf": 1}, "src.ast_nodes.operations.DIV": {"tf": 1}, "src.ast_nodes.operations.EQUAL": {"tf": 1}, "src.ast_nodes.operations.GREATER": {"tf": 1}, "src.ast_nodes.operations.LESS": {"tf": 1}, "src.ast_nodes.operations.LSHIFT": {"tf": 1}, "src.ast_nodes.operations.MOD": {"tf": 1}, "src.ast_nodes.operations.MULT": {"tf": 1}, "src.ast_nodes.operations.NOT": {"tf": 1}, "src.ast_nodes.operations.OR": {"tf": 1}, "src.ast_nodes.operations.RSHIFT": {"tf": 1}, "src.ast_nodes.operations.SUB": {"tf": 1}, "src.ast_nodes.operations.operation": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF": {"tf": 1}, "src.ast_nodes.variables.VAR": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF": {"tf": 1}, "src.certificators.backend.BackendCertificator": {"tf": 1}, "src.code_generator.CodeGenerator": {"tf": 1.7320508075688772}, "src.code_generator.CodeGenerator.generate_code": {"tf": 1.4142135623730951}, "src.runner.Charon": {"tf": 1.4142135623730951}}, "df": 46, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1}}, "df": 2}}}, "s": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {"src.certificators.frontend.FrontendCertificator": {"tf": 1}, "src.code_generator.CodeGenerator": {"tf": 1}, "src.runner.Charon": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.basic.CST.CST": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1}}, "df": 4}}}}, "s": {"docs": {"src.ast_nodes.node.Node.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_attribute_types": {"tf": 1}, "src.lexer.Lexer.parse_source_code": {"tf": 1}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1}, "src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1}}, "df": 10, "t": {"docs": {"src.abstract_syntax_tree": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.build": {"tf": 1.4142135623730951}, "src.abstract_syntax_tree.AbstractSyntaxTree.print_tree": {"tf": 1}, "src.ast_nodes.node": {"tf": 1}, "src.ast_nodes.node.Node": {"tf": 1}, "src.ast_nodes.basic.CST.CST": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.DO.DO": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.RET_SYM.RET_SYM": {"tf": 1}, "src.ast_nodes.operations.ADD.ADD": {"tf": 1}, "src.ast_nodes.operations.AND.AND": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN": {"tf": 1}, "src.ast_nodes.operations.BITAND.BITAND": {"tf": 1}, "src.ast_nodes.operations.BITOR.BITOR": {"tf": 1}, "src.ast_nodes.operations.DIFF.DIFF": {"tf": 1}, "src.ast_nodes.operations.DIV.DIV": {"tf": 1}, "src.ast_nodes.operations.EQUAL.EQUAL": {"tf": 1}, "src.ast_nodes.operations.GREATER.GREATER": {"tf": 1}, "src.ast_nodes.operations.LESS.LESS": {"tf": 1}, "src.ast_nodes.operations.LSHIFT.LSHIFT": {"tf": 1}, "src.ast_nodes.operations.MOD.MOD": {"tf": 1}, "src.ast_nodes.operations.MULT.MULT": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT": {"tf": 1}, "src.ast_nodes.operations.OR.OR": {"tf": 1}, "src.ast_nodes.operations.RSHIFT.RSHIFT": {"tf": 1}, "src.ast_nodes.operations.SUB.SUB": {"tf": 1}, "src.ast_nodes.operations.operation.Operation": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF": {"tf": 1}, "src.certificators.frontend.FrontendCertificator": {"tf": 1.4142135623730951}, "src.certificators.frontend.FrontendCertificator.certificate": {"tf": 1}, "src.code_generator.CodeGenerator": {"tf": 1}, "src.runner.Charon": {"tf": 1.4142135623730951}, "src.runner.Charon.get_ast": {"tf": 1}}, "df": 45}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.ast_nodes.node.Node.generate_code": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1}, "src.utils.get_certificate_symbol": {"tf": 1.4142135623730951}}, "df": 21}}}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {"src.ast_nodes.operations.ASSIGN": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "n": {"docs": {"src.ast_nodes.node.Node.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.PROG.PROG.print": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.print": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.print": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.print": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"tf": 1}, "src.ast_nodes.operations.ADD.ADD": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.print": {"tf": 1}, "src.ast_nodes.operations.operation.Operation": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.print": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 2}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1.4142135623730951}, "src.code_generator.CodeGenerator": {"tf": 1}, "src.code_generator.CodeGenerator.generate_code": {"tf": 1}, "src.runner.Charon": {"tf": 2.23606797749979}, "src.runner.create_instance": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 1}, "src.virtual_machine.VirtualMachine.JR": {"tf": 1}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}}, "df": 34, "d": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.parse_struct_definitions": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_global_variables": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_functions": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.print_tree": {"tf": 1}, "src.ast_nodes.node.Node.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.node.Node.certificate": {"tf": 1}, "src.ast_nodes.basic.CST.CST": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.print": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.PROG.PROG.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.SEQ.SEQ.print": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.print": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 2}, "src.ast_nodes.conditionals.WHILE.WHILE.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.print": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.ARG.ARG.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.print": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.ARG.ARG.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.PARAM.PARAM": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.RET_SYM.RET_SYM.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.AND": {"tf": 1}, "src.ast_nodes.operations.AND.AND": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 2}, "src.ast_nodes.operations.BITAND.BITAND": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.get_certificate_label": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.print": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.operation.Operation.print": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1.4142135623730951}, "src.certificators.abstract_certificator": {"tf": 1}, "src.certificators.backend.BackendCertificator": {"tf": 1}, "src.certificators.backend.BackendCertificator.certificate": {"tf": 1.4142135623730951}, "src.certificators.frontend.FrontendCertificator.certificate": {"tf": 1.4142135623730951}, "src.code_generator.CodeGenerator.generate_code": {"tf": 1}, "src.code_generator.CodeGenerator.parse_struct_definitions": {"tf": 1.4142135623730951}, "src.code_generator.CodeGenerator.parse_global_variables": {"tf": 1}, "src.code_generator.CodeGenerator.parse_functions": {"tf": 1}, "src.lexer.Lexer.parse_source_code": {"tf": 1.7320508075688772}, "src.lexer.Lexer.split_source": {"tf": 1.7320508075688772}, "src.runner.Charon": {"tf": 1.7320508075688772}, "src.runner.create_instance": {"tf": 1.4142135623730951}, "src.utils.type_cast": {"tf": 2.23606797749979}, "src.virtual_machine.VirtualMachine.AND": {"tf": 2}, "src.virtual_machine.VirtualMachine.BITAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1.7320508075688772}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.JAL": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}, "src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1}}, "df": 93}, "y": {"docs": {"src.ast_nodes.node.Node": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.SEQ.SEQ": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1}}, "df": 3, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}}, "df": 4}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"src.certificators.backend.BackendCertificator.certificate": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.certificate": {"tf": 1}}, "df": 2, "d": {"docs": {"src.lexer.Lexer.parse_source_code": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.virtual_machine.VirtualMachine.MOV": {"tf": 1}}, "df": 1}}}}}}, "d": {"docs": {}, "df": 0, "d": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.parse_struct_definitions": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_global_variables": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_functions": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.add_child": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.add_child": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.ADD": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.add_context": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.add_context": {"tf": 1}, "src.code_generator.CodeGenerator.parse_struct_definitions": {"tf": 1}, "src.code_generator.CodeGenerator.parse_global_variables": {"tf": 1}, "src.code_generator.CodeGenerator.parse_functions": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADD": {"tf": 1}}, "df": 17, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.ast_nodes.basic.PROG.PROG.add_child": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.add_child": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.set_statements": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1}}, "df": 4}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.ast_nodes.operations.ADD.ADD": {"tf": 1.7320508075688772}, "src.virtual_machine.VirtualMachine.ADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.FADD": {"tf": 1}}, "df": 3, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.ast_nodes.basic.PROG.PROG.print": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.print": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.print": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.print": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.print": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.print": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 1}}, "df": 13}}}}}}}, "s": {"docs": {"src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}}, "df": 1}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 1.7320508075688772}, "src.virtual_machine.VirtualMachine.JR": {"tf": 1}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1}, "src.virtual_machine.VirtualMachine.STORE": {"tf": 1}}, "df": 6, "e": {"docs": {}, "df": 0, "s": {"docs": {"src.virtual_machine.VirtualMachine.get_memory": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"src.runner.Charon": {"tf": 1}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1}}, "df": 2, "o": {"docs": {}, "df": 0, "w": {"docs": {"src.ast_nodes": {"tf": 1}, "src.ast_nodes.node.Node.get_certificate_label": {"tf": 1}, "src.certificators": {"tf": 1}}, "df": 3}, "c": {"docs": {"src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1}, "src.virtual_machine.VirtualMachine.ALLOC": {"tf": 1}}, "df": 3, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.node.Node.generate_code": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1}}, "df": 2, "d": {"docs": {"src.utils.type_cast": {"tf": 1}, "src.virtual_machine.VirtualMachine.ALLOC": {"tf": 1}}, "df": 2}, "s": {"docs": {"src.virtual_machine.VirtualMachine.ALLOC": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}}, "df": 1}}}}}}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {"src.ast_nodes.node.Node.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.add_context": {"tf": 1}, "src.code_generator.CodeGenerator": {"tf": 1}, "src.code_generator.CodeGenerator.generate_code": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.DIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOD": {"tf": 1}, "src.virtual_machine.VirtualMachine.MULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}, "src.virtual_machine.VirtualMachine.RSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SUB": {"tf": 1}}, "df": 23}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.ast_nodes.basic.PROG.PROG.print": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.print": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.print": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.print": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.print": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.print": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 1}}, "df": 13}}}}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "s": {"docs": {"src.utils.primes_list": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"src.ast_nodes.node.Node.print": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.add_context": {"tf": 1}}, "df": 2}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.operations.ASSIGN.ASSIGN": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 2}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.add_context": {"tf": 1}}, "df": 7, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1.7320508075688772}}, "df": 3}}}}}}, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.is_active": {"tf": 2}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.utils.type_cast": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {"src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.is_active": {"tf": 1}, "src.utils.primes_list": {"tf": 1}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1}}, "df": 3, "t": {"docs": {}, "df": 0, "r": {"docs": {"src.lexer.Lexer.parse_source_code": {"tf": 1.4142135623730951}}, "df": 1, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.node.Node.certificate": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.certificate": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.set_statements": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_symbol": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_attribute_types": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.add_context": {"tf": 1}, "src.code_generator.CodeGenerator.generate_code": {"tf": 1}, "src.lexer.Lexer.parse_source_code": {"tf": 1.4142135623730951}, "src.runner.Charon.get_parsed_source": {"tf": 1}, "src.runner.Charon.get_ast": {"tf": 1}, "src.runner.Charon.get_program": {"tf": 1}, "src.runner.Charon.get_vm": {"tf": 1}, "src.runner.Charon.get_frontend_certificator": {"tf": 1}, "src.runner.Charon.get_backend_certificator": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 1}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1}}, "df": 29, "s": {"docs": {"src.ast_nodes.node.Node.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_attribute_types": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 1}}, "df": 6}, "d": {"docs": {"src.ast_nodes.operations.ASSIGN.ASSIGN": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.ast_nodes.operations.ASSIGN.ASSIGN": {"tf": 1}}, "df": 1}}}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.node.Node.generate_code": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1}, "src.utils.type_cast": {"tf": 1}, "src.virtual_machine.VirtualMachine.ALLOC": {"tf": 1}}, "df": 19}}}}}}}, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {"src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}}, "df": 1}}}}, "f": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.ast_nodes.node.Node.certificate": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.certificate": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}, "src.runner.Charon": {"tf": 1}, "src.utils.next_prime": {"tf": 1.4142135623730951}}, "df": 16}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.basic.PROG.PROG.print": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.print": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.print": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.print": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.print": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_attribute_types": {"tf": 1}, "src.code_generator.CodeGenerator": {"tf": 1}, "src.utils.type_cast": {"tf": 1}, "src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1}}, "df": 13}, "g": {"docs": {"src.ast_nodes.functions.ARG": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.ARG.ARG.print": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.ARG.ARG.certificate": {"tf": 1.7320508075688772}}, "df": 5, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.functions.ARG.ARG": {"tf": 2}, "src.ast_nodes.functions.ARG.ARG.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.print": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.ARG.ARG.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1}}, "df": 10}}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 1}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1}}, "df": 4, "s": {"docs": {"src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1}, "src.code_generator.CodeGenerator.parse_struct_definitions": {"tf": 1}}, "df": 3}}}}}, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1}}, "df": 1}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {"src.ast_nodes.operations.BITAND.BITAND": {"tf": 1}}, "df": 1}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.utils.primes_list": {"tf": 1}, "src.virtual_machine.VirtualMachine.JZ": {"tf": 1}}, "df": 2}}}}}}, "t": {"docs": {"src.ast_nodes.basic.SEQ.SEQ": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1}}, "df": 2, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src": {"tf": 1}}, "df": 1}}}}}}}}, "c": {"docs": {}, "df": 0, "k": {"docs": {"src.code_generator.CodeGenerator": {"tf": 1}, "src.code_generator.CodeGenerator.parse_struct_definitions": {"tf": 1}}, "df": 2, "s": {"docs": {"src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1}}, "df": 1}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"src.certificators.frontend.FrontendCertificator.certificate": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "e": {"docs": {"src.abstract_syntax_tree": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.build": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_struct_definitions": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_global_variables": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_functions": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.get_root": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.CST": {"tf": 1}, "src.ast_nodes.basic.PROG": {"tf": 1}, "src.ast_nodes.basic.SEQ": {"tf": 1}, "src.ast_nodes.conditionals.DO": {"tf": 1}, "src.ast_nodes.conditionals.IF": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE": {"tf": 1}, "src.ast_nodes.conditionals.WHILE": {"tf": 1}, "src.ast_nodes.conditionals.conditional": {"tf": 1}, "src.ast_nodes.functions.ARG": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF": {"tf": 1}, "src.ast_nodes.functions.PARAM": {"tf": 1}, "src.ast_nodes.functions.RET_SYM": {"tf": 1}, "src.ast_nodes.operations.ADD": {"tf": 1}, "src.ast_nodes.operations.AND": {"tf": 1}, "src.ast_nodes.operations.ASSIGN": {"tf": 1}, "src.ast_nodes.operations.BITAND": {"tf": 1}, "src.ast_nodes.operations.BITOR": {"tf": 1}, "src.ast_nodes.operations.DIFF": {"tf": 1}, "src.ast_nodes.operations.DIV": {"tf": 1}, "src.ast_nodes.operations.EQUAL": {"tf": 1}, "src.ast_nodes.operations.GREATER": {"tf": 1}, "src.ast_nodes.operations.LESS": {"tf": 1}, "src.ast_nodes.operations.LSHIFT": {"tf": 1}, "src.ast_nodes.operations.MOD": {"tf": 1}, "src.ast_nodes.operations.MULT": {"tf": 1}, "src.ast_nodes.operations.NOT": {"tf": 1}, "src.ast_nodes.operations.OR": {"tf": 1}, "src.ast_nodes.operations.RSHIFT": {"tf": 1}, "src.ast_nodes.operations.SUB": {"tf": 1}, "src.ast_nodes.operations.operation": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF": {"tf": 1}, "src.ast_nodes.variables.VAR": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF": {"tf": 1}, "src.certificators.backend.BackendCertificator": {"tf": 1}, "src.code_generator.CodeGenerator": {"tf": 1.7320508075688772}, "src.code_generator.CodeGenerator.generate_code": {"tf": 1.4142135623730951}, "src.runner.Charon": {"tf": 1.4142135623730951}}, "df": 46}}, "u": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.conditionals.DO.DO": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.WHILE.WHILE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label": {"tf": 1}, "src.ast_nodes.operations.operation.Operation": {"tf": 1}, "src.utils.flatten_list": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}}, "df": 27}, "n": {"docs": {}, "df": 0, "c": {"docs": {"src.virtual_machine.VirtualMachine.TRUNC": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"src.virtual_machine.VirtualMachine.TRUNC": {"tf": 1}}, "df": 1}}}}}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {"src": {"tf": 1}, "src.abstract_syntax_tree": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree": {"tf": 1.7320508075688772}, "src.abstract_syntax_tree.AbstractSyntaxTree.build": {"tf": 2}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_struct_definitions": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_global_variables": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_functions": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.print_tree": {"tf": 2}, "src.abstract_syntax_tree.AbstractSyntaxTree.get_root": {"tf": 1.7320508075688772}, "src.ast_nodes.node.Node": {"tf": 2.8284271247461903}, "src.ast_nodes.node.Node.get_value": {"tf": 1.4142135623730951}, "src.ast_nodes.node.Node.get_type": {"tf": 1.7320508075688772}, "src.ast_nodes.node.Node.get_certificate_label": {"tf": 2}, "src.ast_nodes.node.Node.print": {"tf": 2}, "src.ast_nodes.node.Node.generate_code": {"tf": 4.358898943540674}, "src.ast_nodes.node.Node.certificate": {"tf": 2.23606797749979}, "src.ast_nodes.basic.CST": {"tf": 1}, "src.ast_nodes.basic.CST.CST": {"tf": 2}, "src.ast_nodes.basic.PROG": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG": {"tf": 1.7320508075688772}, "src.ast_nodes.basic.PROG.PROG.add_child": {"tf": 1.7320508075688772}, "src.ast_nodes.basic.PROG.PROG.get_certificate_label": {"tf": 2.23606797749979}, "src.ast_nodes.basic.PROG.PROG.print": {"tf": 1.7320508075688772}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 3.7416573867739413}, "src.ast_nodes.basic.PROG.PROG.certificate": {"tf": 2.449489742783178}, "src.ast_nodes.basic.SEQ": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ": {"tf": 2}, "src.ast_nodes.basic.SEQ.SEQ.add_child": {"tf": 1.7320508075688772}, "src.ast_nodes.basic.SEQ.SEQ.get_certificate_label": {"tf": 2.449489742783178}, "src.ast_nodes.basic.SEQ.SEQ.print": {"tf": 1.7320508075688772}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 2.449489742783178}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 3}, "src.ast_nodes.conditionals.DO": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO": {"tf": 2.449489742783178}, "src.ast_nodes.conditionals.DO.DO.get_certificate_label": {"tf": 2.449489742783178}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 3.4641016151377544}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 2.6457513110645907}, "src.ast_nodes.conditionals.IF": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF": {"tf": 2.449489742783178}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 3.605551275463989}, "src.ast_nodes.conditionals.IFELSE": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE": {"tf": 2.8284271247461903}, "src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label": {"tf": 2.449489742783178}, "src.ast_nodes.conditionals.IFELSE.IFELSE.print": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 3.605551275463989}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 3.1622776601683795}, "src.ast_nodes.conditionals.WHILE": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE": {"tf": 2.8284271247461903}, "src.ast_nodes.conditionals.WHILE.WHILE.get_certificate_label": {"tf": 2.449489742783178}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 3.872983346207417}, "src.ast_nodes.conditionals.conditional": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional": {"tf": 2.449489742783178}, "src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label": {"tf": 2.6457513110645907}, "src.ast_nodes.conditionals.conditional.Conditional.print": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 2.8284271247461903}, "src.ast_nodes.functions.ARG": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG": {"tf": 2.449489742783178}, "src.ast_nodes.functions.ARG.ARG.get_certificate_label": {"tf": 2.449489742783178}, "src.ast_nodes.functions.ARG.ARG.print": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 3.1622776601683795}, "src.ast_nodes.functions.ARG.ARG.certificate": {"tf": 2.6457513110645907}, "src.ast_nodes.functions.FUNC_CALL": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.get_certificate_label": {"tf": 2.23606797749979}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 2.8284271247461903}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 2.449489742783178}, "src.ast_nodes.functions.FUNC_DEF": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 2.6457513110645907}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.set_statements": {"tf": 2}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 2.23606797749979}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 3}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 2.23606797749979}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_function_name": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.PARAM": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM": {"tf": 2.449489742783178}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 3}, "src.ast_nodes.functions.RET_SYM": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM": {"tf": 2.23606797749979}, "src.ast_nodes.functions.RET_SYM.RET_SYM.get_certificate_label": {"tf": 2.449489742783178}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"tf": 2}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 3.1622776601683795}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 2.6457513110645907}, "src.ast_nodes.operations.ADD": {"tf": 1}, "src.ast_nodes.operations.ADD.ADD": {"tf": 2.8284271247461903}, "src.ast_nodes.operations.AND": {"tf": 1}, "src.ast_nodes.operations.AND.AND": {"tf": 2.8284271247461903}, "src.ast_nodes.operations.ASSIGN": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN": {"tf": 2.6457513110645907}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 3.605551275463989}, "src.ast_nodes.operations.BITAND": {"tf": 1}, "src.ast_nodes.operations.BITAND.BITAND": {"tf": 2.8284271247461903}, "src.ast_nodes.operations.BITOR": {"tf": 1}, "src.ast_nodes.operations.BITOR.BITOR": {"tf": 2.8284271247461903}, "src.ast_nodes.operations.DIFF": {"tf": 1}, "src.ast_nodes.operations.DIFF.DIFF": {"tf": 2.8284271247461903}, "src.ast_nodes.operations.DIV": {"tf": 1}, "src.ast_nodes.operations.DIV.DIV": {"tf": 2.8284271247461903}, "src.ast_nodes.operations.EQUAL": {"tf": 1}, "src.ast_nodes.operations.EQUAL.EQUAL": {"tf": 2.8284271247461903}, "src.ast_nodes.operations.GREATER": {"tf": 1}, "src.ast_nodes.operations.GREATER.GREATER": {"tf": 2.8284271247461903}, "src.ast_nodes.operations.LESS": {"tf": 1}, "src.ast_nodes.operations.LESS.LESS": {"tf": 2.8284271247461903}, "src.ast_nodes.operations.LSHIFT": {"tf": 1}, "src.ast_nodes.operations.LSHIFT.LSHIFT": {"tf": 2.8284271247461903}, "src.ast_nodes.operations.MOD": {"tf": 1}, "src.ast_nodes.operations.MOD.MOD": {"tf": 3}, "src.ast_nodes.operations.MULT": {"tf": 1}, "src.ast_nodes.operations.MULT.MULT": {"tf": 2.8284271247461903}, "src.ast_nodes.operations.NOT": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT": {"tf": 2}, "src.ast_nodes.operations.NOT.NOT.get_certificate_label": {"tf": 2.449489742783178}, "src.ast_nodes.operations.NOT.NOT.print": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 3}, "src.ast_nodes.operations.OR": {"tf": 1}, "src.ast_nodes.operations.OR.OR": {"tf": 2.8284271247461903}, "src.ast_nodes.operations.RSHIFT": {"tf": 1}, "src.ast_nodes.operations.RSHIFT.RSHIFT": {"tf": 2.8284271247461903}, "src.ast_nodes.operations.SUB": {"tf": 1}, "src.ast_nodes.operations.SUB.SUB": {"tf": 2.8284271247461903}, "src.ast_nodes.operations.operation": {"tf": 1}, "src.ast_nodes.operations.operation.Operation": {"tf": 3}, "src.ast_nodes.operations.operation.Operation.print": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 3}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 2.6457513110645907}, "src.ast_nodes.variables.ELEMENT_ACCESS": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 2.449489742783178}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 2.23606797749979}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 3}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 4}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.add_context": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 2}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 2.6457513110645907}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 2.449489742783178}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_symbol": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_attribute_types": {"tf": 2.449489742783178}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.is_active": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR": {"tf": 2}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 3.872983346207417}, "src.ast_nodes.variables.VAR.VAR.get_metadata": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR.VAR.add_context": {"tf": 2}, "src.ast_nodes.variables.VAR_DEF": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 2}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 3.1622776601683795}, "src.certificators.backend": {"tf": 1}, "src.certificators.backend.BackendCertificator": {"tf": 1}, "src.certificators.backend.BackendCertificator.certificate": {"tf": 2}, "src.certificators.frontend": {"tf": 1}, "src.certificators.frontend.FrontendCertificator": {"tf": 1.7320508075688772}, "src.certificators.frontend.FrontendCertificator.certificate": {"tf": 2}, "src.code_generator": {"tf": 1}, "src.code_generator.CodeGenerator": {"tf": 2.23606797749979}, "src.code_generator.CodeGenerator.generate_code": {"tf": 1.7320508075688772}, "src.code_generator.CodeGenerator.parse_struct_definitions": {"tf": 2.23606797749979}, "src.code_generator.CodeGenerator.parse_global_variables": {"tf": 1}, "src.code_generator.CodeGenerator.parse_functions": {"tf": 1}, "src.code_generator.CodeGenerator.get_program": {"tf": 1.4142135623730951}, "src.lexer": {"tf": 1}, "src.lexer.Lexer.__init__": {"tf": 1.4142135623730951}, "src.lexer.Lexer.parse_source_code": {"tf": 4}, "src.lexer.Lexer.split_source": {"tf": 1.4142135623730951}, "src.runner.Charon": {"tf": 3.7416573867739413}, "src.runner.Charon.get_parsed_source": {"tf": 1}, "src.runner.Charon.get_ast": {"tf": 1}, "src.runner.Charon.get_program": {"tf": 1}, "src.runner.Charon.get_vm": {"tf": 1}, "src.runner.Charon.get_frontend_certificator": {"tf": 1}, "src.runner.Charon.get_backend_certificator": {"tf": 1}, "src.runner.create_instance": {"tf": 1.7320508075688772}, "src.utils.is_prime": {"tf": 1.7320508075688772}, "src.utils.next_prime": {"tf": 1.7320508075688772}, "src.utils.previous_prime": {"tf": 1.7320508075688772}, "src.utils.primes_list": {"tf": 2}, "src.utils.type_cast": {"tf": 3.1622776601683795}, "src.utils.get_variable_size": {"tf": 2}, "src.utils.flatten_list": {"tf": 1.7320508075688772}, "src.utils.get_certificate_symbol": {"tf": 2.23606797749979}, "src.virtual_machine.VirtualMachine": {"tf": 2}, "src.virtual_machine.VirtualMachine.get_memory": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.run": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.ADD": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 2.23606797749979}, "src.virtual_machine.VirtualMachine.ALLOC": {"tf": 2}, "src.virtual_machine.VirtualMachine.AND": {"tf": 2.23606797749979}, "src.virtual_machine.VirtualMachine.BITAND": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.BITOR": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.CONSTANT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.DIV": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 2.449489742783178}, "src.virtual_machine.VirtualMachine.FADD": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 2.23606797749979}, "src.virtual_machine.VirtualMachine.FDIV": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 2.449489742783178}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 2.449489742783178}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 2.449489742783178}, "src.virtual_machine.VirtualMachine.FMULT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 2.449489742783178}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 2.23606797749979}, "src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FSUB": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.GT": {"tf": 2.449489742783178}, "src.virtual_machine.VirtualMachine.HALT": {"tf": 1.7320508075688772}, "src.virtual_machine.VirtualMachine.JAL": {"tf": 1}, "src.virtual_machine.VirtualMachine.JR": {"tf": 1}, "src.virtual_machine.VirtualMachine.JZ": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 2.23606797749979}, "src.virtual_machine.VirtualMachine.LSHIFT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.LT": {"tf": 2.449489742783178}, "src.virtual_machine.VirtualMachine.MOD": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.MOV": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.MULT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 2.449489742783178}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 2.449489742783178}, "src.virtual_machine.VirtualMachine.OR": {"tf": 2.23606797749979}, "src.virtual_machine.VirtualMachine.RSHIFT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 2}, "src.virtual_machine.VirtualMachine.SITOFP": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.STORE": {"tf": 1}, "src.virtual_machine.VirtualMachine.SUB": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.TRUNC": {"tf": 1}}, "df": 226, "n": {"docs": {"src.ast_nodes.basic.PROG.PROG.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.certificate": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.WHILE.WHILE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.get_certificate_label": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1}, "src.utils.type_cast": {"tf": 1}}, "df": 29}, "y": {"docs": {"src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_attribute_types": {"tf": 1}, "src.code_generator.CodeGenerator.parse_struct_definitions": {"tf": 1}}, "df": 4}, "r": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree": {"tf": 1.4142135623730951}, "src.ast_nodes.node.Node.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.node.Node.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.ARG.ARG.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1}, "src.certificators.backend.BackendCertificator.certificate": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.certificate": {"tf": 1}, "src.code_generator.CodeGenerator": {"tf": 1.7320508075688772}, "src.runner.create_instance": {"tf": 1}, "src.utils.type_cast": {"tf": 1}, "src.virtual_machine": {"tf": 1}, "src.virtual_machine.VirtualMachine": {"tf": 1}, "src.virtual_machine.VirtualMachine.get_memory": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}}, "df": 38}, "n": {"docs": {"src.ast_nodes.node.Node.get_certificate_label": {"tf": 1}, "src.ast_nodes.node.Node.generate_code": {"tf": 1}, "src.ast_nodes.operations.GREATER.GREATER": {"tf": 1}, "src.ast_nodes.operations.LESS.LESS": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}}, "df": 8}}, "i": {"docs": {}, "df": 0, "s": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.get_root": {"tf": 1}, "src.ast_nodes.node.Node": {"tf": 1}, "src.ast_nodes.node.Node.get_value": {"tf": 1.4142135623730951}, "src.ast_nodes.node.Node.get_type": {"tf": 1}, "src.ast_nodes.node.Node.get_certificate_label": {"tf": 1}, "src.ast_nodes.node.Node.generate_code": {"tf": 2.23606797749979}, "src.ast_nodes.node.Node.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.CST.CST": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.print": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 2}, "src.ast_nodes.basic.PROG.PROG.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.SEQ.SEQ.print": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.IFELSE.IFELSE.print": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.WHILE.WHILE": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.conditional.Conditional.print": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.ARG.ARG": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.print": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.ARG.ARG.certificate": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.set_statements": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_function_name": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 2}, "src.ast_nodes.functions.RET_SYM.RET_SYM": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.NOT.NOT.print": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.operation.Operation.print": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 2}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 2}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.add_context": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_symbol": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_attribute_types": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.is_active": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 2}, "src.ast_nodes.variables.VAR.VAR.get_metadata": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.add_context": {"tf": 2}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1.7320508075688772}, "src.certificators.backend.BackendCertificator.certificate": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.certificate": {"tf": 1}, "src.code_generator.CodeGenerator": {"tf": 1}, "src.code_generator.CodeGenerator.print": {"tf": 1}, "src.lexer.Lexer.parse_source_code": {"tf": 1}, "src.lexer.Lexer.split_source": {"tf": 1}, "src.runner.Charon": {"tf": 2}, "src.runner.create_instance": {"tf": 1}, "src.utils.type_cast": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.get_memory": {"tf": 1}, "src.virtual_machine.VirtualMachine.print": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADD": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 1}, "src.virtual_machine.VirtualMachine.ALLOC": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.AND": {"tf": 2}, "src.virtual_machine.VirtualMachine.BITAND": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.BITOR": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.CONSTANT": {"tf": 1}, "src.virtual_machine.VirtualMachine.DIV": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 2}, "src.virtual_machine.VirtualMachine.FADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1.7320508075688772}, "src.virtual_machine.VirtualMachine.FDIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1.7320508075688772}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1.7320508075688772}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1.7320508075688772}, "src.virtual_machine.VirtualMachine.FMULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1.7320508075688772}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1.7320508075688772}, "src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 1}, "src.virtual_machine.VirtualMachine.FSUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 2}, "src.virtual_machine.VirtualMachine.HALT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.JAL": {"tf": 1}, "src.virtual_machine.VirtualMachine.JR": {"tf": 1}, "src.virtual_machine.VirtualMachine.JZ": {"tf": 1}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.LSHIFT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.LT": {"tf": 2}, "src.virtual_machine.VirtualMachine.MOD": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.MOV": {"tf": 1}, "src.virtual_machine.VirtualMachine.MULT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 2}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 2}, "src.virtual_machine.VirtualMachine.OR": {"tf": 2}, "src.virtual_machine.VirtualMachine.RSHIFT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SITOFP": {"tf": 1}, "src.virtual_machine.VirtualMachine.STORE": {"tf": 1}, "src.virtual_machine.VirtualMachine.SUB": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.TRUNC": {"tf": 1}}, "df": 116}}, "u": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.node.Node.get_certificate_label": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}, "src.utils.type_cast": {"tf": 1}}, "df": 3}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree": {"tf": 1}, "src.lexer.Lexer.parse_source_code": {"tf": 1}}, "df": 2}}}}}, "o": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.parse_struct_definitions": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_global_variables": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_functions": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.print_tree": {"tf": 1}, "src.ast_nodes": {"tf": 1}, "src.ast_nodes.node.Node": {"tf": 1.4142135623730951}, "src.ast_nodes.node.Node.get_certificate_label": {"tf": 1}, "src.ast_nodes.node.Node.print": {"tf": 1}, "src.ast_nodes.node.Node.generate_code": {"tf": 3.1622776601683795}, "src.ast_nodes.basic.PROG.PROG.add_child": {"tf": 1.7320508075688772}, "src.ast_nodes.basic.PROG.PROG.print": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.basic.SEQ.SEQ": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.add_child": {"tf": 1.7320508075688772}, "src.ast_nodes.basic.SEQ.SEQ.print": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 2}, "src.ast_nodes.conditionals.IF.IF": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 2.449489742783178}, "src.ast_nodes.conditionals.IFELSE.IFELSE": {"tf": 2.23606797749979}, "src.ast_nodes.conditionals.IFELSE.IFELSE.print": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 2.449489742783178}, "src.ast_nodes.conditionals.WHILE.WHILE": {"tf": 2}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 2.8284271247461903}, "src.ast_nodes.conditionals.conditional.Conditional": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.conditional.Conditional.print": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.print": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.set_statements": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.RET_SYM.RET_SYM": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.ASSIGN.ASSIGN": {"tf": 2}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.NOT.NOT": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.print": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.print": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.add_context": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR.VAR.add_context": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1}, "src.certificators": {"tf": 1}, "src.certificators.frontend.FrontendCertificator": {"tf": 1}, "src.code_generator.CodeGenerator.parse_struct_definitions": {"tf": 1}, "src.code_generator.CodeGenerator.parse_global_variables": {"tf": 1}, "src.code_generator.CodeGenerator.parse_functions": {"tf": 1}, "src.lexer.Lexer.parse_source_code": {"tf": 1}, "src.lexer.Lexer.split_source": {"tf": 1}, "src.runner.Charon": {"tf": 1.4142135623730951}, "src.runner.create_instance": {"tf": 1}, "src.utils.is_prime": {"tf": 1}, "src.utils.type_cast": {"tf": 3.605551275463989}, "src.utils.flatten_list": {"tf": 1}, "src.utils.get_certificate_symbol": {"tf": 1}, "src.virtual_machine.VirtualMachine": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.JR": {"tf": 1}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}, "src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1.7320508075688772}, "src.virtual_machine.VirtualMachine.SITOFP": {"tf": 1}, "src.virtual_machine.VirtualMachine.TRUNC": {"tf": 1}}, "df": 91, "o": {"docs": {"src.ast_nodes.node.Node.generate_code": {"tf": 1}}, "df": 1}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}}, "df": 2}}}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.lexer.Lexer.parse_source_code": {"tf": 1}, "src.lexer.Lexer.split_source": {"tf": 1}, "src.runner.Charon": {"tf": 1}}, "df": 3}}}}}}}}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.node.Node": {"tf": 1.4142135623730951}, "src.ast_nodes.node.Node.get_type": {"tf": 1.4142135623730951}, "src.ast_nodes.node.Node.generate_code": {"tf": 1}, "src.ast_nodes.basic.CST.CST": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.ARG.ARG": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.is_active": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1}, "src.lexer.Lexer.parse_source_code": {"tf": 2}, "src.utils.type_cast": {"tf": 2.8284271247461903}, "src.utils.get_variable_size": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 1}, "src.virtual_machine.VirtualMachine.SITOFP": {"tf": 1}}, "df": 17, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.ast_nodes.basic.CST.CST": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1.4142135623730951}}, "df": 3}}}}}, "s": {"docs": {"src.ast_nodes.basic.CST.CST": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_attribute_types": {"tf": 2}, "src.code_generator.CodeGenerator.parse_struct_definitions": {"tf": 1}, "src.lexer.Lexer.parse_source_code": {"tf": 1}}, "df": 5}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"src.utils.type_cast": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {"src.virtual_machine.VirtualMachine.ADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.DIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOD": {"tf": 1}, "src.virtual_machine.VirtualMachine.MULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}, "src.virtual_machine.VirtualMachine.RSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SUB": {"tf": 1}}, "df": 16}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.node.Node.print": {"tf": 1}}, "df": 1}}, "h": {"docs": {"src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1}}, "df": 1}, "r": {"docs": {}, "df": 0, "m": {"docs": {"src.ast_nodes.operations.NOT.NOT": {"tf": 1}}, "df": 1}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.is_active": {"tf": 1}}, "df": 1}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"src.utils.is_prime": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.node.Node.generate_code": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"src.utils.type_cast": {"tf": 2}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}}, "df": 14}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "y": {"docs": {"src.certificators.backend": {"tf": 1}, "src.certificators.frontend": {"tf": 1}, "src.lexer": {"tf": 1}}, "df": 3}}}, "w": {"docs": {}, "df": 0, "o": {"docs": {"src.utils.type_cast": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.DIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FDIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FMULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.FSUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOD": {"tf": 1}, "src.virtual_machine.VirtualMachine.MULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}, "src.virtual_machine.VirtualMachine.RSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SUB": {"tf": 1}}, "df": 26}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {"src.ast_nodes.basic.CST.CST": {"tf": 1}, "src.virtual_machine.VirtualMachine.get_memory": {"tf": 1}}, "df": 2, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src": {"tf": 1}}, "df": 1}}}}}}}, "u": {"docs": {}, "df": 0, "e": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree": {"tf": 1}, "src.ast_nodes.node.Node": {"tf": 1.4142135623730951}, "src.ast_nodes.node.Node.get_value": {"tf": 1.4142135623730951}, "src.ast_nodes.node.Node.generate_code": {"tf": 1}, "src.ast_nodes.basic.CST.CST": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.print": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.ARG.ARG.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.RET_SYM.RET_SYM.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1}, "src.virtual_machine.VirtualMachine.JZ": {"tf": 1}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.MOV": {"tf": 1}, "src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.STORE": {"tf": 1}, "src.virtual_machine.VirtualMachine.TRUNC": {"tf": 1}}, "df": 36, "s": {"docs": {"src.virtual_machine.VirtualMachine.ADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.DIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOD": {"tf": 1}, "src.virtual_machine.VirtualMachine.MULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}, "src.virtual_machine.VirtualMachine.RSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SUB": {"tf": 1}}, "df": 16}}}}, "r": {"docs": {"src.ast_nodes.node": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN": {"tf": 1}, "src.ast_nodes.variables.VAR": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.get_metadata": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.add_context": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1}, "src.utils.get_variable_size": {"tf": 1}}, "df": 12, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.PARAM.PARAM": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 2}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.add_context": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.is_active": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR.VAR.get_metadata": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.add_context": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF": {"tf": 1.7320508075688772}, "src.lexer.Lexer.parse_source_code": {"tf": 1.4142135623730951}, "src.utils.get_variable_size": {"tf": 2}, "src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 1}, "src.virtual_machine.VirtualMachine.ALLOC": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1}}, "df": 19, "s": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.parse_global_variables": {"tf": 1}, "src.code_generator.CodeGenerator.parse_global_variables": {"tf": 1}, "src.lexer.Lexer.parse_source_code": {"tf": 1}}, "df": 3}}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1}}, "df": 1}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"src.utils.is_prime": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "a": {"docs": {"src.utils.type_cast": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.code_generator": {"tf": 1}, "src.code_generator.CodeGenerator": {"tf": 1}, "src.runner.Charon": {"tf": 1.4142135623730951}, "src.runner.create_instance": {"tf": 1}, "src.virtual_machine": {"tf": 1}, "src.virtual_machine.VirtualMachine": {"tf": 1}, "src.virtual_machine.VirtualMachine.run": {"tf": 1}}, "df": 8, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"src.runner.Charon": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.print": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {"src.utils.type_cast": {"tf": 1}}, "df": 1}}}, "m": {"docs": {"src.runner.Charon": {"tf": 1}, "src.runner.Charon.get_vm": {"tf": 1}}, "df": 2}}, "f": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "k": {"docs": {"src": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "m": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.build": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.print_tree": {"tf": 1}, "src.ast_nodes": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.WHILE.WHILE.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.ARG.ARG": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.NOT.NOT.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_symbol": {"tf": 1}, "src.certificators": {"tf": 1}, "src.certificators.backend.BackendCertificator": {"tf": 1}, "src.code_generator.CodeGenerator": {"tf": 1}, "src.code_generator.CodeGenerator.generate_code": {"tf": 1.4142135623730951}, "src.lexer.Lexer.parse_source_code": {"tf": 1.4142135623730951}, "src.lexer.Lexer.split_source": {"tf": 1}, "src.runner.Charon": {"tf": 1}, "src.utils.type_cast": {"tf": 1.7320508075688772}, "src.utils.get_variable_size": {"tf": 1}, "src.utils.flatten_list": {"tf": 1}, "src.virtual_machine.VirtualMachine": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}}, "df": 45}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"src.certificators.backend": {"tf": 1}, "src.certificators.frontend": {"tf": 1}, "src.certificators.frontend.FrontendCertificator": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.certificate": {"tf": 1}, "src.runner.Charon": {"tf": 1.4142135623730951}, "src.runner.Charon.get_frontend_certificator": {"tf": 1}}, "df": 6, "s": {"docs": {"src.certificators.abstract_certificator": {"tf": 1}}, "df": 1}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.runner.Charon": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.print_tree": {"tf": 1.7320508075688772}, "src.ast_nodes.node": {"tf": 1}, "src.ast_nodes.node.Node": {"tf": 1}, "src.ast_nodes.node.Node.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.CST": {"tf": 1}, "src.ast_nodes.basic.CST.CST": {"tf": 1}, "src.ast_nodes.basic.PROG": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.certificate": {"tf": 1}, "src.ast_nodes.basic.SEQ": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1}, "src.ast_nodes.conditionals.DO": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 1}, "src.ast_nodes.conditionals.IF": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1}, "src.ast_nodes.conditionals.WHILE": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.WHILE.WHILE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.conditional": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 1}, "src.ast_nodes.functions.ARG": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.PARAM": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.RET_SYM": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 1}, "src.ast_nodes.operations.ADD": {"tf": 1}, "src.ast_nodes.operations.ADD.ADD": {"tf": 1}, "src.ast_nodes.operations.AND": {"tf": 1}, "src.ast_nodes.operations.AND.AND": {"tf": 1}, "src.ast_nodes.operations.ASSIGN": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.BITAND": {"tf": 1}, "src.ast_nodes.operations.BITAND.BITAND": {"tf": 1}, "src.ast_nodes.operations.BITOR": {"tf": 1}, "src.ast_nodes.operations.BITOR.BITOR": {"tf": 1}, "src.ast_nodes.operations.DIFF": {"tf": 1}, "src.ast_nodes.operations.DIFF.DIFF": {"tf": 1}, "src.ast_nodes.operations.DIV": {"tf": 1}, "src.ast_nodes.operations.DIV.DIV": {"tf": 1}, "src.ast_nodes.operations.EQUAL": {"tf": 1}, "src.ast_nodes.operations.EQUAL.EQUAL": {"tf": 1}, "src.ast_nodes.operations.GREATER": {"tf": 1}, "src.ast_nodes.operations.GREATER.GREATER": {"tf": 1}, "src.ast_nodes.operations.LESS": {"tf": 1}, "src.ast_nodes.operations.LESS.LESS": {"tf": 1}, "src.ast_nodes.operations.LSHIFT": {"tf": 1}, "src.ast_nodes.operations.LSHIFT.LSHIFT": {"tf": 1}, "src.ast_nodes.operations.MOD": {"tf": 1}, "src.ast_nodes.operations.MOD.MOD": {"tf": 1}, "src.ast_nodes.operations.MULT": {"tf": 1}, "src.ast_nodes.operations.MULT.MULT": {"tf": 1}, "src.ast_nodes.operations.NOT": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.get_certificate_label": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1}, "src.ast_nodes.operations.OR": {"tf": 1}, "src.ast_nodes.operations.OR.OR": {"tf": 1}, "src.ast_nodes.operations.RSHIFT": {"tf": 1}, "src.ast_nodes.operations.RSHIFT.RSHIFT": {"tf": 1}, "src.ast_nodes.operations.SUB": {"tf": 1}, "src.ast_nodes.operations.SUB.SUB": {"tf": 1}, "src.ast_nodes.operations.operation": {"tf": 1}, "src.ast_nodes.operations.operation.Operation": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.STRUCT_DEF": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1}, "src.certificators.abstract_certificator": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator": {"tf": 1}, "src.certificators.backend": {"tf": 1}, "src.certificators.frontend": {"tf": 1}, "src.code_generator": {"tf": 1}, "src.code_generator.CodeGenerator": {"tf": 1}, "src.code_generator.CodeGenerator.parse_struct_definitions": {"tf": 1}, "src.code_generator.CodeGenerator.parse_global_variables": {"tf": 1}, "src.code_generator.CodeGenerator.parse_functions": {"tf": 1}, "src.lexer": {"tf": 1}, "src.lexer.Lexer.parse_source_code": {"tf": 1}, "src.runner": {"tf": 1}, "src.virtual_machine.VirtualMachine.ALLOC": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 1}, "src.virtual_machine.VirtualMachine.HALT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SITOFP": {"tf": 1}}, "df": 131, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"src.lexer.Lexer.parse_source_code": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"src.ast_nodes.functions.FUNC_CALL": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.FUNC_DEF": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 1.4142135623730951}}, "df": 11, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.ast_nodes.functions.ARG.ARG": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 2}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.set_statements": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_function_name": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.PARAM.PARAM": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM": {"tf": 2}, "src.code_generator.CodeGenerator.parse_functions": {"tf": 1}, "src.lexer.Lexer.parse_source_code": {"tf": 2}}, "df": 9, "s": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.parse_functions": {"tf": 1}, "src.lexer.Lexer.parse_source_code": {"tf": 1.7320508075688772}}, "df": 2}}}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"src.virtual_machine.VirtualMachine.ALLOC": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.node.Node": {"tf": 1}, "src.ast_nodes.node.Node.get_value": {"tf": 1}, "src.ast_nodes.operations.operation.Operation": {"tf": 1}, "src.utils.type_cast": {"tf": 1.7320508075688772}, "src.virtual_machine.VirtualMachine.get_memory": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 1}, "src.virtual_machine.VirtualMachine.ALLOC": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.CONSTANT": {"tf": 1}, "src.virtual_machine.VirtualMachine.DIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FDIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FMULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 1}, "src.virtual_machine.VirtualMachine.FSUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.JAL": {"tf": 1}, "src.virtual_machine.VirtualMachine.JR": {"tf": 1}, "src.virtual_machine.VirtualMachine.JZ": {"tf": 1}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1}, "src.virtual_machine.VirtualMachine.LSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOD": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOV": {"tf": 1}, "src.virtual_machine.VirtualMachine.MULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}, "src.virtual_machine.VirtualMachine.RSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SITOFP": {"tf": 1}, "src.virtual_machine.VirtualMachine.STORE": {"tf": 1}, "src.virtual_machine.VirtualMachine.SUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.TRUNC": {"tf": 1}}, "df": 44, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"src.ast_nodes.operations.operation.Operation": {"tf": 1}, "src.virtual_machine.VirtualMachine.FADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FDIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FMULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 1}, "src.virtual_machine.VirtualMachine.FSUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.SITOFP": {"tf": 1}}, "df": 13}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"src.utils.flatten_list": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.utils.flatten_list": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}, "t": {"docs": {"src.virtual_machine.VirtualMachine.FLT": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.node.Node": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 2}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}}, "df": 20}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {"src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}}, "df": 13}}, "d": {"docs": {}, "df": 0, "d": {"docs": {"src.virtual_machine.VirtualMachine.FADD": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"src.virtual_machine.VirtualMachine.FAND": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"src.ast_nodes.node.Node": {"tf": 1}}, "df": 1, "s": {"docs": {"src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.basic.PROG.PROG.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.certificate": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.WHILE.WHILE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.get_certificate_label": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR": {"tf": 1}, "src.utils.next_prime": {"tf": 1}, "src.utils.previous_prime": {"tf": 1}, "src.utils.type_cast": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 1}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1}}, "df": 33}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.utils.flatten_list": {"tf": 1}}, "df": 1, "l": {"docs": {}, "df": 0, "y": {"docs": {"src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label": {"tf": 1}}, "df": 2}}}}}, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.virtual_machine.VirtualMachine.get_memory": {"tf": 1}}, "df": 1}}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {"src.virtual_machine.VirtualMachine.FDIV": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "q": {"docs": {"src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}}, "df": 1}}, "g": {"docs": {}, "df": 0, "t": {"docs": {"src.virtual_machine.VirtualMachine.FGT": {"tf": 1}}, "df": 1}}, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"src.virtual_machine.VirtualMachine.FMULT": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {"src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}}, "df": 1}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {"src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "b": {"docs": {"src.virtual_machine.VirtualMachine.FSUB": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "f": {"docs": {"src": {"tf": 1.4142135623730951}, "src.abstract_syntax_tree.AbstractSyntaxTree": {"tf": 1.4142135623730951}, "src.abstract_syntax_tree.AbstractSyntaxTree.build": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.get_root": {"tf": 1.4142135623730951}, "src.ast_nodes.node.Node": {"tf": 1}, "src.ast_nodes.node.Node.get_value": {"tf": 1.4142135623730951}, "src.ast_nodes.node.Node.get_type": {"tf": 1.4142135623730951}, "src.ast_nodes.node.Node.get_certificate_label": {"tf": 2}, "src.ast_nodes.node.Node.print": {"tf": 1.4142135623730951}, "src.ast_nodes.node.Node.generate_code": {"tf": 2.23606797749979}, "src.ast_nodes.node.Node.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.CST": {"tf": 1}, "src.ast_nodes.basic.CST.CST": {"tf": 1}, "src.ast_nodes.basic.PROG": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.PROG.PROG.get_certificate_label": {"tf": 1.7320508075688772}, "src.ast_nodes.basic.PROG.PROG.print": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 2}, "src.ast_nodes.basic.PROG.PROG.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.SEQ": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.SEQ.SEQ.get_certificate_label": {"tf": 1.7320508075688772}, "src.ast_nodes.basic.SEQ.SEQ.print": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.DO": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.DO.DO.get_certificate_label": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 2.23606797749979}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IF": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 2.23606797749979}, "src.ast_nodes.conditionals.IFELSE": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE": {"tf": 2}, "src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.IFELSE.IFELSE.print": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 2.449489742783178}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.WHILE": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.WHILE.WHILE.get_certificate_label": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 2.23606797749979}, "src.ast_nodes.conditionals.conditional": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.conditional.Conditional.print": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.ARG": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.ARG.ARG.get_certificate_label": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.ARG.ARG.print": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 2}, "src.ast_nodes.functions.ARG.ARG.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.get_certificate_label": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 2}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 2}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.set_statements": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 2}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_function_name": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.PARAM": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 2}, "src.ast_nodes.functions.RET_SYM": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.RET_SYM.RET_SYM.get_certificate_label": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 2}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.ADD": {"tf": 1}, "src.ast_nodes.operations.ADD.ADD": {"tf": 2.23606797749979}, "src.ast_nodes.operations.AND": {"tf": 1}, "src.ast_nodes.operations.AND.AND": {"tf": 2.23606797749979}, "src.ast_nodes.operations.ASSIGN": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 2}, "src.ast_nodes.operations.BITAND": {"tf": 1}, "src.ast_nodes.operations.BITAND.BITAND": {"tf": 2.23606797749979}, "src.ast_nodes.operations.BITOR": {"tf": 1}, "src.ast_nodes.operations.BITOR.BITOR": {"tf": 2.23606797749979}, "src.ast_nodes.operations.DIFF": {"tf": 1}, "src.ast_nodes.operations.DIFF.DIFF": {"tf": 2.23606797749979}, "src.ast_nodes.operations.DIV": {"tf": 1}, "src.ast_nodes.operations.DIV.DIV": {"tf": 2.23606797749979}, "src.ast_nodes.operations.EQUAL": {"tf": 1}, "src.ast_nodes.operations.EQUAL.EQUAL": {"tf": 2.23606797749979}, "src.ast_nodes.operations.GREATER": {"tf": 1}, "src.ast_nodes.operations.GREATER.GREATER": {"tf": 2.23606797749979}, "src.ast_nodes.operations.LESS": {"tf": 1}, "src.ast_nodes.operations.LESS.LESS": {"tf": 2.23606797749979}, "src.ast_nodes.operations.LSHIFT": {"tf": 1}, "src.ast_nodes.operations.LSHIFT.LSHIFT": {"tf": 2.23606797749979}, "src.ast_nodes.operations.MOD": {"tf": 1}, "src.ast_nodes.operations.MOD.MOD": {"tf": 2.23606797749979}, "src.ast_nodes.operations.MULT": {"tf": 1}, "src.ast_nodes.operations.MULT.MULT": {"tf": 2.23606797749979}, "src.ast_nodes.operations.NOT": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.NOT.NOT.get_certificate_label": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.NOT.NOT.print": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 2}, "src.ast_nodes.operations.OR": {"tf": 1}, "src.ast_nodes.operations.OR.OR": {"tf": 2.23606797749979}, "src.ast_nodes.operations.RSHIFT": {"tf": 1}, "src.ast_nodes.operations.RSHIFT.RSHIFT": {"tf": 2.23606797749979}, "src.ast_nodes.operations.SUB": {"tf": 1}, "src.ast_nodes.operations.SUB.SUB": {"tf": 2.23606797749979}, "src.ast_nodes.operations.operation": {"tf": 1}, "src.ast_nodes.operations.operation.Operation": {"tf": 2.23606797749979}, "src.ast_nodes.operations.operation.Operation.print": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 2}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 2}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 2.23606797749979}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.add_context": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_attribute_types": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.is_active": {"tf": 1}, "src.ast_nodes.variables.VAR": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 2.23606797749979}, "src.ast_nodes.variables.VAR.VAR.get_metadata": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.add_context": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 2}, "src.certificators.backend": {"tf": 1}, "src.certificators.backend.BackendCertificator": {"tf": 1.4142135623730951}, "src.certificators.backend.BackendCertificator.certificate": {"tf": 1}, "src.certificators.frontend": {"tf": 1}, "src.certificators.frontend.FrontendCertificator": {"tf": 1.4142135623730951}, "src.certificators.frontend.FrontendCertificator.certificate": {"tf": 1}, "src.code_generator.CodeGenerator": {"tf": 1.4142135623730951}, "src.code_generator.CodeGenerator.generate_code": {"tf": 1.4142135623730951}, "src.code_generator.CodeGenerator.parse_struct_definitions": {"tf": 1}, "src.lexer.Lexer.parse_source_code": {"tf": 2.6457513110645907}, "src.lexer.Lexer.split_source": {"tf": 1.4142135623730951}, "src.runner.Charon": {"tf": 2.6457513110645907}, "src.runner.create_instance": {"tf": 1}, "src.utils.primes_list": {"tf": 2}, "src.utils.type_cast": {"tf": 1.4142135623730951}, "src.utils.get_variable_size": {"tf": 1.7320508075688772}, "src.utils.flatten_list": {"tf": 1.4142135623730951}, "src.utils.get_certificate_symbol": {"tf": 1}, "src.virtual_machine.VirtualMachine.get_memory": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 1}, "src.virtual_machine.VirtualMachine.HALT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.JZ": {"tf": 1}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.MOV": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}, "src.virtual_machine.VirtualMachine.SITOFP": {"tf": 1}}, "df": 173, "f": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.print_tree": {"tf": 1}, "src.ast_nodes.node.Node": {"tf": 1.7320508075688772}, "src.ast_nodes.node.Node.print": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.PROG.PROG.print": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.print": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.print": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.print": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.print": {"tf": 1}, "src.ast_nodes.operations.operation.Operation": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.print": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 1}, "src.utils.flatten_list": {"tf": 1}, "src.virtual_machine.VirtualMachine": {"tf": 1}}, "df": 19}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.ast_nodes.node.Node.generate_code": {"tf": 1}, "src.ast_nodes.operations.AND.AND": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.ASSIGN.ASSIGN": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.BITAND.BITAND": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.BITOR.BITOR": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.LSHIFT.LSHIFT": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.MOD.MOD": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1}, "src.ast_nodes.operations.OR.OR": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.RSHIFT.RSHIFT": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.operation": {"tf": 1}, "src.ast_nodes.operations.operation.Operation": {"tf": 2}, "src.ast_nodes.operations.operation.Operation.print": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 1.7320508075688772}, "src.utils.get_certificate_symbol": {"tf": 1.7320508075688772}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.LSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOD": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}, "src.virtual_machine.VirtualMachine.RSHIFT": {"tf": 1}}, "df": 26}}}}}}}}, "r": {"docs": {"src.ast_nodes.node.Node": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.SEQ.SEQ": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN": {"tf": 1}, "src.ast_nodes.operations.BITOR.BITOR": {"tf": 1}, "src.ast_nodes.operations.OR": {"tf": 1}, "src.ast_nodes.operations.OR.OR": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.add_context": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.is_active": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.add_context": {"tf": 1}, "src.lexer.Lexer.parse_source_code": {"tf": 1.4142135623730951}, "src.utils.flatten_list": {"tf": 1}, "src.utils.get_certificate_symbol": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 1}, "src.virtual_machine.VirtualMachine.ALLOC": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1.7320508075688772}}, "df": 22, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.ast_nodes.node.Node.get_certificate_label": {"tf": 1}, "src.ast_nodes.node.Node.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_attribute_types": {"tf": 1}, "src.code_generator.CodeGenerator.parse_struct_definitions": {"tf": 1}}, "df": 9}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.ast_nodes.variables.VAR.VAR": {"tf": 1}, "src.utils.type_cast": {"tf": 1.7320508075688772}}, "df": 2}}}}}}}, "n": {"docs": {"src.lexer.Lexer.parse_source_code": {"tf": 1}, "src.runner.create_instance": {"tf": 1}, "src.virtual_machine.VirtualMachine.run": {"tf": 1}}, "df": 3, "l": {"docs": {}, "df": 0, "y": {"docs": {"src.ast_nodes.node.Node.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.SEQ.SEQ": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1}, "src.code_generator.CodeGenerator.parse_struct_definitions": {"tf": 1}, "src.utils.type_cast": {"tf": 1}, "src.virtual_machine.VirtualMachine.get_memory": {"tf": 1}}, "df": 7}}, "e": {"docs": {"src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.is_active": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOV": {"tf": 1}}, "df": 2}}, "b": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"src.ast_nodes.basic.PROG.PROG.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.get_certificate_label": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.get_certificate_label": {"tf": 1}}, "df": 10, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label": {"tf": 1}, "src.lexer.Lexer.split_source": {"tf": 1}}, "df": 2}}}}}}, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.set_statements": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1}, "src.code_generator.CodeGenerator.print": {"tf": 1}, "src.lexer.Lexer.__init__": {"tf": 1}, "src.runner.Charon": {"tf": 1}, "src.virtual_machine.VirtualMachine.print": {"tf": 1}}, "df": 6}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}, "src.lexer.Lexer.parse_source_code": {"tf": 1}, "src.lexer.Lexer.split_source": {"tf": 1}, "src.utils.type_cast": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}}, "df": 14}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.certificators.backend.BackendCertificator.certificate": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {"src.virtual_machine.VirtualMachine.get_memory": {"tf": 1}}, "df": 1, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"src.runner.Charon": {"tf": 1}}, "df": 1}}}}}}, "w": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"src": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.add_context": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.add_context": {"tf": 1}}, "df": 3}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}}, "df": 13}}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.ast_nodes.node.Node": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.operation.Operation": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.add_context": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.is_active": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.add_context": {"tf": 1}, "src.utils.is_prime": {"tf": 1}, "src.utils.flatten_list": {"tf": 1}}, "df": 8}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.is_active": {"tf": 1}}, "df": 1}}}, "n": {"docs": {"src.ast_nodes.node.Node.get_certificate_label": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR": {"tf": 1}, "src.virtual_machine.VirtualMachine.ALLOC": {"tf": 1}}, "df": 3}, "r": {"docs": {}, "df": 0, "e": {"docs": {"src.lexer.Lexer.parse_source_code": {"tf": 1.4142135623730951}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.conditionals.DO.DO": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.WHILE": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.WHILE.WHILE.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1.4142135623730951}}, "df": 6}}, "c": {"docs": {}, "df": 0, "h": {"docs": {"src.virtual_machine.VirtualMachine.LOAD": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"src.ast_nodes.node.Node": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1.4142135623730951}, "src.code_generator.CodeGenerator.generate_code": {"tf": 1}, "src.utils.type_cast": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.DIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.LSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOD": {"tf": 1}, "src.virtual_machine.VirtualMachine.MULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}, "src.virtual_machine.VirtualMachine.RSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SUB": {"tf": 1}}, "df": 24}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"src.ast_nodes.node.Node.print": {"tf": 1}, "src.ast_nodes.node.Node.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.PROG.PROG.print": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.print": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.print": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.print": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.ARG.ARG.print": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.set_statements": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.print": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.print": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1}, "src.certificators.backend.BackendCertificator": {"tf": 1}, "src.certificators.backend.BackendCertificator.certificate": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.certificate": {"tf": 1}, "src.code_generator.CodeGenerator.generate_code": {"tf": 1}, "src.runner.Charon": {"tf": 1.7320508075688772}, "src.utils.primes_list": {"tf": 1}, "src.utils.type_cast": {"tf": 1}, "src.utils.get_certificate_symbol": {"tf": 1}, "src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1}}, "df": 44, "i": {"docs": {}, "df": 0, "n": {"docs": {"src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1}, "src.lexer.Lexer.parse_source_code": {"tf": 1}}, "df": 2}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"src.virtual_machine.VirtualMachine.BITAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}}, "df": 11}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}, "src.lexer.Lexer.split_source": {"tf": 1.7320508075688772}}, "df": 3}}, "k": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {"src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}, "src.code_generator.CodeGenerator.parse_struct_definitions": {"tf": 1}, "src.utils.type_cast": {"tf": 1}, "src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 1}, "src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SITOFP": {"tf": 1}}, "df": 6}, "a": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.variables.VAR.VAR": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}, "src.virtual_machine.VirtualMachine.SITOFP": {"tf": 1}}, "df": 9, "u": {"docs": {}, "df": 0, "b": {"docs": {"src.ast_nodes.operations.SUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.SUB": {"tf": 1}}, "df": 2, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"src": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.node.Node.get_certificate_label": {"tf": 1}, "src.ast_nodes.node.Node.generate_code": {"tf": 1}}, "df": 2}}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.basic.PROG.PROG.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.set_statements": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.get_certificate_label": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.get_certificate_label": {"tf": 1}}, "df": 10, "s": {"docs": {"src.ast_nodes.basic.SEQ.SEQ.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.get_certificate_label": {"tf": 1}}, "df": 5}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.ast_nodes.operations.SUB.SUB": {"tf": 1.7320508075688772}, "src.virtual_machine.VirtualMachine.FSUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.SUB": {"tf": 1}}, "df": 3}}}}}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {"src.ast_nodes.node.Node.generate_code": {"tf": 1}, "src.lexer.Lexer.parse_source_code": {"tf": 1}}, "df": 2}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.node.Node.generate_code": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}}, "df": 14, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.ast_nodes.basic.CST.CST": {"tf": 1}}, "df": 1}}, "s": {"docs": {"src.ast_nodes.operations.operation.Operation": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "x": {"docs": {"src.abstract_syntax_tree": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.build": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_struct_definitions": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_global_variables": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.parse_functions": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.get_root": {"tf": 1}, "src.ast_nodes.basic.CST": {"tf": 1}, "src.ast_nodes.basic.PROG": {"tf": 1}, "src.ast_nodes.basic.SEQ": {"tf": 1}, "src.ast_nodes.conditionals.DO": {"tf": 1}, "src.ast_nodes.conditionals.IF": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE": {"tf": 1}, "src.ast_nodes.conditionals.WHILE": {"tf": 1}, "src.ast_nodes.conditionals.conditional": {"tf": 1}, "src.ast_nodes.functions.ARG": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF": {"tf": 1}, "src.ast_nodes.functions.PARAM": {"tf": 1}, "src.ast_nodes.functions.RET_SYM": {"tf": 1}, "src.ast_nodes.operations.ADD": {"tf": 1}, "src.ast_nodes.operations.AND": {"tf": 1}, "src.ast_nodes.operations.ASSIGN": {"tf": 1}, "src.ast_nodes.operations.BITAND": {"tf": 1}, "src.ast_nodes.operations.BITOR": {"tf": 1}, "src.ast_nodes.operations.DIFF": {"tf": 1}, "src.ast_nodes.operations.DIV": {"tf": 1}, "src.ast_nodes.operations.EQUAL": {"tf": 1}, "src.ast_nodes.operations.GREATER": {"tf": 1}, "src.ast_nodes.operations.LESS": {"tf": 1}, "src.ast_nodes.operations.LSHIFT": {"tf": 1}, "src.ast_nodes.operations.MOD": {"tf": 1}, "src.ast_nodes.operations.MULT": {"tf": 1}, "src.ast_nodes.operations.NOT": {"tf": 1}, "src.ast_nodes.operations.OR": {"tf": 1}, "src.ast_nodes.operations.RSHIFT": {"tf": 1}, "src.ast_nodes.operations.SUB": {"tf": 1}, "src.ast_nodes.operations.operation": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF": {"tf": 1}, "src.ast_nodes.variables.VAR": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF": {"tf": 1}, "src.certificators.backend.BackendCertificator": {"tf": 1}, "src.code_generator.CodeGenerator": {"tf": 1.7320508075688772}, "src.code_generator.CodeGenerator.generate_code": {"tf": 1.4142135623730951}, "src.runner.Charon": {"tf": 1.4142135623730951}}, "df": 46}}}}, "m": {"docs": {"src.ast_nodes.functions.RET_SYM": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 1.7320508075688772}}, "df": 6, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_symbol": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR.VAR.add_context": {"tf": 1}, "src.utils.get_certificate_symbol": {"tf": 1.7320508075688772}}, "df": 6, "s": {"docs": {"src.lexer.Lexer.split_source": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree": {"tf": 1.7320508075688772}, "src.abstract_syntax_tree.AbstractSyntaxTree.build": {"tf": 1}, "src.ast_nodes.node.Node.certificate": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.certificate": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.is_active": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR": {"tf": 1}, "src.code_generator.CodeGenerator": {"tf": 1}, "src.lexer.Lexer.__init__": {"tf": 1.4142135623730951}, "src.lexer.Lexer.parse_source_code": {"tf": 1.7320508075688772}, "src.lexer.Lexer.split_source": {"tf": 1.7320508075688772}, "src.runner.Charon": {"tf": 1.7320508075688772}, "src.runner.Charon.get_parsed_source": {"tf": 1}, "src.runner.create_instance": {"tf": 1.7320508075688772}}, "df": 24}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.node.Node.generate_code": {"tf": 1.4142135623730951}, "src.certificators.backend.BackendCertificator": {"tf": 1.4142135623730951}, "src.certificators.frontend.FrontendCertificator": {"tf": 1}, "src.code_generator.CodeGenerator.generate_code": {"tf": 1}, "src.virtual_machine.VirtualMachine.CONSTANT": {"tf": 1}, "src.virtual_machine.VirtualMachine.JZ": {"tf": 1}, "src.virtual_machine.VirtualMachine.STORE": {"tf": 1}}, "df": 7}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {"src.ast_nodes.node.Node": {"tf": 1.4142135623730951}, "src.ast_nodes.node.Node.get_value": {"tf": 1}, "src.ast_nodes.node.Node.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.CST.CST": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_function_name": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.get_certificate_label": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.get_certificate_label": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.add_context": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_symbol": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.get_metadata": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.add_context": {"tf": 1}, "src.lexer.Lexer.__init__": {"tf": 1}, "src.lexer.Lexer.split_source": {"tf": 1}, "src.runner.create_instance": {"tf": 1}, "src.utils.type_cast": {"tf": 1.4142135623730951}, "src.utils.get_certificate_symbol": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.get_memory": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 1}, "src.virtual_machine.VirtualMachine.ALLOC": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.CONSTANT": {"tf": 1}, "src.virtual_machine.VirtualMachine.DIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FDIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FMULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 1}, "src.virtual_machine.VirtualMachine.FSUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.JAL": {"tf": 1}, "src.virtual_machine.VirtualMachine.JR": {"tf": 1}, "src.virtual_machine.VirtualMachine.JZ": {"tf": 1}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1}, "src.virtual_machine.VirtualMachine.LSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOD": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOV": {"tf": 1}, "src.virtual_machine.VirtualMachine.MULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}, "src.virtual_machine.VirtualMachine.RSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SITOFP": {"tf": 1}, "src.virtual_machine.VirtualMachine.STORE": {"tf": 1}, "src.virtual_machine.VirtualMachine.SUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.TRUNC": {"tf": 1}}, "df": 70, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.parse_struct_definitions": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_symbol": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_attribute_types": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.is_active": {"tf": 1.7320508075688772}, "src.certificators.backend.BackendCertificator": {"tf": 1}, "src.code_generator.CodeGenerator.generate_code": {"tf": 1}, "src.code_generator.CodeGenerator.parse_struct_definitions": {"tf": 1.4142135623730951}, "src.lexer.Lexer.parse_source_code": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 1}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1}}, "df": 17, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"src.ast_nodes.basic.SEQ.SEQ": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {"src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1}, "src.code_generator.CodeGenerator": {"tf": 1.4142135623730951}, "src.code_generator.CodeGenerator.parse_struct_definitions": {"tf": 1}, "src.lexer.Lexer.parse_source_code": {"tf": 1}}, "df": 4}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"src.ast_nodes.node.Node.get_certificate_label": {"tf": 1}, "src.ast_nodes.node.Node.print": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.print": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.print": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.print": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.print": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.print": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.print": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 1}}, "df": 15}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"src.lexer.Lexer.parse_source_code": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.print_tree": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 1}}, "df": 2}}}, "s": {"docs": {"src.utils.primes_list": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.node.Node.generate_code": {"tf": 1}}, "df": 1}}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.certificate": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 2}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.WHILE.WHILE": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 1}}, "df": 14, "s": {"docs": {"src.ast_nodes.basic.SEQ.SEQ": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.set_statements": {"tf": 2}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 1}, "src.lexer.Lexer.parse_source_code": {"tf": 1.4142135623730951}}, "df": 7}}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}}, "df": 1}}}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.functions.PARAM.PARAM": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1}, "src.virtual_machine.VirtualMachine.STORE": {"tf": 1}}, "df": 3, "d": {"docs": {"src.code_generator.CodeGenerator.generate_code": {"tf": 1}, "src.virtual_machine.VirtualMachine.JR": {"tf": 1}}, "df": 2}, "s": {"docs": {"src.virtual_machine.VirtualMachine.STORE": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1}}, "df": 1}}}, "y": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"src.lexer.Lexer.split_source": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "c": {"docs": {"src.ast_nodes": {"tf": 1}, "src.certificators": {"tf": 1}, "src.code_generator.CodeGenerator": {"tf": 1}}, "df": 3}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"src.ast_nodes.node.Node": {"tf": 1}, "src.ast_nodes.node.Node.get_certificate_label": {"tf": 1}, "src.utils.flatten_list": {"tf": 1}}, "df": 3}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {"src.utils.type_cast": {"tf": 1.7320508075688772}, "src.virtual_machine.VirtualMachine.ADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.DIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOD": {"tf": 1}, "src.virtual_machine.VirtualMachine.MULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}, "src.virtual_machine.VirtualMachine.RSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SUB": {"tf": 1}}, "df": 17}}}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.operations.LSHIFT.LSHIFT": {"tf": 1}, "src.ast_nodes.operations.RSHIFT.RSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.RSHIFT": {"tf": 1}}, "df": 4}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "f": {"docs": {"src.ast_nodes.node.Node.print": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.add_child": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.add_child": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.code_generator.CodeGenerator.generate_code": {"tf": 1}, "src.virtual_machine.VirtualMachine.get_memory": {"tf": 1}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1}}, "df": 7}}, "t": {"docs": {"src.ast_nodes.node.Node.certificate": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.certificate": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.set_statements": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1}}, "df": 13}, "q": {"docs": {"src.ast_nodes.basic.SEQ": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.set_statements": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 1}}, "df": 6, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.basic.SEQ.SEQ": {"tf": 1}}, "df": 1}}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.basic.SEQ.SEQ": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1}}, "df": 2}}}}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.basic.PROG.PROG.print": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.print": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.print": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.print": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.print": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.print": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 1}}, "df": 13, "s": {"docs": {"src.ast_nodes.node.Node.print": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.print": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.print": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.print": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.print": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.print": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.print": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 1}, "src.lexer.Lexer.split_source": {"tf": 1}}, "df": 15}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.ast_nodes.node.Node.generate_code": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1}}, "df": 18}}}}}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.utils.primes_list": {"tf": 1}}, "df": 1}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"src.lexer.Lexer.split_source": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_attribute_types": {"tf": 1}}, "df": 6}}, "v": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1}}, "df": 3, "s": {"docs": {"src.virtual_machine.VirtualMachine.CONSTANT": {"tf": 1}}, "df": 1}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {"src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 1}, "src.virtual_machine.VirtualMachine.SITOFP": {"tf": 1}}, "df": 2}}}, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"src.ast_nodes.conditionals.WHILE.WHILE": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1}, "src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1}}, "df": 3}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 1}, "src.virtual_machine.VirtualMachine.SITOFP": {"tf": 1}}, "df": 2}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.operations.ADD.ADD": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.AND.AND": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.BITAND.BITAND": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.BITOR.BITOR": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.DIFF.DIFF": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.DIV.DIV": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.EQUAL.EQUAL": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.GREATER.GREATER": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.LESS.LESS": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.LSHIFT.LSHIFT": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.MOD.MOD": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.MULT.MULT": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.OR.OR": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.RSHIFT.RSHIFT": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.SUB.SUB": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.operation.Operation": {"tf": 1.4142135623730951}}, "df": 16, "s": {"docs": {"src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1}}, "df": 3}}}, "z": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.utils.get_variable_size": {"tf": 1.7320508075688772}, "src.virtual_machine.VirtualMachine": {"tf": 1.4142135623730951}}, "df": 3}}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"src.runner.Charon": {"tf": 1}, "src.utils.type_cast": {"tf": 1.4142135623730951}, "src.utils.flatten_list": {"tf": 1}}, "df": 3}}}}, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 1}, "src.virtual_machine.VirtualMachine.SITOFP": {"tf": 1}}, "df": 2}, "x": {"docs": {}, "df": 0, "t": {"docs": {"src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "p": {"docs": {"src.virtual_machine.VirtualMachine.SITOFP": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"src.lexer.Lexer.parse_source_code": {"tf": 2.23606797749979}}, "df": 1, "s": {"docs": {"src.lexer.Lexer.parse_source_code": {"tf": 1}}, "df": 1}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"src": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}}, "df": 14}}}}}}, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"src.ast_nodes.node.Node.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.PROG.PROG.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.SEQ.SEQ.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.DO.DO.get_certificate_label": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label": {"tf": 2}, "src.ast_nodes.conditionals.WHILE.WHILE.get_certificate_label": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.ARG.ARG.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.RET_SYM.RET_SYM.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.NOT.NOT.get_certificate_label": {"tf": 1.4142135623730951}}, "df": 12, "s": {"docs": {"src.ast_nodes.node.Node.get_certificate_label": {"tf": 1}, "src.certificators.backend.BackendCertificator.certificate": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.certificate": {"tf": 1}}, "df": 3}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}}, "df": 3}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.virtual_machine.VirtualMachine.LOAD": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree": {"tf": 1}, "src.ast_nodes.node.Node.get_certificate_label": {"tf": 1.7320508075688772}, "src.ast_nodes.node.Node.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.basic.PROG.PROG.add_child": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.PROG.PROG.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.basic.SEQ.SEQ.add_child": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.SEQ.SEQ.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.WHILE.WHILE.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.ARG.ARG.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.RET_SYM.RET_SYM.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.NOT.NOT.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_attribute_types": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1.4142135623730951}, "src.certificators.backend.BackendCertificator.certificate": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.certificate": {"tf": 1}, "src.lexer.Lexer.parse_source_code": {"tf": 1.4142135623730951}, "src.lexer.Lexer.split_source": {"tf": 1.4142135623730951}, "src.utils.primes_list": {"tf": 2}, "src.utils.type_cast": {"tf": 1.4142135623730951}, "src.utils.flatten_list": {"tf": 2.8284271247461903}}, "df": 43, "s": {"docs": {"src.ast_nodes.node.Node.get_certificate_label": {"tf": 1}, "src.utils.flatten_list": {"tf": 1.4142135623730951}}, "df": 2}, "[": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_attribute_types": {"tf": 1}, "src.certificators.backend.BackendCertificator.certificate": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.certificate": {"tf": 1}}, "df": 3}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.utils.primes_list": {"tf": 1}}, "df": 1}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"src.utils.type_cast": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"src.utils.flatten_list": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"src.lexer.Lexer.parse_source_code": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "e": {"docs": {"src.lexer.Lexer.split_source": {"tf": 1}}, "df": 1}, "k": {"docs": {"src.virtual_machine.VirtualMachine.JAL": {"tf": 1}}, "df": 1}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}}, "df": 13}}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF": {"tf": 1}, "src.lexer": {"tf": 1}, "src.lexer.Lexer.__init__": {"tf": 1}, "src.runner.Charon": {"tf": 1.4142135623730951}, "src.utils.get_variable_size": {"tf": 1}}, "df": 11}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.print_tree": {"tf": 1.4142135623730951}, "src.lexer.Lexer.__init__": {"tf": 1}}, "df": 2}}}, "f": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.node.Node.print": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.print": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.SEQ.SEQ.print": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE.print": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.conditional.Conditional.print": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.ARG.ARG.print": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.ADD.ADD": {"tf": 1}, "src.ast_nodes.operations.AND.AND": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}, "src.ast_nodes.operations.BITAND.BITAND": {"tf": 1}, "src.ast_nodes.operations.BITOR.BITOR": {"tf": 1}, "src.ast_nodes.operations.DIFF.DIFF": {"tf": 1}, "src.ast_nodes.operations.DIV.DIV": {"tf": 1}, "src.ast_nodes.operations.EQUAL.EQUAL": {"tf": 1}, "src.ast_nodes.operations.GREATER.GREATER": {"tf": 1}, "src.ast_nodes.operations.LESS.LESS": {"tf": 1}, "src.ast_nodes.operations.LSHIFT.LSHIFT": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.MOD.MOD": {"tf": 1}, "src.ast_nodes.operations.MULT.MULT": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.print": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1}, "src.ast_nodes.operations.OR.OR": {"tf": 1}, "src.ast_nodes.operations.RSHIFT.RSHIFT": {"tf": 1}, "src.ast_nodes.operations.SUB.SUB": {"tf": 1}, "src.ast_nodes.operations.operation.Operation": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.print": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.LSHIFT": {"tf": 1}}, "df": 34}}, "s": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.operations.LESS": {"tf": 1}, "src.ast_nodes.operations.LESS.LESS": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}}, "df": 4}}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1}, "src.utils.primes_list": {"tf": 1.7320508075688772}}, "df": 3}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.is_active": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"src.ast_nodes.conditionals.DO.DO": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.DO.DO.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.WHILE.WHILE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1.7320508075688772}}, "df": 7}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.ast_nodes.functions.PARAM.PARAM": {"tf": 1}}, "df": 1}}}}}}, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.ast_nodes.operations.AND.AND": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT": {"tf": 1}, "src.ast_nodes.operations.OR.OR": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}}, "df": 8}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.runner.create_instance": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 1}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1.4142135623730951}}, "df": 4, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.runner.Charon": {"tf": 1.7320508075688772}}, "df": 1}}, "s": {"docs": {"src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 1}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1}}, "df": 2}}}}, "h": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.operations.ADD.ADD": {"tf": 1}, "src.ast_nodes.operations.AND.AND": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.BITAND.BITAND": {"tf": 1}, "src.ast_nodes.operations.BITOR.BITOR": {"tf": 1}, "src.ast_nodes.operations.DIFF.DIFF": {"tf": 1}, "src.ast_nodes.operations.DIV.DIV": {"tf": 1}, "src.ast_nodes.operations.EQUAL.EQUAL": {"tf": 1}, "src.ast_nodes.operations.GREATER.GREATER": {"tf": 1}, "src.ast_nodes.operations.LESS.LESS": {"tf": 1}, "src.ast_nodes.operations.LSHIFT.LSHIFT": {"tf": 1}, "src.ast_nodes.operations.MOD.MOD": {"tf": 1}, "src.ast_nodes.operations.MULT.MULT": {"tf": 1}, "src.ast_nodes.operations.OR.OR": {"tf": 1}, "src.ast_nodes.operations.RSHIFT.RSHIFT": {"tf": 1}, "src.ast_nodes.operations.SUB.SUB": {"tf": 1}, "src.ast_nodes.operations.operation.Operation": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}}, "df": 22}}, "t": {"docs": {"src.ast_nodes.operations.LESS.LESS": {"tf": 1}, "src.ast_nodes.operations.LSHIFT.LSHIFT": {"tf": 1.4142135623730951}, "src.lexer.Lexer.parse_source_code": {"tf": 2.449489742783178}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}}, "df": 4}, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.operations.LSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LSHIFT": {"tf": 1}}, "df": 2}}}}}, "l": {"docs": {"src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 1}, "src.virtual_machine.VirtualMachine.SITOFP": {"tf": 1}}, "df": 2}}, "n": {"docs": {}, "df": 0, "o": {"docs": {"src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1}}, "df": 3, "d": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.node.Node": {"tf": 2}, "src.ast_nodes.node.Node.get_value": {"tf": 1.4142135623730951}, "src.ast_nodes.node.Node.get_type": {"tf": 1.4142135623730951}, "src.ast_nodes.node.Node.get_certificate_label": {"tf": 1}, "src.ast_nodes.node.Node.generate_code": {"tf": 2.23606797749979}, "src.ast_nodes.node.Node.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.PROG.PROG.add_child": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.PROG.PROG.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.PROG.PROG.print": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.basic.PROG.PROG.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.SEQ.SEQ": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.add_child": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.SEQ.SEQ.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.SEQ.SEQ.print": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.DO.DO": {"tf": 2}, "src.ast_nodes.conditionals.DO.DO.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IF.IF": {"tf": 2}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE": {"tf": 2.449489742783178}, "src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.print": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE": {"tf": 2}, "src.ast_nodes.conditionals.WHILE.WHILE.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.conditional.Conditional": {"tf": 2}, "src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.conditional.Conditional.print": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.get_certificate_label": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.ARG.ARG.print": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.ARG.ARG.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.RET_SYM.RET_SYM.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 1}, "src.ast_nodes.operations.ADD.ADD": {"tf": 2}, "src.ast_nodes.operations.AND.AND": {"tf": 2}, "src.ast_nodes.operations.ASSIGN.ASSIGN": {"tf": 2}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.BITAND.BITAND": {"tf": 2}, "src.ast_nodes.operations.BITOR.BITOR": {"tf": 2}, "src.ast_nodes.operations.DIFF.DIFF": {"tf": 2}, "src.ast_nodes.operations.DIV.DIV": {"tf": 2}, "src.ast_nodes.operations.EQUAL.EQUAL": {"tf": 2}, "src.ast_nodes.operations.GREATER.GREATER": {"tf": 2}, "src.ast_nodes.operations.LESS.LESS": {"tf": 2}, "src.ast_nodes.operations.LSHIFT.LSHIFT": {"tf": 2}, "src.ast_nodes.operations.MOD.MOD": {"tf": 2}, "src.ast_nodes.operations.MULT.MULT": {"tf": 2}, "src.ast_nodes.operations.NOT.NOT": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.NOT.NOT.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.NOT.NOT.print": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.OR.OR": {"tf": 2}, "src.ast_nodes.operations.RSHIFT.RSHIFT": {"tf": 2}, "src.ast_nodes.operations.SUB.SUB": {"tf": 2}, "src.ast_nodes.operations.operation.Operation": {"tf": 2}, "src.ast_nodes.operations.operation.Operation.print": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.add_context": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR.VAR.add_context": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1.4142135623730951}, "src.certificators.frontend.FrontendCertificator.certificate": {"tf": 1}, "src.utils.get_certificate_symbol": {"tf": 1}}, "df": 93, "s": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree": {"tf": 1}, "src.ast_nodes": {"tf": 1}, "src.ast_nodes.node": {"tf": 1}, "src.ast_nodes.node.Node.get_certificate_label": {"tf": 1}, "src.ast_nodes.node.Node.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.basic.CST": {"tf": 1}, "src.ast_nodes.basic.PROG": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.certificate": {"tf": 1}, "src.ast_nodes.basic.SEQ": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.DO": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 1}, "src.ast_nodes.conditionals.IF": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.WHILE": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.ARG": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.PARAM": {"tf": 1}, "src.ast_nodes.functions.RET_SYM": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 1}, "src.ast_nodes.operations.ADD": {"tf": 1}, "src.ast_nodes.operations.AND": {"tf": 1}, "src.ast_nodes.operations.ASSIGN": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}, "src.ast_nodes.operations.BITAND": {"tf": 1}, "src.ast_nodes.operations.BITOR": {"tf": 1}, "src.ast_nodes.operations.DIFF": {"tf": 1}, "src.ast_nodes.operations.DIV": {"tf": 1}, "src.ast_nodes.operations.EQUAL": {"tf": 1}, "src.ast_nodes.operations.GREATER": {"tf": 1}, "src.ast_nodes.operations.LESS": {"tf": 1}, "src.ast_nodes.operations.LSHIFT": {"tf": 1}, "src.ast_nodes.operations.MOD": {"tf": 1}, "src.ast_nodes.operations.MULT": {"tf": 1}, "src.ast_nodes.operations.NOT": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.get_certificate_label": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1}, "src.ast_nodes.operations.OR": {"tf": 1}, "src.ast_nodes.operations.RSHIFT": {"tf": 1}, "src.ast_nodes.operations.SUB": {"tf": 1}, "src.ast_nodes.operations.operation": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1}, "src.ast_nodes.variables.VAR": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF": {"tf": 1}, "src.code_generator.CodeGenerator": {"tf": 1}}, "df": 69}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.node.Node": {"tf": 2.449489742783178}, "src.ast_nodes.node.Node.get_value": {"tf": 1}, "src.ast_nodes.node.Node.get_type": {"tf": 1}, "src.virtual_machine.VirtualMachine.get_memory": {"tf": 1.4142135623730951}}, "df": 4}}, "t": {"docs": {"src.ast_nodes.node.Node.generate_code": {"tf": 1}, "src.ast_nodes.basic.CST.CST": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.DIFF.DIFF": {"tf": 1}, "src.ast_nodes.operations.NOT": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.get_certificate_label": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.NOT.NOT.print": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.is_active": {"tf": 1.4142135623730951}, "src.code_generator.CodeGenerator": {"tf": 1}, "src.utils.type_cast": {"tf": 1}, "src.utils.flatten_list": {"tf": 1}, "src.virtual_machine.VirtualMachine.get_memory": {"tf": 1}, "src.virtual_machine.VirtualMachine.ALLOC": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1.7320508075688772}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}, "src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1}}, "df": 38, "e": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.node.Node.get_certificate_label": {"tf": 1}, "src.ast_nodes.node.Node.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.add_context": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}}, "df": 16}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.node.Node.generate_code": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1}, "src.utils.type_cast": {"tf": 1}}, "df": 4}}}}, "r": {"docs": {"src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.ast_nodes.node.Node.print": {"tf": 1}, "src.ast_nodes.node.Node.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.node.Node.certificate": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.print": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.PROG.PROG.certificate": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.print": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE.print": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.conditional.Conditional.print": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.print": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.ARG.ARG.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.NOT.NOT.print": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.operation.Operation.print": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1.4142135623730951}, "src.utils.is_prime": {"tf": 1.7320508075688772}, "src.utils.next_prime": {"tf": 2.23606797749979}, "src.utils.previous_prime": {"tf": 2.23606797749979}, "src.utils.type_cast": {"tf": 1}}, "df": 49, "s": {"docs": {"src.ast_nodes.operations.operation.Operation": {"tf": 1}, "src.utils.primes_list": {"tf": 1}, "src.virtual_machine.VirtualMachine.FADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FDIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FMULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.FSUB": {"tf": 1}}, "df": 12}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_function_name": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.PARAM.PARAM": {"tf": 1}, "src.lexer.Lexer.parse_source_code": {"tf": 2.449489742783178}}, "df": 4, "l": {"docs": {}, "df": 0, "y": {"docs": {"src.ast_nodes.node.Node.generate_code": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.node.Node.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1}, "src.utils.next_prime": {"tf": 1.4142135623730951}, "src.utils.previous_prime": {"tf": 1}, "src.utils.type_cast": {"tf": 1}}, "df": 20}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}}, "df": 1}}, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.ast_nodes.operations.NOT.NOT": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.ast_nodes.operations.NOT.NOT": {"tf": 1}}, "df": 1}}}}}, "q": {"docs": {"src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}}, "df": 1}}}, "g": {"docs": {"src.ast_nodes.node": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.node.Node.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 2}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1}, "src.code_generator.CodeGenerator.generate_code": {"tf": 1}, "src.code_generator.CodeGenerator.parse_global_variables": {"tf": 1}, "src.code_generator.CodeGenerator.parse_functions": {"tf": 1}, "src.runner": {"tf": 1}, "src.utils.type_cast": {"tf": 1}, "src.virtual_machine.VirtualMachine": {"tf": 1}}, "df": 25, "d": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree": {"tf": 1}, "src.ast_nodes.node.Node": {"tf": 1}, "src.ast_nodes.node.Node.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR.VAR": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1.4142135623730951}, "src.certificators.backend.BackendCertificator": {"tf": 1}, "src.code_generator.CodeGenerator": {"tf": 1}, "src.code_generator.CodeGenerator.generate_code": {"tf": 1.4142135623730951}, "src.code_generator.CodeGenerator.parse_struct_definitions": {"tf": 1}, "src.code_generator.CodeGenerator.parse_global_variables": {"tf": 1}, "src.code_generator.CodeGenerator.parse_functions": {"tf": 1}, "src.code_generator.CodeGenerator.get_program": {"tf": 1.4142135623730951}, "src.runner.Charon": {"tf": 1}, "src.virtual_machine": {"tf": 1}, "src.virtual_machine.VirtualMachine": {"tf": 1}}, "df": 32}, "s": {"docs": {"src.ast_nodes.functions.PARAM.PARAM": {"tf": 1}, "src.code_generator.CodeGenerator": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.code_generator": {"tf": 1}, "src.code_generator.CodeGenerator": {"tf": 1}}, "df": 2}}}, "l": {"docs": {"src.utils": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.get_root": {"tf": 1}, "src.ast_nodes.node.Node.get_value": {"tf": 1}, "src.ast_nodes.node.Node.get_type": {"tf": 1}, "src.ast_nodes.node.Node.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.WHILE.WHILE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_function_name": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.get_certificate_label": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.get_certificate_label": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_symbol": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_attribute_types": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.get_metadata": {"tf": 1}, "src.code_generator.CodeGenerator.get_program": {"tf": 1}, "src.runner.Charon.get_parsed_source": {"tf": 1}, "src.runner.Charon.get_ast": {"tf": 1}, "src.runner.Charon.get_program": {"tf": 1}, "src.runner.Charon.get_vm": {"tf": 1}, "src.runner.Charon.get_frontend_certificator": {"tf": 1}, "src.runner.Charon.get_backend_certificator": {"tf": 1}, "src.utils.get_variable_size": {"tf": 1}, "src.utils.get_certificate_symbol": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.get_memory": {"tf": 1}}, "df": 29}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.parse_global_variables": {"tf": 1}, "src.code_generator.CodeGenerator.parse_global_variables": {"tf": 1}, "src.lexer.Lexer.parse_source_code": {"tf": 1.7320508075688772}}, "df": 3, "s": {"docs": {"src.lexer.Lexer.parse_source_code": {"tf": 1.7320508075688772}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.ast_nodes.operations.GREATER": {"tf": 1}, "src.ast_nodes.operations.GREATER.GREATER": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}}, "df": 4}}}}}}, "t": {"docs": {"src.ast_nodes.operations.GREATER.GREATER": {"tf": 1}, "src.ast_nodes.operations.RSHIFT.RSHIFT": {"tf": 1.4142135623730951}, "src.lexer.Lexer.parse_source_code": {"tf": 2.449489742783178}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}}, "df": 4}, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1}, "src.lexer.Lexer.parse_source_code": {"tf": 1}, "src.utils.is_prime": {"tf": 1}, "src.utils.primes_list": {"tf": 1}, "src.utils.get_certificate_symbol": {"tf": 1}}, "df": 5}}}}, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.runner.Charon": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree": {"tf": 1}, "src.ast_nodes.node.Node.generate_code": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1}, "src.certificators.backend.BackendCertificator": {"tf": 1}, "src.code_generator.CodeGenerator.generate_code": {"tf": 1}, "src.code_generator.CodeGenerator.get_program": {"tf": 1}, "src.lexer.Lexer.parse_source_code": {"tf": 1}, "src.runner.Charon": {"tf": 1.4142135623730951}, "src.utils.get_variable_size": {"tf": 1}, "src.virtual_machine.VirtualMachine": {"tf": 1}}, "df": 32, "[": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree": {"tf": 1}, "src.ast_nodes.basic.CST.CST": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.add_context": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.get_metadata": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.add_context": {"tf": 1}, "src.certificators.backend.BackendCertificator": {"tf": 1}, "src.code_generator.CodeGenerator.generate_code": {"tf": 1}, "src.code_generator.CodeGenerator.get_program": {"tf": 1}, "src.runner.Charon": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine": {"tf": 1}, "src.virtual_machine.VirtualMachine.get_memory": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 1}, "src.virtual_machine.VirtualMachine.ALLOC": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.CONSTANT": {"tf": 1}, "src.virtual_machine.VirtualMachine.DIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FDIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FMULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 1}, "src.virtual_machine.VirtualMachine.FSUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.JAL": {"tf": 1}, "src.virtual_machine.VirtualMachine.JR": {"tf": 1}, "src.virtual_machine.VirtualMachine.JZ": {"tf": 1}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1}, "src.virtual_machine.VirtualMachine.LSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOD": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOV": {"tf": 1}, "src.virtual_machine.VirtualMachine.MULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}, "src.virtual_machine.VirtualMachine.RSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SITOFP": {"tf": 1}, "src.virtual_machine.VirtualMachine.STORE": {"tf": 1}, "src.virtual_machine.VirtualMachine.SUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.TRUNC": {"tf": 1}}, "df": 51}}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"src.ast_nodes.node.Node.generate_code": {"tf": 1}, "src.ast_nodes.basic.CST.CST": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF": {"tf": 1}, "src.certificators.backend.BackendCertificator": {"tf": 1}, "src.code_generator.CodeGenerator.generate_code": {"tf": 1}, "src.lexer.Lexer.parse_source_code": {"tf": 1.4142135623730951}, "src.utils.get_variable_size": {"tf": 1}, "src.virtual_machine.VirtualMachine.get_memory": {"tf": 1.4142135623730951}}, "df": 15}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.node.Node.generate_code": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1}}, "df": 17}}}}}}}}}}, "f": {"docs": {}, "df": 0, "f": {"docs": {"src.ast_nodes.operations.DIFF": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.functions.PARAM.PARAM": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}}, "df": 6}}}}}}}, "v": {"docs": {"src.ast_nodes.operations.DIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.DIV": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.ast_nodes.operations.DIV.DIV": {"tf": 1.7320508075688772}, "src.virtual_machine.VirtualMachine.DIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.FDIV": {"tf": 1}}, "df": 3}}}}}}, "s": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.ast_nodes.operations.OR.OR": {"tf": 1}}, "df": 1}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"src.utils.type_cast": {"tf": 1}}, "df": 1, "l": {"docs": {}, "df": 0, "y": {"docs": {"src.utils.type_cast": {"tf": 1}, "src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1}}, "df": 2}}}}}}}, "e": {"docs": {}, "df": 0, "f": {"docs": {"src.ast_nodes.functions.FUNC_DEF": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.PARAM.PARAM": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_symbol": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1}}, "df": 15, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_attribute_types": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.is_active": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF": {"tf": 1}}, "df": 6, "s": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.parse_struct_definitions": {"tf": 1}, "src.code_generator.CodeGenerator.parse_struct_definitions": {"tf": 1}}, "df": 2}}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.is_active": {"tf": 1}, "src.code_generator.CodeGenerator": {"tf": 1.4142135623730951}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.print_tree": {"tf": 1}, "src.ast_nodes.node.Node": {"tf": 1.7320508075688772}, "src.ast_nodes.node.Node.print": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.print": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.print": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.print": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.print": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.print": {"tf": 1}, "src.ast_nodes.operations.operation.Operation": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.print": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 1}, "src.utils.flatten_list": {"tf": 1}, "src.virtual_machine.VirtualMachine": {"tf": 1}}, "df": 19, "s": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.print_tree": {"tf": 1}, "src.ast_nodes.node.Node": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.ast_nodes.node.Node.generate_code": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.node.Node.certificate": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.certificate": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1}}, "df": 13}}}}}, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}}, "df": 1}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_attribute_types": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR": {"tf": 1}}, "df": 2}}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {"src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1}}, "df": 1}}}}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"src.ast_nodes.node.Node.generate_code": {"tf": 1}}, "df": 1}}}, "o": {"docs": {"src.ast_nodes.conditionals.DO": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 1.7320508075688772}, "src.virtual_machine.VirtualMachine.get_memory": {"tf": 1}}, "df": 5, "e": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}}, "df": 21, "n": {"docs": {"src.ast_nodes.basic.SEQ.SEQ": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1}}, "df": 2}}}}, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}}, "df": 1}}}}}}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {"src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}}, "df": 14}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"src.utils.flatten_list": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"src.utils.flatten_list": {"tf": 1}}, "df": 1}}}}, "b": {"docs": {}, "df": 0, "y": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.print_tree": {"tf": 1}, "src.ast_nodes.node.Node": {"tf": 1}, "src.ast_nodes.node.Node.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.PARAM.PARAM": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.RET_SYM.RET_SYM": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1.4142135623730951}, "src.code_generator.CodeGenerator": {"tf": 1}, "src.code_generator.CodeGenerator.parse_struct_definitions": {"tf": 1}, "src.runner.Charon": {"tf": 1.7320508075688772}, "src.utils.get_variable_size": {"tf": 1}, "src.virtual_machine.VirtualMachine": {"tf": 1}}, "df": 33, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADD": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.ALLOC": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.BITAND": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.BITOR": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.CONSTANT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.DIV": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FADD": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FDIV": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FMULT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FSUB": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.HALT": {"tf": 1}, "src.virtual_machine.VirtualMachine.JAL": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.JR": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.JZ": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.LSHIFT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.MOD": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.MOV": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.MULT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.RSHIFT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.SITOFP": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.STORE": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.SUB": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.TRUNC": {"tf": 1.4142135623730951}}, "df": 41, "s": {"docs": {"src.certificators.backend.BackendCertificator": {"tf": 1}, "src.code_generator.CodeGenerator.generate_code": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {"src.utils.get_variable_size": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine": {"tf": 1}}, "df": 2}}}}, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.build": {"tf": 1}}, "df": 1}, "t": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.build": {"tf": 1}}, "df": 1}}}, "t": {"docs": {"src.ast_nodes.node.Node.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1}, "src.code_generator.CodeGenerator": {"tf": 1}}, "df": 5}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.node": {"tf": 1}, "src.certificators.abstract_certificator": {"tf": 1}, "src.certificators.abstract_certificator.AbstractCertificator": {"tf": 1}}, "df": 3}}, "c": {"docs": {}, "df": 0, "k": {"docs": {"src.certificators.abstract_certificator": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"src.certificators.backend.BackendCertificator": {"tf": 1}, "src.certificators.backend.BackendCertificator.certificate": {"tf": 1}, "src.runner.Charon": {"tf": 1.4142135623730951}, "src.runner.Charon.get_backend_certificator": {"tf": 1}}, "df": 4, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.runner.Charon": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"src.ast_nodes.node.Node": {"tf": 1}, "src.ast_nodes.operations.operation.Operation": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.is_active": {"tf": 1}, "src.utils.is_prime": {"tf": 1}, "src.utils.flatten_list": {"tf": 1}}, "df": 5, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}}, "df": 13}}}}}}, "e": {"docs": {"src.ast_nodes.node.Node.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.basic.PROG.PROG.add_child": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.SEQ.SEQ.add_child": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.conditional.Conditional": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.set_statements": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.ASSIGN.ASSIGN": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.NOT.NOT": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1}, "src.code_generator.CodeGenerator.generate_code": {"tf": 1}, "src.runner.Charon": {"tf": 1}, "src.utils.type_cast": {"tf": 1}, "src.utils.flatten_list": {"tf": 1.4142135623730951}}, "df": 33, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"src.ast_nodes.basic.PROG.PROG": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1}}, "df": 2}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.functions.RET_SYM.RET_SYM": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.add_context": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.add_context": {"tf": 1.4142135623730951}, "src.runner.Charon": {"tf": 1}, "src.virtual_machine.VirtualMachine.ALLOC": {"tf": 1}}, "df": 7}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {"src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_attribute_types": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.is_active": {"tf": 1}, "src.code_generator.CodeGenerator": {"tf": 1.4142135623730951}}, "df": 3}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"src.utils.previous_prime": {"tf": 1.4142135623730951}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"src.virtual_machine.VirtualMachine.ADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.DIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FDIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FMULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.FSUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOD": {"tf": 1}, "src.virtual_machine.VirtualMachine.MULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}, "src.virtual_machine.VirtualMachine.RSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SUB": {"tf": 1}}, "df": 25}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {"src.virtual_machine.VirtualMachine.BITAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.LSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.RSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1}, "src.virtual_machine.VirtualMachine.TRUNC": {"tf": 1}}, "df": 6, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"src.ast_nodes.operations.BITAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITAND": {"tf": 1}}, "df": 2}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.operations.BITAND.BITAND": {"tf": 1}, "src.ast_nodes.operations.BITOR.BITOR": {"tf": 1}}, "df": 2}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.ast_nodes.operations.BITOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITOR": {"tf": 1}}, "df": 2}}, "s": {"docs": {"src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1}, "src.virtual_machine.VirtualMachine.TRUNC": {"tf": 1}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "s": {"docs": {"src.lexer.Lexer.split_source": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree": {"tf": 1}, "src.ast_nodes.node.Node.print": {"tf": 1}, "src.ast_nodes.basic.CST": {"tf": 1}, "src.ast_nodes.basic.CST.CST": {"tf": 1}, "src.ast_nodes.basic.PROG": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.print": {"tf": 1}, "src.ast_nodes.basic.SEQ": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.print": {"tf": 1}, "src.ast_nodes.conditionals.DO": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.IF": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.IFELSE": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE": {"tf": 2}, "src.ast_nodes.conditionals.IFELSE.IFELSE.print": {"tf": 1}, "src.ast_nodes.conditionals.WHILE": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.conditional": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.conditional.Conditional.print": {"tf": 1}, "src.ast_nodes.functions.ARG": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.ARG.ARG.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.print": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.print": {"tf": 1}, "src.ast_nodes.functions.PARAM": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM": {"tf": 1}, "src.ast_nodes.functions.RET_SYM": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"tf": 1}, "src.ast_nodes.operations.ADD": {"tf": 1}, "src.ast_nodes.operations.ADD.ADD": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.AND": {"tf": 1}, "src.ast_nodes.operations.AND.AND": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.ASSIGN": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.BITAND": {"tf": 1}, "src.ast_nodes.operations.BITAND.BITAND": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.BITOR": {"tf": 1}, "src.ast_nodes.operations.BITOR.BITOR": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.DIFF": {"tf": 1}, "src.ast_nodes.operations.DIFF.DIFF": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.DIV": {"tf": 1}, "src.ast_nodes.operations.DIV.DIV": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.EQUAL": {"tf": 1}, "src.ast_nodes.operations.EQUAL.EQUAL": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.GREATER": {"tf": 1}, "src.ast_nodes.operations.GREATER.GREATER": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.LESS": {"tf": 1}, "src.ast_nodes.operations.LESS.LESS": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.LSHIFT": {"tf": 1}, "src.ast_nodes.operations.LSHIFT.LSHIFT": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.MOD": {"tf": 1}, "src.ast_nodes.operations.MOD.MOD": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.MULT": {"tf": 1}, "src.ast_nodes.operations.MULT.MULT": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.NOT": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.NOT.NOT.print": {"tf": 1}, "src.ast_nodes.operations.OR": {"tf": 1}, "src.ast_nodes.operations.OR.OR": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.RSHIFT": {"tf": 1}, "src.ast_nodes.operations.RSHIFT.RSHIFT": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.SUB": {"tf": 1}, "src.ast_nodes.operations.SUB.SUB": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.operation": {"tf": 1}, "src.ast_nodes.operations.operation.Operation": {"tf": 1.7320508075688772}, "src.ast_nodes.operations.operation.Operation.print": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.print": {"tf": 1}, "src.ast_nodes.variables.VAR": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.print": {"tf": 1}, "src.certificators.backend": {"tf": 1}, "src.certificators.backend.BackendCertificator": {"tf": 1.4142135623730951}, "src.certificators.frontend": {"tf": 1}, "src.certificators.frontend.FrontendCertificator": {"tf": 1}, "src.code_generator.CodeGenerator.generate_code": {"tf": 1}}, "df": 90}}}}}, "s": {"docs": {"src.runner.Charon": {"tf": 1}}, "df": 1}}}}}}}}, "t": {"docs": {"src.ast_nodes.functions.RET_SYM": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 1.7320508075688772}}, "df": 6, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"src.ast_nodes.node.Node.get_certificate_label": {"tf": 1}, "src.ast_nodes.node.Node.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1}}, "df": 21, "s": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.build": {"tf": 1}, "src.abstract_syntax_tree.AbstractSyntaxTree.get_root": {"tf": 1}, "src.ast_nodes.node.Node.get_value": {"tf": 1}, "src.ast_nodes.node.Node.get_type": {"tf": 1}, "src.ast_nodes.node.Node.get_certificate_label": {"tf": 1.4142135623730951}, "src.ast_nodes.node.Node.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.node.Node.certificate": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.certificate": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_function_name": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.get_certificate_label": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_symbol": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_attribute_types": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.is_active": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.get_metadata": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1}, "src.certificators.backend.BackendCertificator.certificate": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.certificate": {"tf": 1}, "src.code_generator.CodeGenerator.generate_code": {"tf": 1}, "src.code_generator.CodeGenerator.get_program": {"tf": 1}, "src.lexer.Lexer.parse_source_code": {"tf": 1}, "src.lexer.Lexer.split_source": {"tf": 1}, "src.runner.create_instance": {"tf": 1}, "src.utils.is_prime": {"tf": 1}, "src.utils.next_prime": {"tf": 1}, "src.utils.previous_prime": {"tf": 1}, "src.utils.primes_list": {"tf": 1}, "src.utils.type_cast": {"tf": 1}, "src.utils.get_variable_size": {"tf": 1}, "src.utils.flatten_list": {"tf": 1}, "src.utils.get_certificate_symbol": {"tf": 1}, "src.virtual_machine.VirtualMachine.get_memory": {"tf": 1.4142135623730951}}, "df": 69}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"src.ast_nodes.node.Node.get_certificate_label": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.ast_nodes.functions.RET_SYM.RET_SYM.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.print": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_attribute_types": {"tf": 1}, "src.utils.type_cast": {"tf": 1}}, "df": 7}}}}}}, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.print_tree": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.get_certificate_label": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.certificate": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.WHILE.WHILE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.get_certificate_label": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.get_certificate_label": {"tf": 1}}, "df": 17}}}}}}}}, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.ast_nodes.functions.PARAM.PARAM": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1}}, "df": 3}}}}}}, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.ast_nodes.node.Node": {"tf": 1.7320508075688772}, "src.ast_nodes.node.Node.generate_code": {"tf": 2.6457513110645907}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 2.449489742783178}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 2}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 2}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 2}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 2}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 2.23606797749979}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 2}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 2}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 2}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 2}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 2.6457513110645907}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 2}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 2}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 2.23606797749979}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 2.23606797749979}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 2.23606797749979}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 2}, "src.utils.type_cast": {"tf": 2}, "src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.CONSTANT": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.JR": {"tf": 1}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOV": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}, "src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1}}, "df": 39, "s": {"docs": {"src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1}, "src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1}}, "df": 2}}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.node.Node.generate_code": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.ast_nodes.node.Node.generate_code": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1}, "src.lexer.Lexer.split_source": {"tf": 1}}, "df": 19}}, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.node.Node.certificate": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.certificate": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.certificate": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.certificate": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1}, "src.certificators.backend.BackendCertificator.certificate": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.certificate": {"tf": 1}}, "df": 15}}}}}}, "w": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.node.Node.generate_code": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"src.ast_nodes.conditionals.WHILE.WHILE": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}}, "df": 1}}}}}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"src.ast_nodes.functions.PARAM.PARAM": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.add_context": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.add_context": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1}}, "df": 1}}}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.lexer.Lexer.split_source": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}}, "df": 4}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}}, "df": 1}}}}}}, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.lexer.Lexer.parse_source_code": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"src.utils.next_prime": {"tf": 1}, "src.utils.previous_prime": {"tf": 1}}, "df": 2}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.utils.flatten_list": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.build": {"tf": 1.4142135623730951}, "src.abstract_syntax_tree.AbstractSyntaxTree.print_tree": {"tf": 1.4142135623730951}, "src.abstract_syntax_tree.AbstractSyntaxTree.get_root": {"tf": 1.7320508075688772}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.set_statements": {"tf": 1}, "src.code_generator.CodeGenerator": {"tf": 1.4142135623730951}, "src.code_generator.CodeGenerator.generate_code": {"tf": 1}}, "df": 6}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.ast_nodes.node.Node.get_certificate_label": {"tf": 1}, "src.ast_nodes.node.Node.generate_code": {"tf": 1}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.basic.CST.CST": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.ALLOC": {"tf": 1}}, "df": 4}, "d": {"docs": {"src.ast_nodes.basic.CST.CST": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1}, "src.virtual_machine.VirtualMachine.ALLOC": {"tf": 1}}, "df": 4}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {"src.ast_nodes.node.Node.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.WHILE.WHILE": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional": {"tf": 1}, "src.virtual_machine.VirtualMachine.run": {"tf": 1}}, "df": 8, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.runner": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"src.runner.create_instance": {"tf": 1}}, "df": 1}}}, "h": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.operations.ADD.ADD": {"tf": 1}, "src.ast_nodes.operations.AND.AND": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN": {"tf": 1}, "src.ast_nodes.operations.BITAND.BITAND": {"tf": 1}, "src.ast_nodes.operations.BITOR.BITOR": {"tf": 1}, "src.ast_nodes.operations.DIFF.DIFF": {"tf": 1}, "src.ast_nodes.operations.DIV.DIV": {"tf": 1}, "src.ast_nodes.operations.EQUAL.EQUAL": {"tf": 1}, "src.ast_nodes.operations.GREATER.GREATER": {"tf": 1}, "src.ast_nodes.operations.LESS.LESS": {"tf": 1}, "src.ast_nodes.operations.LSHIFT.LSHIFT": {"tf": 1}, "src.ast_nodes.operations.MOD.MOD": {"tf": 1}, "src.ast_nodes.operations.MULT.MULT": {"tf": 1}, "src.ast_nodes.operations.OR.OR": {"tf": 1}, "src.ast_nodes.operations.RSHIFT.RSHIFT": {"tf": 1}, "src.ast_nodes.operations.SUB.SUB": {"tf": 1}, "src.ast_nodes.operations.operation.Operation": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.certificate": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}}, "df": 22}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.operations.ADD.ADD": {"tf": 1}, "src.ast_nodes.operations.AND.AND": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}, "src.ast_nodes.operations.BITAND.BITAND": {"tf": 1}, "src.ast_nodes.operations.BITOR.BITOR": {"tf": 1}, "src.ast_nodes.operations.DIFF.DIFF": {"tf": 1}, "src.ast_nodes.operations.DIV.DIV": {"tf": 1}, "src.ast_nodes.operations.EQUAL.EQUAL": {"tf": 1}, "src.ast_nodes.operations.GREATER.GREATER": {"tf": 1}, "src.ast_nodes.operations.LESS.LESS": {"tf": 1}, "src.ast_nodes.operations.LSHIFT.LSHIFT": {"tf": 1}, "src.ast_nodes.operations.MOD.MOD": {"tf": 1}, "src.ast_nodes.operations.MULT.MULT": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1}, "src.ast_nodes.operations.OR.OR": {"tf": 1}, "src.ast_nodes.operations.RSHIFT.RSHIFT": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.SUB.SUB": {"tf": 1}, "src.ast_nodes.operations.operation.Operation": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1}, "src.virtual_machine.VirtualMachine.RSHIFT": {"tf": 1}}, "df": 20}}}}, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.operations.RSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.RSHIFT": {"tf": 1}}, "df": 2}}}}}}, "e": {"docs": {"src.ast_nodes.node": {"tf": 1}, "src.ast_nodes.node.Node": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.set_statements": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.certificators.abstract_certificator": {"tf": 1}, "src.runner.Charon": {"tf": 1}, "src.virtual_machine.VirtualMachine.get_memory": {"tf": 1}}, "df": 14, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"src.abstract_syntax_tree.AbstractSyntaxTree.print_tree": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.certificate": {"tf": 1}, "src.certificators.backend.BackendCertificator.certificate": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.certificate": {"tf": 1}, "src.code_generator.CodeGenerator.parse_functions": {"tf": 1}, "src.lexer.Lexer.parse_source_code": {"tf": 1.4142135623730951}}, "df": 8}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.ast_nodes.functions.PARAM.PARAM": {"tf": 1}}, "df": 1}}}}}, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes": {"tf": 1}, "src.certificators": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.ast_nodes.node.Node": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF": {"tf": 1}, "src.utils.get_variable_size": {"tf": 1}}, "df": 8}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.ast_nodes.conditionals.DO.DO": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.DO.DO.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.DO.DO.certificate": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE": {"tf": 2}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE.certificate": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.WHILE.WHILE.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.conditional.Conditional": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.conditional.Conditional.get_certificate_label": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional.certificate": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.get_certificate_label": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}}, "df": 27}}}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.functions.ARG.ARG": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.runner.Charon": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.virtual_machine.VirtualMachine.HALT": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1}}, "df": 1, "s": {"docs": {"src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "c": {"docs": {"src.ast_nodes.node": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"src.lexer.Lexer.parse_source_code": {"tf": 1}, "src.virtual_machine.VirtualMachine.HALT": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {"src.virtual_machine.VirtualMachine.ALLOC": {"tf": 1}}, "df": 1}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.ast_nodes.conditionals.DO.DO": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional": {"tf": 1}, "src.virtual_machine.VirtualMachine.JZ": {"tf": 1}}, "df": 6}, "s": {"docs": {"src.ast_nodes.conditionals.DO.DO": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.conditional.Conditional": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}}, "df": 18}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}}, "df": 4}}}}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.operations.ASSIGN.ASSIGN": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 2}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.print": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 2}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.add_context": {"tf": 1}, "src.lexer.Lexer.parse_source_code": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 1}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1.4142135623730951}}, "df": 10, "s": {"docs": {"src.virtual_machine.VirtualMachine.get_memory": {"tf": 1}}, "df": 1}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1}}, "df": 1}}}}}}}, "q": {"docs": {"src.virtual_machine.VirtualMachine.EQ": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.ast_nodes.operations.DIFF.DIFF": {"tf": 1}, "src.ast_nodes.operations.EQUAL": {"tf": 1}, "src.ast_nodes.operations.EQUAL.EQUAL": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}}, "df": 7}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.lexer.Lexer.parse_source_code": {"tf": 1}}, "df": 1}}}}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"src.ast_nodes.node.Node": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.node.Node": {"tf": 1}, "src.ast_nodes.node.Node.get_certificate_label": {"tf": 1}, "src.ast_nodes.node.Node.generate_code": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.get_certificate_label": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.certificate": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.get_attribute_types": {"tf": 1}, "src.code_generator.CodeGenerator": {"tf": 1.4142135623730951}}, "df": 12}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"src.ast_nodes.operations.ADD.ADD": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.AND.AND": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}, "src.ast_nodes.operations.BITAND.BITAND": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.BITOR.BITOR": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.DIFF.DIFF": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.DIV.DIV": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.EQUAL.EQUAL": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.GREATER.GREATER": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.LESS.LESS": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.LSHIFT.LSHIFT": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.MOD.MOD": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.MULT.MULT": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1}, "src.ast_nodes.operations.OR.OR": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.RSHIFT.RSHIFT": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.SUB.SUB": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.operation.Operation": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1}, "src.lexer.Lexer.parse_source_code": {"tf": 1}}, "df": 20, "l": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.node.Node.generate_code": {"tf": 1}, "src.lexer.Lexer.split_source": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 1}, "src.virtual_machine.VirtualMachine.ALLOC": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.CONSTANT": {"tf": 1}, "src.virtual_machine.VirtualMachine.DIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FDIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FMULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 1}, "src.virtual_machine.VirtualMachine.FSUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.HALT": {"tf": 1}, "src.virtual_machine.VirtualMachine.JAL": {"tf": 1}, "src.virtual_machine.VirtualMachine.JR": {"tf": 1}, "src.virtual_machine.VirtualMachine.JZ": {"tf": 1}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.LSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOD": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOV": {"tf": 1}, "src.virtual_machine.VirtualMachine.MULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}, "src.virtual_machine.VirtualMachine.RSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SITOFP": {"tf": 1}, "src.virtual_machine.VirtualMachine.STORE": {"tf": 1}, "src.virtual_machine.VirtualMachine.SUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.TRUNC": {"tf": 1}}, "df": 42, "s": {"docs": {"src.virtual_machine.VirtualMachine.ADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.DIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FDIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FMULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.FSUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.HALT": {"tf": 1}, "src.virtual_machine.VirtualMachine.JAL": {"tf": 1}, "src.virtual_machine.VirtualMachine.JZ": {"tf": 1}, "src.virtual_machine.VirtualMachine.LSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOD": {"tf": 1}, "src.virtual_machine.VirtualMachine.MULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}, "src.virtual_machine.VirtualMachine.RSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SUB": {"tf": 1}}, "df": 29}}}}}, "l": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.HALT": {"tf": 1}}, "df": 2}}, "s": {"docs": {"src.ast_nodes.basic.SEQ.SEQ": {"tf": 1}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.PARAM.PARAM": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.certificate": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.is_active": {"tf": 1}}, "df": 6}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"src.utils.type_cast": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "p": {"docs": {"src.ast_nodes.basic.SEQ.SEQ": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {"src.lexer.Lexer.__init__": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.node.Node": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.add_context": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.add_context": {"tf": 1}, "src.virtual_machine.VirtualMachine": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.DIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOD": {"tf": 1}, "src.virtual_machine.VirtualMachine.MULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}, "src.virtual_machine.VirtualMachine.RSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SITOFP": {"tf": 1}, "src.virtual_machine.VirtualMachine.SUB": {"tf": 1}}, "df": 22, "s": {"docs": {"src.ast_nodes.node.Node": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1}}, "df": 2}, "d": {"docs": {"src.ast_nodes.node.Node.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.certificate": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.add_context": {"tf": 1}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1}, "src.code_generator.CodeGenerator.parse_struct_definitions": {"tf": 1}}, "df": 22}}, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"src.ast_nodes.node.Node.generate_code": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"src.ast_nodes.node.Node.generate_code": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.node.Node.get_value": {"tf": 1}, "src.virtual_machine.VirtualMachine.get_memory": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 1}, "src.virtual_machine.VirtualMachine.ALLOC": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.CONSTANT": {"tf": 1}, "src.virtual_machine.VirtualMachine.DIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FDIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FMULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 1}, "src.virtual_machine.VirtualMachine.FSUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.JAL": {"tf": 1}, "src.virtual_machine.VirtualMachine.JR": {"tf": 1}, "src.virtual_machine.VirtualMachine.JZ": {"tf": 1}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1}, "src.virtual_machine.VirtualMachine.LSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOD": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOV": {"tf": 1}, "src.virtual_machine.VirtualMachine.MULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}, "src.virtual_machine.VirtualMachine.RSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SITOFP": {"tf": 1}, "src.virtual_machine.VirtualMachine.STORE": {"tf": 1}, "src.virtual_machine.VirtualMachine.SUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.TRUNC": {"tf": 1}}, "df": 41}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"src.ast_nodes.node.Node.get_type": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.functions.ARG.ARG": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"src.virtual_machine.VirtualMachine": {"tf": 1}}, "df": 1}}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.variables.VAR.VAR": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}}, "df": 2}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "o": {"docs": {"src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"src.utils": {"tf": 1}}, "df": 1}}}}}}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"src.ast_nodes.node.Node.get_certificate_label": {"tf": 1}, "src.ast_nodes.node.Node.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.get_certificate_label": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.add_context": {"tf": 1}, "src.certificators.backend.BackendCertificator.certificate": {"tf": 1}, "src.certificators.frontend.FrontendCertificator.certificate": {"tf": 1}, "src.lexer.Lexer.split_source": {"tf": 1}, "src.virtual_machine.VirtualMachine": {"tf": 1}, "src.virtual_machine.VirtualMachine.get_memory": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADD": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 1}, "src.virtual_machine.VirtualMachine.ALLOC": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1.7320508075688772}, "src.virtual_machine.VirtualMachine.BITAND": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.BITOR": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.CONSTANT": {"tf": 1}, "src.virtual_machine.VirtualMachine.DIV": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1.7320508075688772}, "src.virtual_machine.VirtualMachine.FADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FDIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FMULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 1}, "src.virtual_machine.VirtualMachine.FSUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1.7320508075688772}, "src.virtual_machine.VirtualMachine.HALT": {"tf": 1}, "src.virtual_machine.VirtualMachine.JAL": {"tf": 1}, "src.virtual_machine.VirtualMachine.JR": {"tf": 1}, "src.virtual_machine.VirtualMachine.JZ": {"tf": 1}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1}, "src.virtual_machine.VirtualMachine.LSHIFT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1.7320508075688772}, "src.virtual_machine.VirtualMachine.MOD": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.MOV": {"tf": 1}, "src.virtual_machine.VirtualMachine.MULT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1.7320508075688772}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1.7320508075688772}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1.7320508075688772}, "src.virtual_machine.VirtualMachine.RSHIFT": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SITOFP": {"tf": 1}, "src.virtual_machine.VirtualMachine.STORE": {"tf": 1}, "src.virtual_machine.VirtualMachine.SUB": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.TRUNC": {"tf": 1}}, "df": 50}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"src.ast_nodes.node.Node.generate_code": {"tf": 2}, "src.ast_nodes.basic.CST.CST": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.basic.SEQ.SEQ.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1}, "src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_CALL.FUNC_CALL.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.PARAM.PARAM": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.RET_SYM.RET_SYM": {"tf": 1.4142135623730951}, "src.ast_nodes.functions.RET_SYM.RET_SYM.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.ASSIGN.ASSIGN.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.NOT.NOT.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.operations.operation.Operation.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.ELEMENT_ACCESS.ELEMENT_ACCESS.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR": {"tf": 1}, "src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.variables.VAR.VAR.get_metadata": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF": {"tf": 1.4142135623730951}, "src.ast_nodes.variables.VAR_DEF.VAR_DEF.generate_code": {"tf": 1.4142135623730951}, "src.certificators.backend.BackendCertificator": {"tf": 1}, "src.code_generator.CodeGenerator.generate_code": {"tf": 1}, "src.lexer.Lexer.parse_source_code": {"tf": 1}, "src.runner.Charon": {"tf": 1}, "src.utils.type_cast": {"tf": 1}, "src.utils.get_variable_size": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.ADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.ADDRESS": {"tf": 1}, "src.virtual_machine.VirtualMachine.ALLOC": {"tf": 1}, "src.virtual_machine.VirtualMachine.AND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.BITOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.CONSTANT": {"tf": 1}, "src.virtual_machine.VirtualMachine.DIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.EQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FADD": {"tf": 1}, "src.virtual_machine.VirtualMachine.FAND": {"tf": 1}, "src.virtual_machine.VirtualMachine.FDIV": {"tf": 1}, "src.virtual_machine.VirtualMachine.FEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FGT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FLT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FMULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.FNEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.FOR": {"tf": 1}, "src.virtual_machine.VirtualMachine.FPTOSI": {"tf": 1}, "src.virtual_machine.VirtualMachine.FSUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.GT": {"tf": 1}, "src.virtual_machine.VirtualMachine.JAL": {"tf": 1}, "src.virtual_machine.VirtualMachine.JR": {"tf": 1}, "src.virtual_machine.VirtualMachine.JZ": {"tf": 1}, "src.virtual_machine.VirtualMachine.LOAD": {"tf": 1}, "src.virtual_machine.VirtualMachine.LSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.LT": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOD": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOV": {"tf": 1}, "src.virtual_machine.VirtualMachine.MULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.NEQ": {"tf": 1}, "src.virtual_machine.VirtualMachine.NOT": {"tf": 1}, "src.virtual_machine.VirtualMachine.OR": {"tf": 1}, "src.virtual_machine.VirtualMachine.RSHIFT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1}, "src.virtual_machine.VirtualMachine.SITOFP": {"tf": 1}, "src.virtual_machine.VirtualMachine.STORE": {"tf": 1}, "src.virtual_machine.VirtualMachine.SUB": {"tf": 1}, "src.virtual_machine.VirtualMachine.TRUNC": {"tf": 1}}, "df": 73}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"src.ast_nodes.functions.PARAM.PARAM": {"tf": 1}, "src.ast_nodes.functions.PARAM.PARAM.generate_code": {"tf": 1}, "src.virtual_machine.VirtualMachine": {"tf": 1.4142135623730951}, "src.virtual_machine.VirtualMachine.get_memory": {"tf": 2}, "src.virtual_machine.VirtualMachine.ALLOC": {"tf": 1.7320508075688772}, "src.virtual_machine.VirtualMachine.SIGNEXT": {"tf": 1}, "src.virtual_machine.VirtualMachine.STORE": {"tf": 1}}, "df": 7, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.virtual_machine.VirtualMachine.ALLOC": {"tf": 1}}, "df": 1}}}}}}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.operations.MULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.MULT": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.node.Node.get_certificate_label": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.ast_nodes.operations.MULT.MULT": {"tf": 1.7320508075688772}, "src.virtual_machine.VirtualMachine.FMULT": {"tf": 1}, "src.virtual_machine.VirtualMachine.MULT": {"tf": 1}}, "df": 3}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.node.Node.generate_code": {"tf": 1}, "src.ast_nodes.functions.FUNC_DEF.FUNC_DEF.set_statements": {"tf": 1}, "src.utils.type_cast": {"tf": 1}}, "df": 3}}, "c": {"docs": {}, "df": 0, "h": {"docs": {"src.ast_nodes.functions.PARAM.PARAM": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "y": {"docs": {"src.ast_nodes.node.Node.generate_code": {"tf": 1}, "src.ast_nodes.basic.PROG.PROG.generate_code": {"tf": 1}}, "df": 2}, "k": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.functions.PARAM.PARAM": {"tf": 1}}, "df": 1}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.variables.VAR.VAR.generate_code": {"tf": 1}, "src.certificators.backend.BackendCertificator.certificate": {"tf": 1}, "src.code_generator": {"tf": 1}, "src.code_generator.CodeGenerator": {"tf": 1}, "src.runner.Charon": {"tf": 1.4142135623730951}, "src.runner.create_instance": {"tf": 1}, "src.virtual_machine": {"tf": 1}, "src.virtual_machine.VirtualMachine": {"tf": 1}, "src.virtual_machine.VirtualMachine.run": {"tf": 1}}, "df": 9}}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.node.Node.generate_code": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "v": {"docs": {"src.ast_nodes.functions.ARG.ARG.generate_code": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOV": {"tf": 1}}, "df": 2}, "d": {"docs": {"src.ast_nodes.operations.MOD": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOD": {"tf": 1}}, "df": 2, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"src.ast_nodes.operations.MOD.MOD": {"tf": 1}, "src.virtual_machine.VirtualMachine.MOD": {"tf": 1}}, "df": 2}}}}}}, "j": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {"src.ast_nodes.conditionals.DO.DO.generate_code": {"tf": 1}, "src.ast_nodes.conditionals.IF.IF.generate_code": {"tf": 1.4142135623730951}, "src.ast_nodes.conditionals.IFELSE.IFELSE.generate_code": {"tf": 1.7320508075688772}, "src.ast_nodes.conditionals.WHILE.WHILE.generate_code": {"tf": 1.7320508075688772}, "src.virtual_machine.VirtualMachine.JAL": {"tf": 1}, "src.virtual_machine.VirtualMachine.JZ": {"tf": 1}}, "df": 6, "s": {"docs": {"src.virtual_machine.VirtualMachine.JR": {"tf": 1}, "src.virtual_machine.VirtualMachine.JZ": {"tf": 1}}, "df": 2}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"src.ast_nodes.functions.PARAM.PARAM": {"tf": 1}, "src.ast_nodes.variables.STRUCT_DEF.STRUCT_DEF.generate_code": {"tf": 1}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.virtual_machine.VirtualMachine.JAL": {"tf": 1}}, "df": 1}}, "r": {"docs": {"src.virtual_machine.VirtualMachine.JR": {"tf": 1}}, "df": 1}, "z": {"docs": {"src.virtual_machine.VirtualMachine.JZ": {"tf": 1}}, "df": 1}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {"src.code_generator.CodeGenerator.parse_struct_definitions": {"tf": 1}}, "df": 1, "s": {"docs": {"src.code_generator.CodeGenerator": {"tf": 1}}, "df": 1}}}, "y": {"docs": {"src.lexer.Lexer.parse_source_code": {"tf": 2}}, "df": 1}}}, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {"src.virtual_machine.VirtualMachine.JZ": {"tf": 1}}, "df": 1}}}}}}}, "pipeline": ["trimmer"], "_isPrebuiltIndex": true};

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();