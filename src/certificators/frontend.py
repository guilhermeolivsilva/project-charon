"""Certificator for the frontend representation of [C]haron programs."""

import re

from typing_extensions import override

from src.abstract_syntax_tree import AbstractSyntaxTree
from src.certificators.abstract_certificator import AbstractCertificator
from src.utils import primes_list


class FrontendCertificator(AbstractCertificator):
    """
    Certificate the frontend representation of some program.

    Parameters
    ----------
    ast : AbstractSyntaxTree
        The AST of the program to certificate.
    """

    def __init__(self, ast: AbstractSyntaxTree) -> None:
        super().__init__()

        self.ast: AbstractSyntaxTree = ast

    @override
    def certificate(self, **kwargs) -> str:
        """
        Certificate the frontend code.

        This method traverses the AST and annotate each node with its relative
        position and contents.

        Returns
        -------
        computed_certificate : str
            The the computed certificate.
        """

        _computed_certificate = self._certificate_ast()
        computed_certificate = "*".join(_computed_certificate)
        computed_certificate = "*".join(
            sorted(
                computed_certificate.split("*"),
                key=lambda x: int(x.split("^")[0])
            )
        )
        self.computed_certificate = self._add_types_certificates(
            certificate=computed_certificate
        )

        # return self.computed_certificate
        return self.computed_certificate

    def _certificate_ast(self) -> list[str]:
        """
        Certificate the Abstract Syntax Tree.

        Notice that the certificate generated by this method is incomplete: it
        lacks symbols for the types.

        Returns
        -------
        ast_certificate : list[str]
            The list of labels of the AST certificate.
        """

        _, self.environment = self.ast.root.certificate(
            positional_prime=self.initial_prime,
            certificator_env=self.environment
        )
        ast_certificate = self.ast.root.get_certificate_label()

        return ast_certificate
    
    def _add_types_certificates(self, certificate: str) -> str:
        """
        Add types certificates to the certificate.

        This method will replace all the `PLACEHOLDERS` with the known types
        certificates.

        Parameters
        ----------
        certificate : str
            The certificate to replace placeholders with the types certificates.

        Returns
        -------
        certificate : str
            The certificate with types certificates.
        """

        for var_prime, type_symbols in self.environment.items():
            placeholder = f"TYPE_PLACEHOLDER_VAR_PRIME_{var_prime}"
            type_certificate = "*".join(
                f"({position_prime}^{type_symbol})"
                for position_prime, type_symbol in zip(
                    primes_list(len(type_symbols)),       
                    type_symbols
                )
            )

            certificate = certificate.replace(placeholder, type_certificate)

        return certificate
