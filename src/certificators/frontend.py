"""Certificator for the frontend representation of [C]haron programs."""

import re

from typing_extensions import override

from src.abstract_syntax_tree import AbstractSyntaxTree
from src.certificators.abstract_certificator import AbstractCertificator
from src.utils import (
    primes_list,
    next_prime,
    get_certificate_symbol,
    TYPE_SYMBOLS_MAP
)


class FrontendCertificator(AbstractCertificator):
    """
    Certificate the frontend representation of some program.

    Parameters
    ----------
    ast : AbstractSyntaxTree
        The AST of the program to certificate.
    """

    def __init__(self, ast: AbstractSyntaxTree) -> None:
        super().__init__()

        self.ast: AbstractSyntaxTree = ast

    @override
    def certificate(self, **kwargs) -> str:
        """
        Certificate the frontend code.

        This method traverses the AST and annotate each node with its relative
        position and contents.

        Returns
        -------
        computed_certificate : str
            The the computed certificate.
        """

        computed_exponents = self._certificate_ast()
        computed_exponents = self._handle_variables_primes(computed_exponents)
        computed_exponents = self._add_var_def_symbols(computed_exponents)

        self.computed_certificate = [
            f"{positional_prime}^({exponent})"
            for positional_prime, exponent in zip(
                primes_list(len(computed_exponents)),
                computed_exponents
            )
        ]

        self.computed_certificate = "*".join(self.computed_certificate)

        return self.computed_certificate

    def _certificate_ast(self) -> list[str]:
        """
        Certificate the Abstract Syntax Tree.

        Notice that the certificate generated by this method is incomplete: it
        lacks symbols for the types.

        Returns
        -------
        ast_certificate : list[str]
            The list of labels of the AST certificate.
        """

        self.environment = self.ast.root.certificate(
            certificator_env=self.environment
        )
        ast_certificate = self.ast.root.get_certificate_label()

        return ast_certificate
    
    def _handle_variables_primes(self, computed_exponents: list[str]) -> list[str]:
        """
        Handle variables primes by emitting it only for active variables.
        
        This method also replaces all the placeholders in `computed_exponents`
        with emitted primes.

        Parameters
        ----------
        computed_exponents : list[str]
            The list of labels of the AST certificate.

        Returns
        -------
        computed_exponents : list[str]
            The list of labels of the AST certificate, after replacing
            placeholders.
        """

        # Emit primes for "alive" variables
        for var_id, entry in self.environment.items():
            if entry["active"]:
                self.environment[var_id]["prime"] = self.current_prime
                self.current_prime = next_prime(self.current_prime)

        # Replace placeholders
        pattern = r"VAR_(\d+)_PRIME_PLACEHOLDER"

        for idx, element in enumerate(computed_exponents):
            matches = re.finditer(pattern, element)

            for match in matches:
                string_with_placeholder = match.group(0)
                var_id = int(match.group(1))
                var_prime = self.environment[var_id]["prime"]
                computed_exponents[idx] = computed_exponents[idx].replace(
                    string_with_placeholder,
                    f"{var_prime}"
                )

        return computed_exponents
    
    def _add_var_def_symbols(self, computed_exponents: list[str]) -> list[str]:
        """
        Add `VAR_DEF` symbols to the beginning of `computed_exponents`.

        Only variables that are `active` in the certificator environment will
        be considered.

        Parameters
        ----------
        computed_exponents : list[str]
            The list of labels of the AST certificate.

        Returns
        -------
        computed_exponents : list[str]
            The list of labels of the AST certificate, added with `VAR_DEF`
            labels.
        """

        var_def_exponents = []
        var_def_base_symbol = get_certificate_symbol("VAR_DEF")

        for var_data in self.environment.values():
            if any([not var_data["active"], var_data.get("parameter", False)]):
                continue

            type_symbols = "^".join([
                f'({TYPE_SYMBOLS_MAP[_type]["type_symbol"]})'
                for _type in var_data["type"]
            ])

            var_def_exponents.append(f"({var_def_base_symbol})^{type_symbols}")

        return [*var_def_exponents, *computed_exponents]

    def _add_types_certificates(self, certificate: str) -> str:
        """
        Add types certificates to the certificate.

        This method will replace all the `PLACEHOLDERS` with the known types
        certificates.

        Parameters
        ----------
        certificate : str
            The certificate to replace placeholders with the types certificates.

        Returns
        -------
        certificate : str
            The certificate with types certificates.
        """

        for var_prime, type_symbols in self.environment.items():
            placeholder = f"TYPE_PLACEHOLDER_VAR_PRIME_{var_prime}"
            type_certificate = "*".join(
                f"({position_prime}^{type_symbol})"
                for position_prime, type_symbol in zip(
                    primes_list(len(type_symbols)),       
                    type_symbols
                )
            )

            certificate = certificate.replace(placeholder, type_certificate)

        return certificate
