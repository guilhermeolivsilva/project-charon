"""Certificator for the frontend representation of [C]haron programs."""

import re

from typing_extensions import override

from src.abstract_syntax_tree import AbstractSyntaxTree
from src.ast_nodes.variables.STRUCT_DEF import STRUCT_DEF
from src.certificators.abstract_certificator import AbstractCertificator
from src.utils import next_prime, TYPE_SYMBOLS_MAP


class FrontendCertificator(AbstractCertificator):
    """
    Certificate the frontend representation of some program.

    Parameters
    ----------
    ast : AbstractSyntaxTree
        The AST of the program to certificate.
    """

    def __init__(self, ast: AbstractSyntaxTree) -> None:
        super().__init__()

        self.ast: AbstractSyntaxTree = ast

    @override
    def certificate(self, **kwargs) -> str:
        """
        Certificate the frontend code.

        This method traverses the AST and annotate each node with its relative
        position and contents.

        Returns
        -------
        computed_certificate : str
            The the computed certificate.
        """

        _computed_certificate = self._certificate_ast()
        self.computed_certificate = "*".join(_computed_certificate)
        self.computed_certificate = "*".join(
            sorted(
                self.computed_certificate.split("*"),
                key=lambda x: int(x.split("^")[0])
            )
        )

        return self.computed_certificate

    def _certificate_ast(self) -> list[str]:
        """
        Certificate the Abstract Syntax Tree.

        Notice that the certificate generated by this method is incomplete: it
        lacks symbols for the types.

        Returns
        -------
        ast_certificate : list[str]
            The list of labels of the AST certificate.
        """

        _, self.environment = self.ast.root.certificate(
            positional_prime=self.initial_prime,
            certificator_env=self.environment
        )
        ast_certificate = self.ast.root.get_certificate_label()

        return ast_certificate
