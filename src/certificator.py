"""
Annotate statements and instructions with unique IDs.

Statements and instructions that implement the same semantics must have the
same ID. However, no pair of statements must have the same ID -- and the same
goes for instructions.
"""

from src.lexer import Lexer


def generate_primes(number_of_primes: int) -> list[int]:
    """
    Generate a list with the first `number_of_primes`-th prime numbers.

    This function uses D. Eppstein's implementation of the Sieve of
    Eratosthenes to achieve its goal.

    Parameters
    ----------
    number_of_primes : int
        The amount of prime numbers to generate.

    Returns
    -------
    primes : list[int]
        List with the first `number_of_primes` prime numbers.
    """

    primes = []

    cache = {}
    current_integer = 2

    while len(primes) <= number_of_primes:
        if current_integer not in cache:
            primes.append(current_integer)
            cache[current_integer * current_integer] = [current_integer]
        else:
            for cached_element in cache[current_integer]:
                cache.setdefault(cached_element + current_integer, []).append(
                    cached_element
                )
            del cache[current_integer]

        current_integer += 1

    return primes


class Certificator:
    """
    Certificator that attests whether a frontend source code is correctly
    implemented by its corresponding backend code.

    This Certificator generates unique IDs for each instruction using GÃ¶del's
    numbering system for both the frontend and backend codes. If the generated
    representations match, then the backend correctly implements the frontend.

    Parameters
    ----------
    frontend_code : list[tuple]
        A list of tuples of the parsed frontend source code generated by the
        Tiny-C Lexer.
    backend_code : list[tuple]
        A list of tuples of the backend source code generated by the Tiny-C
        Code Generator.
    """

    def __init__(self, frontend_code: list[tuple], backend_code: list[tuple]) -> None:
        self.frontend_code = frontend_code
        self.backend_code = backend_code
