"""Representation of NOT nodes for the Abstract Syntax Tree."""

from typing import Union

from typing_extensions import override

from src.ast_nodes.node import Node


class NOT(Node):
    """
    Implement the representation of a negation (logical not) for the AST.

    Parameters
    ----------
    expression : Node
        The Node representation of the term to be negated.
    """

    @override
    def __init__(self, expression: Node, **kwargs) -> None:
        super().__init__()

        self.expression: Node = expression
        self.instruction: str = "NOT"
        self.type: str = "int"

    @override
    def print(self, indent: int = 0) -> None:
        """
        Print the string representation of this `NOT` node.

        The node itself is aligned with `indent`, and its children are padded
        with an additional left space.

        Parameters
        ----------
        indent : int (optional, default = 0)
            The number of left padding spaces to indent.
        """

        super().print(indent)

        self.expression.print(indent + 1)

    @override
    def generate_code(
        self, register: int, environment: dict[str, dict[int, str]]
    ) -> tuple[
        list[dict[str, Union[int, str, float]]],
        int,
        dict[int, str]
    ]:
        """
        Generate the code associated with this `Operation`.

        For this node specialization, generate code from the left and right
        hand sides nodes first, and then from the node itself.

        Parameters
        ----------
        register : int
            The number of the register to be used by the code generated by this
            Node.
        environment : dict[int, str]
            The compiler's environment, that maps variables IDs to memory
            addresses and function IDs to instructions indices.

        Returns
        -------
        code : list of dict
            Return a list of dictionaries containing code metadata: the register
            to be used, the related `instruction` and its metadata.
        register : int
            The number of the next register available.
        environment : dict[int, str]
            The updated {var_id: address} environment mapping.
        """

        code: list[dict[str, Union[int, str, None]]] = []

        (
            expression_code,
            register,
            environment
        ) = self.expression.generate_code(
            register=register,
            environment=environment
        )
        code.extend(expression_code)

        expression_register = register - 1

        this_code = {
            "instruction": self.instruction,
            "metadata": {"register": register, "value": expression_register},
        }
        register += 1

        code.append(this_code)

        return code, register, environment

    def certificate(
        self,
        certificator_env: dict[int, list[int]]
    ) -> dict[int, list[int]]:
        """
        Compute the certificate of `NOT`, and set this attribute.

        For `NOT` nodes, first certificate the `expression` children node, and
        then the `NOT` node itself.

        Parameters
        ----------
        certificator_env : dict[int, list[int]]
            The certificators's environment, that maps variables IDs to
            encodings of their types.

        Returns
        -------
        certificator_env : dict[int, list[int]]
            The updated certificator's environment, with any additional
            information about the variable's types it might have captured.
        """

        # Certificate the negated `expression`
        certificator_env = self.expression.certificate(certificator_env)
        expression_certificate_label = self.expression.get_certificate_label()

        self.certificate_label = [
            *expression_certificate_label,
            f"{self.symbol}",
        ]

        return certificator_env
