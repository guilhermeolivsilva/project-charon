"""Representation of NOT nodes for the Abstract Syntax Tree."""

from typing import Union

from typing_extensions import override

from src.ast_nodes.node import Node
from src.utils import next_prime


class NOT(Node):
    """
    Implement the representation of a negation (logical not) for the AST.

    Parameters
    ----------
    expression : Node
        The Node representation of the term to be negated.
    """

    @override
    def __init__(self, expression: Node, **kwargs) -> None:
        super().__init__()

        self.expression: Node = expression
        self.instruction: str = "NOT"
        self.type: str = "int"

    @override
    def print(self, indent: int = 0) -> None:
        """
        Print the string representation of this `NOT` node.

        The node itself is aligned with `indent`, and its children are padded
        with an additional left space.

        Parameters
        ----------
        indent : int (optional, default = 0)
            The number of left padding spaces to indent.
        """

        super().print(indent)

        self.expression.print(indent + 1)

    @override
    def generate_code(self, register: int) -> tuple[
        int,
        list[dict[str, Union[int, str, None]]]
    ]:
        """
        Generate the code associated with this `Operation`.

        For this node specialization, generate code from the left and right
        hand sides nodes first, and then from the node itself.

        Parameters
        ----------
        register : int
            The number of the register to be used by the code generated by this
            Node.

        Returns
        -------
        register : int
            The number of the next register available.
        code_metadata : list of dict
            Return a list of dictionaries containing code metadata: the related
            `instruction`and `value`.
        """

        code_metadata: list[dict[str, Union[int, str, None]]] = []

        register, expression_code = self.expression.generate_code(register=register)
        code_metadata.extend(expression_code)

        expression_register = register - 1

        this_code = {
            "instruction": self.instruction,
            "metadata": {

                "register": register,
                "value": expression_register
            }
        }
        register += 1

        code_metadata.append(this_code)

        return register, code_metadata
    
    @override
    def certificate(self, positional_prime: int) -> int:
        """
        Compute the certificate of `NOT`, and set this attribute.

        For `NOT` nodes, first certificate the `expression` children node, and
        then the `NOT` node itself.

        Parameters
        ----------
        positional_prime : int
            A prime number that denotes the relative position of this node in
            the source code.

        Returns
        -------
        : int
            The prime that comes immediately after `positional_prime`.
        """

        # Certificate the negated `expression`
        positional_prime = self.expression.certificate(positional_prime)
        expression_certificate_label = self.expression.get_certificate_label().pop()

        self.certificate_label = (
            f"{positional_prime}"
            + f"({self.symbol})"
            + f"^({expression_certificate_label})"
        )

        return next_prime(positional_prime)
