"""Representation of FUNC_DEF nodes for the Abstract Syntax Tree."""

from typing import Union

from typing_extensions import override

from src.ast_nodes.node import Node
from src.ast_nodes.basic.SEQ import SEQ
from src.ast_nodes.functions.PARAM import PARAM


class FUNC_DEF(Node):
    """
    Implement the representation of a `FUNC_DEF` node for the AST.

    A `FUNC_DEF` is an abstraction of a function definition: it tracks its
    return type, parameters (and its types), and statements.

    The node itself only has children to help structuring the function
    definition, but doesn't have any semantics itself, `instruction`, or has a
    certificate.

    Parameters
    ----------
    function_name : str
        The name of the function.
    variable_metadata : dict
        Dictionary of variable metadata exported by the Lexer.
    """

    @override
    def __init__(
        self, function_name: str, function_metadata: dict[str, Union[str, dict]]
    ) -> None:
        type: str = function_metadata.get("type")
        super().__init__(function_name, type)

        self.parameters: list[PARAM] = self._define_vars_from_args(
            parameters=function_metadata.get("parameters")
        )
        self.statements: SEQ = None

    def set_statements(self, statements: SEQ) -> None:
        """
        Set the `statements` attribute.

        Parameters
        ----------
        statements : SEQ
            The statements to be added to object. Must be a `SEQ` -- i.e., the
            root of a subtree with the statements of this function.
        """

        self.statements = statements

    @override
    def get_certificate_label(self) -> list[str]:
        """
        Get the contents of `certificate_label`.

        For `FUNC_DEF` nodes, obtain the certificates, recursively, starting
        from the `statements` attribute (i.e., a `SEQ` node). The
        `FUNC_DEF` node itself does not have a certificate.

        Returns
        -------
        certificate : list of str
            A list containing the certificate label of this `FUNC_DEF`.
        """

        certificate: list[str] = []

        for parameter in self.parameters:
            certificate.extend(parameter.get_certificate_label())

        certificate.extend(self.statements.get_certificate_label())

        return certificate

    @override
    def print(self, indent: int = 0) -> None:
        """
        Print the string representation of this `FUNC_DEF`.

        The node itself is aligned with `indent`, and its children are padded
        with an additional left space.

        Parameters
        ----------
        indent : int (optional, default = 0)
            The number of left padding spaces to indent.
        """

        super().print(indent)

        for parameter in self.parameters:
            parameter.print(indent + 1)

        self.statements.print(indent + 1)

    @override
    def generate_code(
        self, register: int, environment: dict[str, dict[int, str]]
    ) -> tuple[
        list[dict[str, Union[int, str, float]]],
        int,
        dict[int, str]
    ]:
        """
        Generate the code for this `FUNC_DEF`.

        For this node specialization, generate the code from its `parameters`
        and `statements`, recursively. The `FUNC_DEF` node itself does not have
        an associated instruction, nor uses registers.

        Parameters
        ----------
        register : int
            The number of the register to be used by the code generated by this
            Node.
        environment : dict[int, str]
            The compiler's environment, that maps variables IDs to memory
            addresses and function IDs to instructions indices.

        Returns
        -------
        code : list of dict
            Return a list of dictionaries containing code metadata: the register
            to be used, the related `instruction` and its metadata.
        register : int
            The number of the next register available.
        environment : dict[int, str]
            The updated {var_id: address} environment mapping.
        """

        code: list[dict[str, Union[int, str]]] = []

        for parameter in self.parameters:
            (
                var_def_code,
                register,
                environment
            ) = parameter.generate_code(
                register=register,
                environment=environment
            )
            code.extend(var_def_code)

        (
            statements_code,
            register,
            environment
        ) = self.statements.generate_code(
            register=register,
            environment=environment
        )

        code.extend(statements_code)

        return code, register, environment

    @override
    def certificate(
        self,
        positional_prime: int,
        certificator_env: dict[int, list[int]]
    ) -> tuple[int, dict[int, list[int]]]:
        """
        Compute the certificate of this `FUNC_DEF`.

        To achieve this, certificate its `parameters` and `statements`,
        recursively and in order. The `FUNC_DEF` node itself does not have a
        certificate.

        Parameters
        ----------
        positional_prime : int
            A prime number that denotes the relative position of this node in
            the source code.
        certificator_env : dict[int, list[int]]
            The certificators's environment, that maps variables IDs to
            encodings of their types.

        Returns
        -------
        : int
            The prime that comes immediately after `positional_prime`.
        certificator_env : dict[int, list[int]]
            The updated certificator's environment, with any additional
            information about the variable's types it might have captured.
        """

        for parameter in self.parameters:
            (
                positional_prime,
                certificator_env
            ) = parameter.certificate(positional_prime, certificator_env)

        return self.statements.certificate(positional_prime, certificator_env)

    def _define_vars_from_args(self, parameters: dict[str, dict]) -> list[PARAM]:
        """
        Create `PARAM` nodes to be contain the received parameters.

        Parameters
        ----------
        parameters : dict
            A dict with variable metadata to generate `PARAM` nodes from.

        Returns
        -------
        variables : list[PARAM]
            A list of `PARAM` nodes. Might be empty, if the function does not
            take any parameters.
        """

        variables: list[PARAM] = []

        for parameter_name, parameter_metadata in parameters.items():
            variable_metadata = {"name": parameter_name, **parameter_metadata}

            variables.append(PARAM(variable_metadata=variable_metadata))

        return variables

    def get_function_name(self) -> str:
        """
        Get the name of this function.

        Returns
        -------
        function_name : str
            The name of the function.
        """

        function_name: str = self.value

        return function_name
