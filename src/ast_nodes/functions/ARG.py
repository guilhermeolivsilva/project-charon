"""Representation of ARG nodes for the Abstract Syntax Tree."""

from typing import Union

from typing_extensions import override

from src.ast_nodes.basic.CST import CST
from src.ast_nodes.node import Node
from src.ast_nodes.variables.VAR import VAR
from src.utils import type_cast


class ARG(Node):
    """
    Implement the representation of a function argument for the AST.

    Parameters
    ----------
    argument_value : Union[CST, VAR]
        The node representation of this argument.
    parameter_type : str
        The type the parameter expects from the argument.
    """

    @override
    def __init__(self, argument_value: Union[CST, VAR], parameter_type: str) -> None:
        super().__init__()

        self.argument_value: Union[CST, VAR] = argument_value
        self.parameter_type: str = parameter_type

    @override
    def print(self, indent: int = 0) -> None:
        """
        Print the string representation of this `ARG`.

        The node itself is aligned with `indent`, and `argument_value` is padded
        with an additional left space.

        Parameters
        ----------
        indent : int (optional, default = 0)
            The number of left padding spaces to indent.
        """

        super().print(indent)

        self.argument_value.print(indent=indent + 1)

    @override
    def generate_code(
        self, register: int, environment: dict[str, dict[int, str]]
    ) -> tuple[
        list[dict[str, Union[int, str, float]]],
        int,
        dict[int, str]
    ]:
        """
        Generate the code associated with this `ARG`.

        For this node specialization, generate code from the `argument_value`
        node first, and then generate a `MOV` instruction to save the
        `argument_value` in the `arg` register.

        Parameters
        ----------
        register : int
            The number of the register to be used by the code generated by this
            Node.
        environment : dict[int, str]
            The compiler's environment, that maps variables IDs to memory
            addresses and function IDs to instructions indices.

        Returns
        -------
        code : list of dict
            Return a list of dictionaries containing code metadata: the register
            to be used, the related `instruction` and its metadata.
        register : int
            The number of the next register available.
        environment : dict[int, str]
            The updated {var_id: address} environment mapping.
        """

        code: list[dict] = []

        (
            argument_value_code,
            register,
            environment
        ) = self.argument_value.generate_code(
            register=register,
            environment=environment
        )
        code.extend(argument_value_code)

        # Type cast the argument value to the type the parameter expects, if
        # they are not the same
        if self.argument_value.get_type() != self.parameter_type:
            # Type cast emitter doesn't change the {var_id: address} environment
            arg_typecast, register = type_cast(
                original_type=self.argument_value.get_type(),
                target_type=self.parameter_type,
                register=register,
            )
            code.extend(arg_typecast)

        # ARG must point to the same register that contains the `argument_value`
        argument_value_register = register - 1
        argument_store_code = {
            "instruction": "MOV",
            "metadata": {
                "register": "arg",
                "value": argument_value_register,
            },
        }
        code.append(argument_store_code)

        return code, register, environment

    @override
    def certificate(
        self,
        certificator_env: dict[int, list[int]]
    ) -> dict[int, list[int]]:
        """
        Compute the certificate of the this `ARG`, and set this attribute.

        For `ARG` nodes, certificate the `argument_value` node first, and then
        the `ARG` itself.

        Parameters
        ----------
        certificator_env : dict[int, list[int]]
            The certificators's environment, that maps variables IDs to
            encodings of their types.

        Returns
        -------
        : int
            The prime that comes immediately after `positional_prime`.
        certificator_env : dict[int, list[int]]
            The updated certificator's environment, with any additional
            information about the variable's types it might have captured.
        """

        certificator_env = self.argument_value.certificate(certificator_env)
        _argument_value_certificate = self.argument_value.get_certificate_label()

        self.certificate_label = [*_argument_value_certificate, f"{self.symbol}"]

        return certificator_env
