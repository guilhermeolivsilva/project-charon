"""Representation of IFELSE nodes for the Abstract Syntax Tree."""

from typing import Union

from typing_extensions import override

from src.ast_nodes.node import Node
from src.ast_nodes.conditionals.conditional import Conditional


class IFELSE(Conditional):
    """
    Implement the representation of a conditional for the AST.

    Parameters
    ----------
    parenthesis_expression : Node
        The node representation of the expression to be evaluated.
    statement_if_true : Node
        The node representation of code to run if the `parenthesis_expression`
        evaluates to `True`.
    statement_if_false : Node
        The node representation of code to run if the `parenthesis_expression`
        evaluates to `False`.
    """

    @override
    def __init__(
        self,
        parenthesis_expression: Node,
        statement_if_true: Node,
        statement_if_false: Node,
    ) -> None:
        super().__init__(parenthesis_expression, statement_if_true)

        self.statement_if_false: Node = statement_if_false

    @override
    def get_certificate_label(self) -> list[str]:
        """
        Get the contents of `certificate_label`.

        For `IFELSE` nodes, first call the `Conditional.get_certificate_label`
        method, and compose it with the `certificate_label` obtained recursively
        from the `statement_if_false` subtree.

        Returns
        -------
        : list of str
            A list containing the certificate label of the `Node`.
        """

        return [
            *super().get_certificate_label(),
            *self.statement_if_false.get_certificate_label(),
        ]

    @override
    def print(self, indent: int = 0) -> None:
        """
        Print the string representation of this `Conditional`.

        The node itself is aligned with `indent`, and its children are padded
        with an additional left space.

        Parameters
        ----------
        indent : int (optional, default = 0)
            The number of left padding spaces to indent.
        """

        super().print(indent)

        self.statement_if_false.print(indent + 1)

    @override
    def generate_code(
        self, register: int, environment: dict[int, str]
    ) -> tuple[
        list[dict[str, Union[int, str, float]]],
        int,
        dict[int, str]
    ]:
        """
        Generate the code associated with this `IFELSE`.

        For this node specialization, generate code from the
        `parenthesis_expression` first, add a conditional jump to the first
        instruction of the `statement_if_false` subtree -- i.e., to jump to if
        the `parenthesis_expression` evaluates to `False` --, then generate
        code from the `statement_if_true`, add an unconditional jump to the
        last instruction of teh `statement_if_false` subtree, and then finally
        generate code from `statement_if_false`.

        Parameters
        ----------
        register : int
            The number of the register to be used by the code generated by this
            Node.
        environment : dict[int, str]
            The compiler's environment, that maps variables IDs to memory
            addresses.

        Returns
        -------
        code : list of dict
            Return a list of dictionaries containing code metadata: the register
            to be used, the related `instruction` and its metadata.
        register : int
            The number of the next register available.
        environment : dict[int, str]
            The updated {var_id: address} environment mapping.
        """

        (
            parenthesis_expression_code,
            register,
            environment
        ) = self.parenthesis_expression.generate_code(
            register=register,
            environment=environment
        )
        conditional_register: int = register - 1

        (
            statement_if_true_code,
            register,
            environment
        ) = self.statement_if_true.generate_code(
            register=register,
            environment=environment
        )

        (
            statement_if_false_code,
            register,
            environment
        ) = self.statement_if_false.generate_code(
            register=register,
            environment=environment
        )

        # The jump target is the amount of instructions in the
        # `statement_if_true` block (add 2 to land right after the unconditional
        # jump added later on)
        instructions_to_jump_over_if = len(statement_if_true_code) + 2
        conditional_jump = {
            "instruction": "JZ",
            "metadata": {
                "conditional_register": conditional_register,
                "jump_size": instructions_to_jump_over_if,
            },
        }

        # The jump target is the amount of instructions in the
        # `statement_if_false` block (add 1 to land right after the last
        # instruction of the `statemente_if_false` block)
        instructions_to_jump_over_else = len(statement_if_false_code) + 1
        unconditional_jump = {
            "instruction": "JZ",
            "metadata": {
                "conditional_register": "zero",
                "jump_size": instructions_to_jump_over_else,
            },
        }

        ifelse_code: list[dict[str, Union[int, str]]] = [
            *parenthesis_expression_code,
            conditional_jump,
            *statement_if_true_code,
            unconditional_jump,
            *statement_if_false_code,
        ]

        return ifelse_code, register, environment

    @override
    def certificate(self, positional_prime: int) -> int:
        """
        Compute the certificate of the current `IFELSE`, and set this attribute.

        For `IFELSE` nodes, certificate the `parenthesis_expression`,
        recursively, and the `IFELSE` itself, and then the children
        `statement` nodes -- also recursively -- in order (i.e., the
        `statement_if_true` and then the `statement_if_false` subtrees).

        Parameters
        ----------
        positional_prime : int
            A prime number that denotes the relative position of this node in
            the source code.

        Returns
        -------
        : int
            The prime that comes immediately after `positional_prime`.
        """

        positional_prime = super().certificate(positional_prime)

        return self.statement_if_false.certificate(positional_prime)
