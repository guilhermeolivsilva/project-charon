"""Representation of VAR_DEF nodes for the Abstract Syntax Tree."""

from typing import Union

from typing_extensions import override

from src.ast_nodes.node import Node
from src.utils import add_variable_to_environment, get_variable_size


class VAR_DEF(Node):
    """
    Implement the representation of a variable definition for the AST.

    Parameters
    ----------
    variable_metadata : dict
        Dictionary of variable metadata exported by the Lexer.
    """

    @override
    def __init__(self, variable_metadata: dict) -> None:
        id: int = variable_metadata.get("id")
        type: str = variable_metadata.get("type")

        super().__init__(id, type)

        self.variable_metadata: dict = variable_metadata

        prime: int = variable_metadata["prime"]
        self.size: int = get_variable_size(variable_metadata)
        self.symbol: str = f"({self.symbol})" + f"^({prime})" + f"^({self.size})"

    @override
    def print(self, indent: int = 0) -> None:
        """
        Print the string representation of this `VAR_DEF`.

        The node itself is aligned with `indent`, and the information about its
        attributes is padded with an additional left space.

        Parameters
        ----------
        indent : int (optional, default = 0)
            The number of left padding spaces to indent.
        """

        super().print(indent)

        var_def_metadata: str = f"Name: {self.variable_metadata.get('name')}, "
        var_def_metadata += f"Type: {self.variable_metadata.get('type')}"

        if self.variable_metadata.get("length"):
            var_def_metadata += (
                f" (array), Length: {self.variable_metadata.get('length')}"
            )

        print(f"{'  ' * (indent + 1)}{var_def_metadata}")

    @override
    def generate_code(
        self, register: int, environment: dict[str, dict[int, str]]
    ) -> tuple[
        list[dict[str, Union[int, str, float]]],
        int,
        dict[int, str]
    ]:
        """
        Generate the code associated with this `VAR_DEF`.

        There is no code associated with this operation: it will simply update
        the environment.

        Parameters
        ----------
        register : int
            The number of the register to be used by the code generated by this
            Node.
        environment : dict[int, str]
            The compiler's environment, that maps variables IDs to memory
            addresses and function IDs to instructions indices.

        Returns
        -------
        code : list of dict
            Return a list of dictionaries containing code metadata: the register
            to be used, the related `instruction` and its metadata.
        register : int
            The number of the next register available.
        environment : dict[int, str]
            The updated {var_id: address} environment mapping.
        """

        environment = add_variable_to_environment(
            environment=environment,
            var_id=self.value,
            size=self.size
        )

        return [], register, environment
