"""Representation of VAR_DEF nodes for the Abstract Syntax Tree."""

from typing import Union

from typing_extensions import override

from src.ast_nodes.node import Node
from src.utils import get_variable_size, builtin_types, TYPE_SYMBOLS_MAP


class VAR_DEF(Node):
    """
    Implement the representation of a variable definition for the AST.

    Parameters
    ----------
    variable_metadata : dict
        Dictionary of variable metadata exported by the Lexer.
    """

    @override
    def __init__(self, variable_metadata: dict) -> None:
        id: int = variable_metadata.get("id")
        type: str = variable_metadata.get("type")

        super().__init__(id, type)

        self.variable_metadata: dict = variable_metadata

        self.prime: int = variable_metadata["prime"]
        self.size: int = get_variable_size(variable_metadata)

    @override
    def print(self, indent: int = 0) -> None:
        """
        Print the string representation of this `VAR_DEF`.

        The node itself is aligned with `indent`, and the information about its
        attributes is padded with an additional left space.

        Parameters
        ----------
        indent : int (optional, default = 0)
            The number of left padding spaces to indent.
        """

        super().print(indent)

        var_def_metadata: str = f"Name: {self.variable_metadata.get('name')}, "
        var_def_metadata += f"Type: {self.variable_metadata.get('type')}"

        if self.variable_metadata.get("length"):
            var_def_metadata += (
                f" (array), Length: {self.variable_metadata.get('length')}"
            )

        print(f"{'  ' * (indent + 1)}{var_def_metadata}")

    @override
    def generate_code(
        self, register: int, environment: dict[str, dict[int, str]]
    ) -> tuple[
        list[dict[str, Union[int, str, float]]],
        int,
        dict[int, str]
    ]:
        """
        Generate the code associated with this `VAR_DEF`.

        There is no code associated with this operation: it will simply update
        the environment.

        Parameters
        ----------
        register : int
            The number of the register to be used by the code generated by this
            Node.
        environment : dict[int, str]
            The compiler's environment, that maps variables IDs to memory
            addresses and function IDs to instructions indices.

        Returns
        -------
        code : list of dict
            Return a list of dictionaries containing code metadata: the register
            to be used, the related `instruction` and its metadata.
        register : int
            The number of the next register available.
        environment : dict[int, str]
            The updated {var_id: address} environment mapping.
        """

        # If no variables are defined in the environment, the dict will be empty
        # and we manually set the ID and address.
        variable_count = len(environment["variables"])

        if not variable_count:
            new_var_address = hex(0)
        else:
            last_var_id = list(environment["variables"]).pop()
            last_var_address = environment["variables"][last_var_id]["address"]
            last_var_size = environment["variables"][last_var_id]["size"]
            new_var_address = hex(int(last_var_address, 16) + last_var_size)

        var_id = self.value
        environment["variables"][var_id] = {
            "address": new_var_address,
            "size": self.size
        }

        return [], register, environment

    @override
    def certificate(
        self,
        certificator_env: dict[int, list[int]]
    ) -> dict[int, list[int]]:
        """
        Compute the certificate of this variable definition.

        `VAR_DEF` objects will add an entry in the `certificator_env` that maps
        the variable's prime to the symbols that encode the type of this
        variable. (The entry will be initiated as a sequence of `unknown`, with
        `self.size` elements.)

        The returned certificate will have a placeholder to represent the type
        of this variable that will be later filled by the `certificator`.

        Parameters
        ----------
        certificator_env : dict[int, list[int]]
            The certificators's environment, that maps variables IDs to
            encodings of their types.

        Returns
        -------
        certificator_env : dict[int, list[int]]
            The updated certificator's environment, with any additional
            information about the variable's types it might have captured.
        """

        # If this is a homogeneous variable (i.e., a simple variable or an
        # array), then we know the type symbol upfront
        if self.type in builtin_types:
            certificator_env[self.prime] = {
                "type": [
                    TYPE_SYMBOLS_MAP[self.type]["type_symbol"]
                    for _ in range(self.size // builtin_types[self.type])
                ]
            }

        # If it is not, add to the certificator environment as `unknown`
        else:
            # TODO: divide by the actual size of the type of this `VAR_DEF`
            certificator_env[self.prime] = {
                "type": [
                    TYPE_SYMBOLS_MAP["__unknown_type__"]["type_symbol"]
                    for _ in range(self.size // 4)
                ]
            }

        return certificator_env
