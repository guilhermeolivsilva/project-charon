"""Representation of PROG nodes for the Abstract Syntax Tree."""

from typing import Union

from typing_extensions import override

from src.ast_nodes.node import Node


class PROG(Node):
    """Implement the representation of the beginning of a program for the AST."""

    @override
    def __init__(self) -> None:
        super().__init__(uses_register=False)

        self.instruction: str = "HALT"
        self.children: list[Node] = []

    def add_child(self, child: Node) -> None:
        """
        Add a child Node to the `self.children` list.

        Parameters
        ----------
        child : Node
            The child to be added to the list.
        """

        self.children.append(child)

    @override
    def get_certificate_label(self) -> list[str]:
        """
        Get the contents of `certificate_label`.

        For `PROG` nodes, first obtain the certificate from each `child`
        subtree, recursively, and then from the `PROG` node itself.

        Returns
        -------
        : list of str
            A list containing the certificate label of the `Node`.
        """

        certificate_label: list[str] = []

        for child in self.children:
            certificate_label.extend(
                [label for label in child.get_certificate_label() if label is not None]
            )

        certificate_label.extend(super().get_certificate_label())

        return certificate_label

    @override
    def print(self, indent: int = 0) -> None:
        """
        Print the string representation of this `PROG`.

        The node itself is aligned with `indent`, and its children are padded
        with an additional left space.

        Parameters
        ----------
        indent : int (optional, default = 0)
            The number of left padding spaces to indent.
        """

        super().print(indent)

        for child in self.children:
            child.print(indent + 1)

    @override
    def generate_code(
        self, register: int, environment: dict[str, dict[int, str]]
    ) -> tuple[
        list[dict[str, Union[int, str, float]]],
        int,
        dict[int, str]
    ]:
        """
        Generate the code associated with this `PROG`.

        For this node specialization, generate code from the `first_statement`
        (i.e., the program itself) and then add an ending instruction (`HALT`)
        to the code.

        Notice that the register may only be incremented by the parameter nodes'
        `generate_code` method. This Node does not increment the `register`,
        as it only adds a `HALT` to the instructions list.

        Parameters
        ----------
        register : int
            The number of the register to be used by the code generated by this
            Node.
        environment : dict[int, str]
            The compiler's environment, that maps variables IDs to memory
            addresses and function IDs to instructions indices.

        Returns
        -------
        code : list of dict
            Return a list of dictionaries containing code metadata: the register
            to be used, the related `instruction` and its metadata.
        register : int
            The number of the next register available.
        environment : dict[int, str]
            The updated {var_id: address} environment mapping.
        """

        code: list[dict[str, Union[int, str, None]]] = []

        for child in self.children:
            child_code, register, environment = child.generate_code(
                register=register,
                environment=environment
            )
            code.extend(child_code)

        this_code, _, _ = super().generate_code(
            register=register,
            environment=environment
        )
        code.extend(this_code)

        return code, register, environment

    @override
    def certificate(
        self,
        certificator_env: dict[int, list[int]]
    ) -> dict[int, list[int]]:
        """
        Compute the certificate of `PROG`, and set this attribute.

        For `PROG` nodes, certificate the `first_statement`, recursively, and
        then the `PROG` node itself.

        Parameters
        ----------
        certificator_env : dict[int, list[int]]
            The certificators's environment, that maps variables IDs to
            encodings of their types.

        Returns
        -------
        certificator_env : dict[int, list[int]]
            The updated certificator's environment, with any additional
            information about the variable's types it might have captured.
        """

        for child in self.children:
            certificator_env = child.certificate(certificator_env)

        return super().certificate(certificator_env)
