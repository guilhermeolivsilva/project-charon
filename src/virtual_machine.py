"""Implement a virtual machine that computes generated code."""


class VirtualMachine:
    """
    Virtual Machine that computes instructions from the `CodeGenerator`.

    Parameters
    ----------
    code_collection : list
        List of tuples generated by the `CodeGenerator`.
    """

    def __init__(self, code_collection: list) -> None:
        self.variables = {
            i: 0 for i in range(ord('a'), ord('z') + 1)
        }

        self.stack = [None for _ in range(1, 10)]
        self.stack_pointer = 0
        self.code_collection = code_collection
        self.program_counter = 0

    def run(self) -> None:
        """Run the program on the virtual machine."""

        while True:
            instruction, node = self.code_collection[self.program_counter]

            self.program_counter += 1

            if instruction == "IFETCH":
                self.stack[self.stack_pointer] = self.variables[self.program_counter]
                self.stack_pointer += 1

            elif instruction == "IADD":
                self.stack[self.stack_pointer - 2] += self.stack[self.stack_pointer - 1]
                self.stack_pointer -= 1

            elif instruction == "HALT":
                break
